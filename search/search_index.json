{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#articles","title":"Articles","text":"<ul> <li>2024-03-27 : Getting started with Teams AI library</li> <li>2022-04-20 : Apply a DevOps process to your SPFx project (Part 3)</li> <li>2022-02-21 : Apply a DevOps process to your SPFx project (Part 2)</li> <li>2022-01-04 : Apply a DevOps process to your SPFx project (Part 1)</li> <li>2021-01-25 : Authenticate to SharePoint Online through an Azure Function using PnP Framework</li> <li>2020-11-19 : Connect to SharePoint in an AAD Application permission context with a certificate stored in Azure KeyVault</li> <li>2020-02-11 : How to quickly and properly delete a Team (without waiting)</li> </ul>"},{"location":"#tips-tricks","title":"Tips &amp; Tricks","text":"<ul> <li>2023-04-11 : [PnP PowerShell] Set a PnPContext to SharePoint On-Premises</li> <li>2022-12-23 : [SPFx] Form Customizer Boilerplate</li> <li>2021-09-14 : [Azure DevOps] Get default project administrators team members programmatically</li> <li>2021-03-02 : [SPFx] Init API permissions for your SPFx projects without deploying them</li> <li>2020-12-04 : [SPFx] Transform the Fluent UI Breadcrumb component into a step indicator</li> <li>2020-05-05 : [SPFx] Transform the Fluent UI ProgressIndicator component into a countdown timer</li> <li>2020-02-13 : [CSOM] Test in your C# code if a SharePoint File or Folder exists</li> </ul>"},{"location":"about/","title":"About this blog","text":""},{"location":"about/#who-am-i","title":"Who Am I","text":"<p>Hi ! I'm Micha\u00ebl, M365 Solutions Developer at onepoint based in Nantes, France.</p> <p>I'm +10yr experienced in SharePoint solutions development (started from the 2007 version) and since 2017, I'm focused on developing SPFx solutions, working with Office 365 Managed Services and Azure Services, exploring Microsoft Graph and Identity. I also (try to) contribute to the PnP Initiative with amazing people!</p> <p>In this blog, I'll talk about things I learned day by day since I started to work with SharePoint Products until now with Microsoft 365 / Azure ecosystem (articles, memos, tips &amp; tricks...).</p> <p>I'm also recognized as a M365 Development MVP.</p>"},{"location":"about/#why-now-in-2020","title":"Why Now (in 2020)","text":"<p>It's hard to convince yourself \"Ok, let's open to the world\". I think I was waiting for the right time. When I see how the Microsoft Community has grown up, especially in the Office 365 bubble, I think that it could be helpful to anyone who, like me, wants to find some answers to technical issues met (missing puzzle piece \ud83d\ude09).</p>"},{"location":"about/#why-in-english","title":"Why In English","text":"<p>Because it's easier to reach out a maximum of people \ud83e\udd17</p> <p>Hope you'll find what you're looking for, see you online or IRL!</p>"},{"location":"about/#certifications-recognitions","title":"Certifications / recognitions","text":""},{"location":"about/#sessionize-profile","title":"Sessionize profile","text":"<p>Public Profile</p>"},{"location":"articles/20200211-properly-remove-team/","title":"How to quickly and properly delete a Team (without waiting)","text":"<p>Article update</p> <p>2020-11-29 : I've updated the article following the update of the CLI for Microsoft 365, adding a new command for permanently delete a site collection.</p>"},{"location":"articles/20200211-properly-remove-team/#use-case","title":"Use Case","text":"<p>You work for a company that wants to automatically create a Team with Tabs, Channels and other stuff that will make a new project team ready to rock the stage.</p> <p>You are preparing the process and for mastering it, you have create / test / destroy / retry. But when you want to clean up your mess, you have to know that, during 30 days:</p> <ul> <li>Your Team still exists as a Group (you can find it in the \"Deleted Groups\" menu on AAD), same for the associated e-mail address</li> <li>The Team Site also still exists</li> </ul> <p>So let's says that you made a mistake during the creation of a Team and want to \"start over\" (with same name of course), if you don't want to wait for the Office 365 Job to update your environment and re-create the Team with same name:</p> <ul> <li> <p>The SharePoint Site URL takes a number at the end of its address (of course, because the older one's still here)</p> </li> <li> <p>You can't permanently delete the Teams Site, as the SharePoint Admin Center detects that the related Group still exists</p> </li> </ul> <p>Here's a step by step process to delete quickly a Team ! I recommand to follow them in this order to make everything's work.</p>"},{"location":"articles/20200211-properly-remove-team/#prerequisites","title":"Prerequisites","text":"<ol> <li>An Office 365 (Dev) Tenant or a Partner Demo Tenant</li> <li>An Account with the following Office 365 roles<ul> <li>SharePoint Admin</li> <li>Teams Admin</li> </ul> </li> <li>An Account with the following Azure AD role<ul> <li>Groups administrator</li> </ul> </li> <li>Command Interface (one of these)<ul> <li>PowerShell (with AzureAD PowerShell, PnP PowerShell and Microsoft Teams PowerShell)</li> <li>CLI for Microsoft 365</li> </ul> </li> </ol>"},{"location":"articles/20200211-properly-remove-team/#delete-group","title":"Delete Group","text":""},{"location":"articles/20200211-properly-remove-team/#delete-group-with-interface","title":"Delete Group with Interface","text":"<p>Throught the UI, you have to delete the Group then permanently delete it</p> <p></p> <p></p>"},{"location":"articles/20200211-properly-remove-team/#delete-group-with-code","title":"Delete Group with code","text":"Azure AD PowerShellCLI for Microsoft 365 <pre><code>Connect-AzureAD -TenantId \"TenantId\"\nRemove-AzureADGroup -ObjectId \"GroupId\"\nRemove-AzureADMSDeletedDirectoryObject -Id \"GroupId\"\n</code></pre> <pre><code># (As there's no CLI command to permanently delete a Group,\n# you'll have to do it through the UI)\naad o365group remove --id \"GroupId\" --confirm\n</code></pre>"},{"location":"articles/20200211-properly-remove-team/#delete-team-if-necessary","title":"Delete Team (if necessary)","text":"<p>Sometimes, once a Group is permanently deleted, the Team still exists. If it's the case and once again, you don't want for the Job to delete it, you can do it yourself. But don't be surprise if the following commands throw an error : maybe the Job has already worked.</p>"},{"location":"articles/20200211-properly-remove-team/#delete-team-with-interface","title":"Delete Team with Interface","text":"<p>Throught the UI (if you have an owner account) or Admin Interface, you can delete the Team</p> <p></p> <p>OR</p> <p></p>"},{"location":"articles/20200211-properly-remove-team/#delete-team-with-code","title":"Delete Team with code","text":"Microsoft Teams PowerShell <pre><code>Connect-MicrosoftTeams -TenantId \"TenantId\"\nRemove-Team -GroupId \"GroupId\"\n</code></pre>"},{"location":"articles/20200211-properly-remove-team/#delete-site-collection","title":"Delete Site Collection","text":"<p>As I told you before (even if you did the previous steps), if you try to delete the Teams Site from the SharePoint Admin Center, you won't be able to remove it from the Site Collection Recycle Bin (because of the O365 Job Tenant update process).</p>"},{"location":"articles/20200211-properly-remove-team/#delete-site-with-code","title":"Delete site with code","text":"PnP PowerShellCLI for Microsoft 365 <pre><code># If you are familiar with the Get-PnPStoredCredential cmdlet,\n# you can use it here with the \"-Credential\" Argument\nConnect-PnPOnline -TenantId \"TenantId\"\n\n# Remove the site\nRemove-PnPTenantSite -Url \"TeamsSiteUrl\" -Force -SkipRecycleBin\n\n# Remove the site from the Site Collection Recycle Bin\nClear-PnPTenantRecycleBinItem -Url \"TeamsSiteUrl\" -Force -Wait\n</code></pre> <pre><code># Remove the site\nspo site classic remove -u \"TeamsSiteUrl\" --skipRecycleBin --confirm --wait\n\n# Remove the site from the Site Collection Recycle Bin\nspo tenant recyclebinitem remove -u \"TeamsSiteUrl\" --confirm --wait\n</code></pre>"},{"location":"articles/20200211-properly-remove-team/#thats-it","title":"That's it","text":"<p>Et voil\u00e0 ! You can start over your process until it's ready to use.</p> <p>Of course, you could also make those tasks with the SharePoint Online Management Shell or with the Graph API, but here I've covered the most common ways of working with Teams / Group / SharePoint administration.</p>"},{"location":"articles/20200211-properly-remove-team/#useful-links","title":"Useful Links","text":"<ul> <li>Microsoft Teams Architecture</li> <li>Microsoft Teams Architecture Posters</li> </ul>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/","title":"Connect to SharePoint in an AAD Application permission context with a certificate stored in Azure KeyVault","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#use-case","title":"Use Case","text":"<p>You work on a Web Application (or API) which is connected to a SharePoint Tenant.</p> <p>You want to setup things correctly and want to execute SharePoint actions in Azure Active Directory (AAD) Application permission context.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#goal-of-this-article","title":"Goal of this article","text":"<p>This article will show how to work with a SharePoint site through an API or a Web Application, only with AAD Application permissions.</p> <p>It will demonstrate how to setup everything and how to connect with a certificate stored in a Key Vault, step by step, in UI, PowerShell and Azure CLI.</p> <p>Let's see the final result below</p> <p></p> <p>The Web Application (or API)...</p> <ol> <li>Requests access to the Key Vault, in order to get the stored certificate</li> <li>Gets the Key Vault certificate</li> <li>Authenticates to Office 365 using the SharePoint AAD Application with the certificate</li> <li>Gets a ClientContext with the requested API permissions</li> <li>Uses the ClientContext object to query the SharePoint site</li> <li>Gets Web info</li> </ol> <p>(I've shrinked the 3. because there are somes requests are made to https://login.microsofonline.com, more info here)</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#prerequisites","title":"Prerequisites","text":"<ol> <li>An Office 365 (Dev) Tenant or a Partner Demo Tenant</li> <li>An Azure subscription and the following Azure AD role at least<ul> <li>Application Administrator</li> </ul> </li> <li>Command Interface (one of these)<ul> <li>PowerShell (with Az PowerShell and AzureAD PowerShell)</li> <li>Azure CLI (on your machine or through Azure Cloud Shell)</li> </ul> </li> <li>Visual Studio (2017 or later)</li> </ol>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#why-authenticating-by-certificate-and-not-by-client-id-secret","title":"Why authenticating by certificate and not by Client ID / Secret","text":"<p>In AAD Application permission context, for unknown reason, you can't work with SharePoint REST API using Client ID / Secret connection. It only works with a connection using Client ID / Certificate.</p> <p>I've posted a solution as an answer on Stack Overflow a couple months ago.</p> <p>But in some cases, you have no choice but to work with a Client ID / Secret (like for example writing in the User Profile Service). In that case, use the legacy App-Only principal context</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#why-using-two-azure-powershell-modules","title":"Why using two Azure PowerShell Modules","text":"<p>Even if Microsoft provides a module that covers most Azure resources and the most popular is Az PowerShell, this one does not cover all features regarding AAD.</p> <p>For instance, let's compare one command and the options provided.</p> New-AzADApplication New-AzureADApplication -DisplayName -DisplayName -IdentifierUris [-IdentifierUris] [-HomePage] [-Homepage] [-ReplyUrls] [-ReplyUrls] [-AvailableToOtherTenants] [-AvailableToOtherTenants] [-KeyCredentials] [-KeyCredentials] [-PasswordCredentials] [-PasswordCredentials] [-StartDate] / [-EndDate] / [-CertValue] / [-Password] / / [-AppRoles] / [-Oauth2Permissions] / [-AddIns] / [-AllowGuestsSignIn] / [-AllowPassthroughUsers] / [-AppLogoUrl] / [-ErrorUrl] / [-GroupMembershipClaims] / [-InformationalUrls] / [-IsDeviceOnlyAuthSupported] / [-IsDisabled] / [-KnownClientApplications] / [-LogoutUrl] / [-Oauth2AllowImplicitFlow] / [-Oauth2AllowUrlPathMatching] / [-Oauth2RequirePostResponse] / [-OrgRestrictions] / [-OptionalClaims] / [-ParentalControlSettings] / [-PreAuthorizedApplications] / [-PublicClient] / [-PublisherDomain] / [-RecordConsentConditions] / [-RequiredResourceAccess] / [-SamlMetadataUrl] / [-SignInAudience] / [-WwwHomepage] <p>As you can see, the AzureAD Module provides more options just in this example.</p> <p>And as stated here, the AzureAD module is the one to use when working with AAD.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#connect-to-azure","title":"Connect to Azure","text":"Az PowerShellAzure AD PowerShellAzure CLI <pre><code>Connect-AzAccount # -Subscription \"SUBSCRIPTION_ID\" -TenantId \"TENANT_ID\" (if you have multiples tenants)\n# Wait for prompt to get credentials\n\nGet-AzContext | select Account, Tenant\n# Check if the context is correct\n</code></pre> <pre><code>Connect-AzureAD # -TenantId \"TENANT_ID\" (if you have multiples tenants)\n# Wait for prompt to get credentials\n\nGet-AzureADCurrentSessionInfo | select Account, Tenant\n# Check if the context is correct\n</code></pre> <pre><code>az login # --tenant \"TENANT_ID\" (if you have multiples tenants)\n# Authorize with Device Code\n\naz account show --query '[user.name,tenantId]'\n# Check if the context is correct\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#create-key-vault-and-the-ressource-group","title":"Create Key Vault (and the Ressource Group)","text":"<p>The first step is to create the Key Vault that will store the certificate.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#create-key-vault-through-interface","title":"Create Key Vault through interface","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#create-key-vault-with-code","title":"Create Key Vault with code","text":"Az PowerShellAzure CLI <pre><code># Create Resource Group\nNew-AzResourceGroup -Name \"rg-common\" -Location \"westeurope\" # -Tag @{Environment=\"Production\"; Department=\"HR\"} (if tags are required by your organization)\n\n# Create KeyVault\nNew-AzKeyVault -VaultName \"kvwecommon\" -ResourceGroupName \"rg-common\" -Location \"westeurope\"\n</code></pre> <pre><code># Create Resource Group\naz group create -l westeurope -n \"rg-common\" # --tags Environment=\"Production\" Department=\"HR\" (if tags are required by your organization)\n\n# Create KeyVault\naz keyvault create --resource-group \"rg-common\" --name \"kvwecommon\"\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#add-certificate-to-key-vault","title":"Add certificate to Key Vault","text":"<p>Once the Key Vault is created, we'll use its certificate creation feature to init one.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#add-certificate-through-interface","title":"Add certificate through interface","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#add-certificate-with-code","title":"Add certificate with code","text":"Az PowerShellAzure CLI <pre><code># Add yourself the permissions to get secret (for testing locally the solution later) and to write in the certificates store\nSet-AzKeyVaultAccessPolicy -VaultName \"kvwecommon\" -EmailAddress \"YOUR_EMAIL_ADDRESS\" -PermissionsToSecret get -PermissionsToCertificates import,create,get,list -PassThru\n\n# If you want to set an expiration delay beyond 12 months, specify a value with the -ValidityInMonths parameter\n$policy = New-AzKeyVaultCertificatePolicy -IssuerName 'Self' -KeyType RSA -RenewAtPercentageLifetime 80 -SecretContentType application/x-pkcs12 -SubjectName 'CN=MyCert' -ValidityInMonths 12\nAdd-AzKeyVaultCertificate -VaultName \"kvwecommon\" -Name \"MyCert\" -CertificatePolicy $policy\n</code></pre> <pre><code># Add yourself the permissions to get secret (for testing locally the solution later)\n# You can get your info with \"az ad signed-in-user show --query objectId\"\naz keyvault set-policy --name \"kvwecommon\" --object-id \"YOUR_OBJECT_ID\" --secret-permissions get\n\n# If you want to set an expiration delay beyond 12 months, specify a value with the --validity parameter\naz keyvault certificate create --vault-name \"kvwecommon\" -n \"MyCert\" -p \"$(az keyvault certificate get-default-policy)\"\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-application-and-apply-admin-consent","title":"Register AAD Application (and apply admin consent)","text":"<p>Like said before, to connect to SharePoint as an application, you have two options:</p> <ul> <li>using the AAD Application context (accepts Client ID / Secret and certificate)</li> <li>using the SharePoint App-Only principal context (accepts Client ID / Secret)</li> </ul> <p>As we'll authenticate with a certificate, the only way is to use the AAD Application context.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-through-interface","title":"Register AAD App through interface","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-with-code","title":"Register AAD App with code","text":"<p>To register Application permissions, you have to indicate which API you want to use and check the permissions required for you needs. If it's transparent for you when you register through the Azure Portal, let me explain how does it work under the hood.</p> <p>Whether you want to work with SharePoint, Microsoft Graph, Dynamics or else, each service is registered as a service principal (Enterprise Application in AAD). And each of these contains AppRoles (for Application permissions) and Oauth2Permissions (Delegated permissions).</p> <p>You'll notice later in the article that, for those service principals, we can refer to them as AppId and ObjectId. Depending on the command executed, the ObjectId will be required because it's unique, instead of the AppId which is the same whatever the organization is. For instance, the AppId for SharePoint is <code>00000003-0000-0ff1-ce00-000000000000</code> and for Microsoft Graph <code>00000003-0000-0000-c000-000000000000</code>.</p> <p>From the moment where you want to add permissions, you must register your application as a service principal too, in order to enable those permissions for your organization.</p> <p>Instead of the AAD Application registration user interface, you have to declare both AAD Application and its service principal (the Enterprise Application)</p> <p>Now that you know this, we'll see how to register the appropriate permissions and especially when admin consent is required.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-with-powershell","title":"Register AAD App with PowerShell","text":"Azure AD PowerShell <pre><code># Here, we'll use the AzureAD Module\n\n# Get the service principal for \"Office 365 SharePoint Online\"\n$adspSPO = Get-AzureADServicePrincipal -Filter \"AppId eq '00000003-0000-0ff1-ce00-000000000000'\"\n\n# If you want to get all the available Application permissions\n$adspSPO.AppRoles\n\n# If you want to get all the available Delegated permissions\n$adspSPO.Oauth2Permissions\n\n# First, declare SharePoint permissions you want to provide to your AAD Application\n$reqSPO = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.RequiredResourceAccess\"\n$reqSPO.ResourceAppId = \"00000003-0000-0ff1-ce00-000000000000\"\n\n# Here, we add Application permissions that will require admin consent\n$roleId = \"678536fe-1083-478a-9c59-b99265e6b0d3\"\n$reqSPO.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n$reqSPO.ResourceAccess.Add([Microsoft.Open.AzureAD.Model.ResourceAccess]::new($roleId,\"Role\")) # Sites.FullControl.All\n\n# But if you want to add Delegated permissions that will require admin consent\n$reqSPO.ResourceAccess.Add([Microsoft.Open.AzureAD.Model.ResourceAccess]::new(\"a468ea40-458c-4cc2-80c4-51781af71e41\",\"Scope\")) # TermStore.Read.All\n$reqSPO.ResourceAccess.Add([Microsoft.Open.AzureAD.Model.ResourceAccess]::new(\"0cea5a30-f6f8-42b5-87a0-84cc26822e02\",\"Scope\")) # User.Read.All\n\n# Register the AAD Application\n$aadApp = New-AzureADApplication -DisplayName \"MySharePointApp\" -AvailableToOtherTenants:$false -RequiredResourceAccess $reqSPO\n\n# Then, add you as an owner of the AAD Application\n# Get your ObjectId\n$yourself = Get-AzureADUser | ?{$_.UserPrincipalName -like \"*PART OF YOUR MAIL ADDRESS*\"} | select ObjectId\n\n# Add yourself as an owner\nAdd-AzureADApplicationOwner -ObjectId $aadApp.ObjectId -RefObjectId $yourself.ObjectId\n\n# Register the AAD Application as a service principal\n$aadspapp = New-AzureADServicePrincipal -AppId $aadApp.AppId\n\n# Add the App Role Assignment mentioned before\n# This will grant admin consent\n# Execute this cmdlet as much as you have Application permission roles that requires admin consent\nNew-AzureADServiceAppRoleAssignment -ObjectId $aadspapp.ObjectId -Id $roleId -PrincipalId $aadspapp.ObjectId -ResourceId $adspSPO.ObjectId\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-with-azure-cli","title":"Register AAD App with Azure CLI","text":"Azure CLI <pre><code># If you want to get all the available Application permissions for \"Office 365 SharePoint Online\"\naz ad sp list --filter \"appId eq '00000003-0000-0ff1-ce00-000000000000'\" --query '[].appRoles[].{Value:value, Id:id, DisplayName:displayName}' -o table\n\n# If you want to get all the available Delegated permissions for \"Office 365 SharePoint Online\"\naz ad sp list --filter \"appId eq '00000003-0000-0ff1-ce00-000000000000'\" --query '[].oauth2Permissions[].{Value:value, Id:id, UserConsentDisplayName:userConsentDisplayName}' -o table\n\n# Declare SharePoint Application permissions\n# Sites.FullControl.All\npermissions='[{\"resourceAppId\":\"00000003-0000-0ff1-ce00-000000000000\",\"resourceAccess\":[{\"id\":\"678536fe-1083-478a-9c59-b99265e6b0d3\",\"type\":\"Role\"}]}]'\n\n# Or declare SharePoint Delegated permissions (here permissions requested are TermStore.Read.All, User.Read.All)\n# permissions='[{\"resourceAppId\":\"00000003-0000-0ff1-ce00-000000000000\",\"resourceAccess\":[{\"id\":\"a468ea40-458c-4cc2-80c4-51781af71e41\",\"type\":\"Scope\"},{\"id\":\"0cea5a30-f6f8-42b5-87a0-84cc26822e02\",\"type\":\"Scope\"}]}]'\n\n# Register the SharePoint AAD Application with the required permissions\naz ad app create --display-name \"MySharePointApp\" --required-resource-accesses $permissions\n\n# Add yourself as an owner of the SharePoint AAD Application\n# You can get your info with \"az ad signed-in-user show --query objectId\"\naz ad app owner add --id \"AAD_APP_OBJECT_ID\" --owner-object-id \"YOUR_OBJECT_ID\"\n\n# Register the AAD Application as a service principal\naz ad sp create --id \"AAD_APP_OBJECT_ID\"\n\n# Grant admin consent\n# Execute this command if you have Application permission roles that requires admin consent\n# /!\\ You can face a 400 error when executing this command from Cloud Shell.\n# If so, run \"az login\" first. Known issue : https://github.com/Azure/azure-cli/issues/11749\naz ad app permission admin-consent --id \"AAD_APP_OBJECT_ID\"\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#optional-grant-admin-consent-on-delegated-permissions-with-powershell","title":"(optional) Grant Admin Consent on Delegated permissions with PowerShell","text":"<p>For now, if you want to work with delegated permissions on PowerShell, there's no cmdlet to grant admin consent (instead of Azure CLI, as you've see before).</p> <p>The only approach is to use Microsoft Graph, which provides methods to add / consent Delegated permissions. Full example here.</p> Az PowerShell <pre><code># Back in Az PowerShell\n# Assume that the Delegated permissions have been added before, through the New-AzureADApplication cmdlet\n\n# First, init Graph session token\n$context = Get-AzContext\n$ResourceGraphURI = \"https://graph.microsoft.com/\"\n$graphToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession]::Instance.AuthenticationFactory.Authenticate($context.Account, $context.Environment, $context.Tenant.Id.ToString(), $null, [Microsoft.Azure.Commands.Common.Authentication.ShowDialog]::Never, $null, $ResourceGraphURI).AccessToken\n\n# Declare the scopes you want to grant access (enter the same)\n$body = @{\n        clientId = $aadspapp.ObjectId\n        consentType = \"AllPrincipals\"\n        principalId = $null\n        resourceId = $adspSPO.ObjectId\n        scope = \"AllSites.FullControl\"\n}\n\n$apiUrl = \"https://graph.microsoft.com/v1.0/oauth2PermissionGrants\"\nInvoke-RestMethod -Uri $apiUrl -Headers @{Authorization = \"Bearer $($graphToken)\" }  -Method POST -Body $($body | ConvertTo-Json) -ContentType \"application/json\"\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-web-application-api-application","title":"Register Web Application / API Application","text":"<p>Now, we're going to create the resource that will query the SharePoint site. It can be a Web Application or an API.</p> <p>In this example, it will be a Web Application (but in the end, the code used for connecting to SharePoint will be the same).</p> <p>Once the Web Application created, you will have to enable Managed Identity, in order to allow the resource to access the Key Vault. This will lead in the creation of a service principal you'll be able to find in the AAD Enterprise Applications page.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-the-resource-through-interface","title":"Register the resource through interface","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#enable-managed-identity-through-interface","title":"Enable Managed Identity through interface","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-the-resource-with-code-and-enable-managed-identity","title":"Register the resource with code (and enable Managed Identity)","text":"Az PowerShellAzure CLI <pre><code># Create App Service Plan based on Windows\n$appSerPlan = New-AzAppServicePlan -ResourceGroupName \"rg-common\" -Name \"asp-we-rgcommon\" -Location \"westeurope\" -Tier \"Free\"\n\n# Create Web Application\n# /!\\ Actually, there's no possibility to specify the Stack / Runtime with this command\n# /!\\ But by default, it will create an ASP.NET 4.8 one (as the App Service Plan is hosted on Windows)\nNew-AzWebApp -ResourceGroupName \"rg-common\" -Name \"MyWebApplicationForSharePoint\" -Location \"westeurope\" -AppServicePlan $appSerPlan.Id\n\n# Enable Managed Identity (= creating a service principal)\nSet-AzWebApp -ResourceGroupName \"rg-common\" -Name \"MyWebApplicationForSharePoint\" -AssignIdentity $true\n</code></pre> <pre><code># Create App Service Plan (if does not exists)\naz appservice plan create --resource-group \"rg-common\" --name \"asp-we-rgcommon\" --location \"westeurope\" --sku F1\n\n# Create Web Application (and its service principal)\naz webapp create --resource-group \"rg-common\" --name \"MyWebApplicationForSharePoint\" --plan \"asp-we-rgcommon\" --runtime \"aspnet|V4.8\" --assign-identity\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#upload-key-vault-certificate-into-aad-application","title":"Upload Key Vault Certificate into AAD Application","text":"<p>By importing the certificate (created with the Key Vault) in the AAD Application, you allow an authentication to SharePoint when requesting access to the Tenant, with a Client ID / Certificate.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#upload-through-interface","title":"Upload through interface","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#upload-with-code","title":"Upload with code","text":"Az PowerShellAzure CLI <pre><code># Get previsouly created certificate\n$myCert = (Get-AzKeyVaultCertificate -VaultName \"kvwecommon\" -Name \"MyCert\").Certificate\n$certString = [Convert]::ToBase64String($myCert.GetRawCertData())\n\n# Upload the certificate to the SharePoint AAD Application\nNew-AzADAppCredential -ObjectId $aadApp.ObjectId -CertValue $certString -StartDate $myCert.NotBefore -EndDate $myCert.NotAfter\n</code></pre> <pre><code># Get previsouly created certificate\naz keyvault certificate download --vault-name \"kvwecommon\" --name \"MyCert\" -f MyCert.pem\n\n# Upload the certificate to the SharePoint AAD Application\naz ad sp credential reset --name \"AAD_APP_OBJECT_ID\" --cert \"@~/MyCert.pem\"\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#grant-web-application-to-get-key-vault-secret","title":"Grant Web Application to get Key Vault Secret","text":"<p>When using Microsoft.Azure.KeyVault library, we used to grant certificate (GET) access policy to certificate. But as this library is replaced by the Azure.Security .NET Libraries, we have to use the Keyvault.Secrets service because until now, there's no method provided to get a Key Vault Certificate with the certificate (GET) access policy. Furthermore, the Certificate in Key Vault is more a concept than just a type of Secret.</p> <p>That's why we're going to setup a secret (GET) access policy.</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#grant-access-through-interface","title":"Grant access through interface","text":""},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#grant-access-with-code","title":"Grant access with code","text":"Az PowerShellAzure CLI <pre><code># Retrieve Web Application service principal\n$webappsp = Get-AzADServicePrincipal -DisplayName \"MyWebApplicationForSharePoint\"\n\n# Assign the permission\nSet-AzKeyVaultAccessPolicy -VaultName \"kvwecommon\" -ObjectId $webappsp.Id -PermissionsToSecrets get -PassThru\n</code></pre> <pre><code># Retrieve Web Application service principal objectId\naz ad sp list --display-name \"MyWebApplicationForSharePoint\" --query [].objectId\n\n# Assign the permission\naz keyvault set-policy --name \"kvwecommon\" --object-id \"WEB_APPLICATION_SERVICE_PRINCIPAL_OBJECT_ID\" --secret-permissions get\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#init-aspnet-web-application-project","title":"Init ASP.NET Web Application Project","text":"<p>To init your project (.NET Framework 4.8 C#), you can follow this quickstart (and if you want to try with an API deployed in an Azure API, just select \"Web API\" instead of \"MVC\").</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#get-nuget-packages-azure-sharepoint","title":"Get Nuget Packages (Azure, SharePoint)","text":"<p>Below the Nuget packages required to test the architecture:</p> <ul> <li>Azure.Identy (for the authentication to the KeyVault)</li> <li>Azure.Security.KeyVault.Secrets (to get the certificate)</li> <li>Microsoft.SharePointOnline.CSOM (to work with SharePoint Site)</li> <li>SharePointPnPCoreOnline (to easily authenticate to SharePoint site)</li> </ul>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#setup-connection-to-azure","title":"Setup connection to Azure","text":"<p>To setup a connection to Azure through the Identity SDK, you can use the <code>DefaultAzureCredential()</code> class which will follow a specific mechanism based on the execution environment, which make this part easy to manage. To sum up, you'll be able to authenticate both in Visual Studio (as a user) and in Azure (as a managed identity / service principal) with the same method.</p> <p>More info here (this article also explains how to configure connection to Azure from Visual Studio).</p> <p>Below the snippet you can use to connect to the Key Vault, in order to get the certificate.</p> <pre><code>private X509Certificate2 GetCertificate()\n{\n    string secretName = \"MyCert\"; // Name of the certificate created before\n    string keyVaultName = \"kvwecommon\";\n    Uri keyVaultUri = new Uri($\"https://{keyVaultName}.vault.azure.net/\");\n\n    var client = new SecretClient(keyVaultUri, new DefaultAzureCredential());\n    KeyVaultSecret secret = client.GetSecret(secretName);\n\n    return new X509Certificate2(Convert.FromBase64String(secret.Value), string.Empty, X509KeyStorageFlags.MachineKeySet);\n}\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#setup-connection-to-sharepoint","title":"Setup connection to SharePoint","text":"<p>Once you got the certificate, you can authenticate to SharePoint site with it, in order to get a ClientContext object.</p> <pre><code>private ClientContext GetAADAppOnlyClientContext(X509Certificate2 certificate)\n{\n    string aadApplicationId = \"SHAREPOINT_AAD_APPLICATION_APP_ID\";\n    string tenantName = \"contoso\";\n    string sharePointUrl = $\"https://{tenantName}.sharepoint.com/\";\n    // If you want to query the User Profile, add \"-admin\" to the tenantName in the URL\n    // string sharePointUrl = $\"https://{tenantName}-admin.sharepoint.com/\";\n\n    string tenant = $\"{tenantName}.onmicrosoft.com\"; // This can also be the Tenant ID (GUID) instead of the Tenant Name (contoso.onmicrosoft.com)\n\n    return new OfficeDevPnP.Core.AuthenticationManager().GetAzureADAppOnlyAuthenticatedContext(sharePointUrl, aadApplicationId, tenant, certificate);\n}\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#get-web-info","title":"Get Web Info","text":"<p>With the <code>ClientContext</code> object instantiated before, you can get for example info about your site.</p> HomeController.csIndex.cshtml <pre><code>// ...\n\n// Example in the \"HomeController\" class, adding a property to the ViewBag\npublic ActionResult Index()\n{\n    X509Certificate2 certificate = GetCertificate();\n\n    ClientContext ctx = GetAADAppOnlyClientContext(certificate);\n\n    Web currentWeb = ctx.Web;\n    ctx.Load(currentWeb);\n    ctx.ExecuteQuery();\n\n    ViewBag.WebTitle = currentWeb.Title;\n\n    return View();\n}\n\n// ...\n</code></pre> <pre><code>@{\n    ViewBag.Title = \"Home Page\";\n}\n\n&lt;div&gt;\n    Title of the SP Web : @ViewBag.WebTitle\n&lt;/div&gt;\n\n&lt;!--...--&gt;\n</code></pre>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#deploy-the-solution","title":"Deploy the solution","text":"<p>Once you got everything, you can test your Web Application locally then by publishing it (right-click on the project and select Publish).</p> <p>Then select Azure as target, Azure App Service (Windows) and select the correct Azure account, the subscription used until now, the resource group and the Web Application we created together (here rg-common and MyWebApplicationForSharePoint).</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#thats-it","title":"That's it","text":"<p>You should see something like this :</p> <p></p> <p>If you have any question or if you encounter any problem during the execution of the commands, feel free to send a Tweet or a DM \ud83d\ude09</p>"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#useful-links","title":"Useful Links","text":"<ul> <li>Create Azure AD App Registration with PowerShell-Part 1</li> <li>Create Azure AD App Registration with PowerShell-Part 2</li> <li>Demystifying Azure AD Service Principals</li> <li>Relationship between application objects and service principals</li> </ul>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/","title":"Authenticate to SharePoint Online through an Azure Function using PnP Framework","text":"<p>As you know (or maybe not?), the PnP Framework (v1.0.0) is now GA! \ud83c\udf89</p> <p>For those who are new here, it's a framework developed by the community (Microsoft employees, MVPs and other passionate developers), successor of the PnP Sites Core library and .NET Standard 2.0 compatible (.NET Framework 5 and .NET Core).</p> <p>As the PnP Sites Core is no longer maintained, the PnP Framework is the new library to use for your Microsoft 365 Developments! This library will extend the SharePoint CSOM library by adding useful features such as simplified authentication flows (including token management), extensions methods to objects, utilities and more!</p> <p>One important thing to know is that this framework is a transitional one, while the real successor will be the PnP Core SDK (on which PnP Framework and the new PnP PowerShell depends) but is still in beta.</p> <p>More info here and here.</p> <p>Among the major features of the PnP Framework, one is the authentication workflow used inside, which is now based on MSAL SDK for .NET! This is a great improvment, which involves some small changes regarding the code that will manage the authentication. Let's see with a short example!</p>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#prerequisites","title":"Prerequisites","text":"<ol> <li>An Office 365 (Dev) Tenant or a Partner Demo Tenant</li> <li>Visual Studio (2017 or later) including the Azure Development workload (Azure Function Core (CLI) Tools)</li> <li>(optional) An Azure subscription and the following Azure AD role at least<ul> <li>Application Administrator</li> </ul> </li> </ol>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#about-azure-functions-v1","title":"About Azure Functions v1","text":"<p>For those who are familiar with Azure Functions v1 and SharePoint CSOM with latest version of PnP Sites Core library, you're probably aware of a compatibility issue regarding the Newtonsoft.Json library, which uses the 9.0.1 version in the Microsoft.NET.Sdk.Functions (v1.0.38) library, and a newer version in the PnP Sites Core library (issue referenced here).</p> <p>Great news: the PnP Framework works perfectly with Azure Functions v3 (using Microsoft.NET.Sdk.Functions v3.0.11), let's check it out!</p>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#init-azure-function-v3","title":"Init Azure Function v3","text":"<p>You can follow this quick start to init a project.</p> <p>(Follow the steps until the Testing functions part, the Azure part will follow later as an option)</p>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#get-nuget-packages","title":"Get Nuget Packages","text":"<p>Below the Nuget packages required to test the architecture:</p> <ul> <li>Microsoft.SharePointOnline.CSOM (to work with SharePoint Site)</li> <li>PnP.Framework (to easily authenticate to SharePoint site)</li> <li>(optional) Azure.Identy (for the authentication to the KeyVault)</li> <li>(optional) Azure.Security.KeyVault.Secrets (to get the certificate)</li> </ul>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#setup-connection-to-sharepoint","title":"Setup connection to SharePoint","text":"<p>Below the code sample to setup a connection to SharePoint using Client Credential Flow</p> HttpExample.cs <pre><code>[FunctionName(\"HttpExample\")]\npublic static async Task&lt;IActionResult&gt; Run(\n    [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route = null)] HttpRequest req,\n    ILogger log)\n{\n    Web currentWeb;\n    string userLogin = \"AdeleV@contoso.onmicrosoft.com\";\n    string userPassword = \"Pass@w0rd!\";\n    string sharePointUrl = \"https://contoso.sharepoint.com\";\n\n    var securePassword = new SecureString();\n    foreach (char c in userPassword)\n    {\n            securePassword.AppendChar(c);\n    }\n\n    AuthenticationManager auth = new AuthenticationManager(userLogin, securePassword);\n\n    using (ClientContext ctx = await auth.GetContextAsync(sharePointUrl))\n    {\n            currentWeb = ctx.Web;\n            ctx.Load(currentWeb);\n            await ctx.ExecuteQueryRetryAsync();\n    }\n\n    log.LogInformation($\"Web's title : {currentWeb.Title}\");\n\n    return new OkObjectResult($\"Web's title : {currentWeb.Title}\");\n}\n</code></pre> <p>Warning</p> <p>This authentication method is available through the PnP Framework, but not by design with CSOM for .NET Standard. More info here</p>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#try-it-locally","title":"Try it locally","text":"<p>Once you've got everything ready, run your function locally! Go to your browser and type http://localhost:5800/api/HttpExample</p> <p>You should see something like this:</p> <p>From the Azure Functions Core Tools</p> <p></p> <p>From the browser</p> <p></p>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#setup-connection-with-a-certificate-optional","title":"Setup connection with a certificate (optional)","text":"<p>Now let's say you want to execute your Function App in an Azure AD (AAD) Application context. The idea is to use a certificate stored in an Azure Key Vault.</p> <p>For the AAD Application registration, the creation of the Key Vault, the setup of managed identity and the configuration of SharePoint API Permissions, I'll redirect you to my previous article here.</p> <p>Below the complete script to authenticate through AAD</p> <pre><code>[FunctionName(\"HttpExample\")]\npublic static async Task&lt;IActionResult&gt; Run(\n    [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route = null)] HttpRequest req,\n    ILogger log)\n{\n    Web currentWeb;\n    string aadApplicationId = \"SHAREPOINT_AAD_APPLICATION_APP_ID\";\n    string tenantName = \"contoso\";\n    string sharePointUrl = $\"https://{tenantName}.sharepoint.com/\";\n\n    AuthenticationManager auth = new AuthenticationManager(aadApplicationId, GetCertificate(), $\"{tenantName}.onmicrosoft.com\");\n\n    using (ClientContext ctx = await auth.GetContextAsync(sharePointUrl))\n    {\n            currentWeb = ctx.Web;\n            ctx.Load(currentWeb);\n            await ctx.ExecuteQueryRetryAsync();\n    }\n\n    log.LogInformation($\"Web's title : {currentWeb.Title}\");\n\n    return new OkObjectResult($\"Web's title : {currentWeb.Title}\");\n}\n\nprivate X509Certificate2 GetCertificate()\n{\n    string secretName = \"MyCert\"; // Name of the certificate\n    Uri keyVaultUri = new Uri($\"https://kvwecommon.vault.azure.net/\");\n\n    var client = new SecretClient(keyVaultUri, new DefaultAzureCredential());\n    KeyVaultSecret secret = client.GetSecret(secretName);\n\n    return new X509Certificate2(Convert.FromBase64String(secret.Value), string.Empty, X509KeyStorageFlags.MachineKeySet);\n}\n</code></pre>"},{"location":"articles/20210125-azure-function-authentication-with-pnpframework/#thats-it","title":"That's it","text":"<p>As you can see, the main object to work with during authentication is the <code>AutenticationManager</code> object, which will lead you to manage authentication flows, such as client credential, device code or certificate. It's this object that will now handle login info (except for legacy SharePoint AppOnly authentication which uses Azure ACS).</p> <p>Happy coding!</p>"},{"location":"articles/20220104-apply-devops-spfx-part1/","title":"Apply a DevOps process to your SPFx project (Part 1)","text":""},{"location":"articles/20220104-apply-devops-spfx-part1/#use-case","title":"Use Case","text":"<p>You're working on a daily basis with SharePoint Framework solutions in a business context. You want to make improvments on existing components and testing them without impacting users in production environment.</p>"},{"location":"articles/20220104-apply-devops-spfx-part1/#goal-of-this-article","title":"Goal of this article","text":"<p>This article series will show how to apply a DevOps process by using tools like Azure DevOps or GitHub Actions, using multi-stage / environment pipelines to deploy on environments such as UAT, in order to validate an improvment or a hotfix before going to production.</p> <p>The first part will describe the DevOps philosophy, how can it fit in SharePoint Online context and which project does it work with.</p>"},{"location":"articles/20220104-apply-devops-spfx-part1/#the-devops-movment","title":"The DevOps movment","text":"<p>Back in 2009, it was first described by Patrick Debois as a way of teaming up the developers (build) and the system administrators / operators (run), to unify their work and put some trust on each other.</p> <p>One of the bests depictions of the movment is this world famous schema:</p> <p></p> <p>According to Microsoft:</p> <p>DevOps is the union of people, process, and technology to continually provide value to customers.</p> <p>As SharePoint Online developers, we know how confortable it is to have all the power permissions when working on SPFx solutions. But we also know that in a business context, this could not be tolerated by the IT department, as they're the \"gatekeepers\" of the production environment.</p>"},{"location":"articles/20220104-apply-devops-spfx-part1/#sharepoint-online-alm","title":"SharePoint Online ALM","text":"<p>When working on SharePoint Framework solutions, you're crossing through several steps which describe the application lifecycle:</p> <ol> <li>Testing \"locally\" (as the code is on your machine even if you're testing on a remote workbench / page)</li> <li>Build / shipping the solution as a package</li> <li>Adding the solution to an app catalog</li> <li>Deploying it</li> <li>Installing it on a tenant or a site</li> <li>(optional) Upgrading it</li> <li>Retracting it</li> <li>Uninstalling it</li> </ol> <p></p> <p>When your package is shipped for deployment, SharePoint Online has two ways of storing your apps:</p> <ol> <li>Tenant app catalog</li> <li>Site collection app catalog</li> </ol>"},{"location":"articles/20220104-apply-devops-spfx-part1/#tenant-app-catalog","title":"Tenant App Catalog","text":"<p>The first one has to be added if it doesn't exist, because it's not created by default on your tenant. With SharePoint Administrator permissions:</p> <ol> <li>Open the tenant admin apps page: https://contoso-admin.sharepoint.com/_layouts/15/online/TenantAdminApps.aspx (replace <code>contoso</code> by your tenant name)</li> <li>Click on \"App Catalog\", then setup the URL and validate the app catalog creation</li> </ol> <p>Once the tenant app catalog is created, you have to be site collection administrator to add and deploy packages.</p> <p>From there, you can deploy following components, that can be automatically deployed on all the tenant:</p> <ul> <li>SharePoint Online WebPart</li> <li>SharePoint Online Extensions</li> <li>SharePoint Online Library Components</li> <li>SharePoint Online Adaptive Card Extensions (ACEs)</li> <li>Microsoft Teams WebPart</li> </ul>"},{"location":"articles/20220104-apply-devops-spfx-part1/#site-collection-app-catalog","title":"Site Collection App Catalog","text":"<p>The second one will really be useful for the next part of the article series, because it can be enabled optionally for each existing site collection.</p> <p>Unlike the tenant app catalog, the site collection app catalog can only be created through Microsoft or PnP tools such as SharePoint Online Management Shell, PnP PowerShell or CLI for Microsoft 365:</p> SPO Management ShellPnP PowerShellCLI for Microsoft 365 <pre><code># Login to the site collection where the app catalog will be added\nConnect-SPOService -Url https://contoso.sharepoint.com/sites/HR -Credential mbowen@contoso.com\n\n# Enable the site collection app catalog\nAdd-SPOSiteCollectionAppCtalog -Site https://contoso.sharepoint.com/sites/HR -Confirm\n</code></pre> <pre><code># Login to the site collection where the app catalog will be added\n# If you are familiar with the Get-PnPStoredCredential cmdlet,\n# you can use it here with the \"-Credential\" Argument\nConnect-PnPOnline -Url https://contoso.sharepoint.com/sites/HR -Credentials mbowen@contoso.com\n\n# Enable the site collection app catalog\nAdd-PnPSiteCollectionAppCatalog\n</code></pre> <pre><code># Login using device code\nm365 login\n\n# Enable the site collection app catalog\nm365 spo site appcatalog add --url https://contoso.sharepoint.com/sites/HR\n</code></pre> <p>Important</p> <p>To enable the site collection app catalog, you must be at least SharePoint Administrator, be tenant app catalog site collection administrator and be the targeted site collection administrator</p> <p>Once enabled, like the tenant app catalog you have to be site collection administrator to add and deploy packages.</p> <p>As the tenant app catalog, you can deploy components on the site collection tenant but not all of them:</p> <ul> <li>SharePoint Online WebPart</li> <li>SharePoint Online Extensions</li> <li>SharePoint Online Library Components</li> <li>SharePoint Online ACEs<ul> <li>Beware that for this component, you'll only be able to test it on the hosted workbench, not a \"Dashboard\" page, as this one is only available on the \"home site\"</li> </ul> </li> </ul> <p>You can't deploy Microsoft Teams WebParts, as you have to deploy them at the tenant level in order to synchronize the solution package with Teams.</p>"},{"location":"articles/20220104-apply-devops-spfx-part1/#priority-order","title":"Priority order","text":"<p>The most interesting part when deploying SPFx solutions is the priority order.</p> <p>Let's take a simple example. You're developing a WebPart and ship it as a solution package. You can deploy it on both tenant app catalog and site collection app catalog.</p> <p>When a same component is deployed on both catalogs, it's the site collection one which prevails.</p> <p></p> <p>Keep that is mind because it will be very useful for the second part \ud83d\ude09</p>"},{"location":"articles/20220104-apply-devops-spfx-part1/#useful-links","title":"Useful Links","text":"<ul> <li>Application Lifecycle Management (ALM) APIs</li> </ul>"},{"location":"articles/20220104-apply-devops-spfx-part1/#navigation","title":"Navigation","text":"<p>Apply a DevOps process to your SPFx project (Part 1)</p> <p>Apply a DevOps process to your SPFx project (Part 2)</p> <p>Apply a DevOps process to your SPFx project (Part 3)</p>"},{"location":"articles/20220104-apply-devops-spfx-part1/#credits","title":"Credits","text":"<p>(Thanks to Philippe M for providing his DevOps schema template)</p>"},{"location":"articles/20220221-apply-devops-spfx-part2/","title":"Apply a DevOps process to your SPFx project (Part 2)","text":""},{"location":"articles/20220221-apply-devops-spfx-part2/#goal-of-this-article-reminder","title":"Goal of this article (reminder)","text":"<p>This article series will show how to apply a DevOps process by using tools like Azure DevOps or GitHub Actions, using multi-stage / environment pipelines to deploy on environments such as UAT, in order to validate an improvment or a hotfix before going to production.</p> <p>The second part will focus on SharePoint Online scenarios where you can start from, when applying CI / CD pipeline.</p>"},{"location":"articles/20220221-apply-devops-spfx-part2/#scenarios-context","title":"Scenarios context","text":"<p>When working on enterprise solutions, we are always facing the question of \"testing\" before pushing on production environment, to ensure that new features or fixes are working as expected.</p> <p>Thanks to the site collection app catalog, we have this opportunity (for the use cases exposed in the previous part)!</p> <p>Whether the production environment app catalog is a site collection or a tenant one, the test site (which we'll call \"UAT\") will target a site collection app catalog to isolate the tests and approve the solution's new version before deploying on production</p> <p>Remember when I've previously talked about the presence of a same solution package in both tenant and site collection app catalog? Well for the below scenarios, the priority order will matter, because you will have the opportunity test out new features or bug fixes in an isolated environment, using the same solution package name and SharePoint component added to the site, without having to rename it!</p> <p></p> <p>You'll find below two approaches I propose which you can start from, based on your business needs.</p>"},{"location":"articles/20220221-apply-devops-spfx-part2/#existing-testing-site","title":"Existing testing site","text":"<p>The first case states that there's already an existing UAT site with site collection app catalog enabled.</p> <p>The pipeline will build the solution and deploy it on the test site, with approval as a prerequisite.</p> <p>Then, once the tests successfully validated, a new approval will be required in order to deploy on the production environment.</p> <p></p>"},{"location":"articles/20220221-apply-devops-spfx-part2/#ephemeral-testing-site","title":"Ephemeral testing site","text":"<p>The second case states that there will be an ephemeral testing site, created only to test the solution and after approval and deployment on the production site, will be removed.</p> <p>The pipeline will :</p> <ul> <li>build the solution</li> <li>connect to the production site to gets its template (with the PnP Povisioning Engine)</li> <li>create a site with the same template as the production one (called UAT)</li> <li>add a list structure &amp; content to this template</li> <li>apply the production site template on the UAT site and enable the site collection app catalog</li> <li>deploy the solution on the UAT site (with approval)</li> <li>(optionally) add a test page which includes the WebPart to be tested</li> </ul> <p>Again, once the tests successfully validated, a new approval will be required in order to deploy on the production environment.</p> <p></p> <p>The next part will focus on technical solutions that will cover those scenarios, stay tuned \ud83d\ude09</p>"},{"location":"articles/20220221-apply-devops-spfx-part2/#navigation","title":"Navigation","text":"<p>Apply a DevOps process to your SPFx project (Part 1)</p> <p>Apply a DevOps process to your SPFx project (Part 2)</p> <p>Apply a DevOps process to your SPFx project (Part 3)</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/","title":"Apply a DevOps process to your SPFx project (Part 3)","text":""},{"location":"articles/20220420-apply-devops-spfx-part3/#goal-of-this-article-reminder","title":"Goal of this article (reminder)","text":"<p>This article series will show how to apply a DevOps process by using tools like Azure DevOps or GitHub Actions, using multi-stage / environment pipelines to deploy on environments such as UAT, in order to validate an improvment or a hotfix before going to production.</p> <p>The third part will show how to implement technical solutions by using CI / CD pipeline templates.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#scenarios-context","title":"Scenarios context","text":"<p>When working on enterprise solutions, we are always facing the question of \"testing\" before pushing on production environment, to ensure that new features or fixes are working as expected.</p> <p>Thanks to the site collection app catalog, we have this opportunity (for the use cases exposed in the first part)!</p> <p>We saw previously two major scenarios that can be applied in a company as a DevOps process. This part will talk about applying those scenarios with two well-known CI / CD solutions: GitHub Actions &amp; Azure DevOps (AzDO).</p> <p>In this article, we'll focus on the scenario where a testing site already exists.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#ci-cd-pipelines-digging","title":"CI / CD pipelines digging","text":"<p>For both solutions, we will use \"pipeline\" (Azure DevOps) / \"workflow\" (GitHub Actions) templates. This will provide us guidance on how to reuse and adapt them to our business context.</p> <p>Also, we have to \"setup\" (that's a quick word) the host that will run our pipeline. Think of this host as a \"disposable\" / ephemeral machine that is configured only to run specific tasks, then disapear. A host is required for a pipeline / workflow, so we will have at least two hosts needed: one for the CI, one for the CD and each of them will be independant.</p> <p>It's important to keep that in mind for the rest of this article \ud83d\ude09.</p> <p>Our SPFx solution will have a \"main\" pipeline, which will call our templates.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#templates-structure","title":"Templates structure","text":"<p>Below we'll find a schema for each platform, to understand how the templates are organized.</p> AzDOAction <p></p> <ol> <li>A generic pipeline (<code>azure-pipelines.yml</code>) will be triggered as the initiator</li> <li> <p>It will call a global CI / CD template (<code>build-deploy-spfx-cli-m365.yml</code>), that will call subsequently</p> <ul> <li>CI pipeline (<code>build-spfx.yml</code>)</li> <li>CD pipeline, using CLI for Microsoft 365 (<code>deploy-spfx-cli-m365.yml</code>) (or PnP PowerShell)</li> </ul> </li> </ol> <p></p> <ol> <li> <p>A generic pipeline (<code>main.yml</code>) will be trigger as the initiator that will call subsequently</p> <ul> <li>CI pipeline (<code>build-spfx.yml</code>)</li> <li>CD pipeline, using CLI for Microsoft 365 (<code>deploy-spfx-cli-m365.yml</code>) (or PnP PowerShell)</li> </ul> </li> </ol>"},{"location":"articles/20220420-apply-devops-spfx-part3/#security","title":"Security","text":"<p>If order to deploy securely our SPFx solution, we have to register credentials (certificate authentication) per environment (remember that we want to deploy first on UAT, then on PRD). Here are the main approaches for the two platforms.</p> AzDOAction <p></p> <ol> <li>Using secret variables, linked to environments through pipeline template (with permissions), to keep sensitive information safe</li> <li>Using secure file storage to hold certificate file, linked to environments through pipeline template (with permissions), used for authentication</li> </ol> <p></p> <ol> <li>Using secret variables, linked to environments, to keep sensitive information</li> </ol> <p>As we can see, there's no secure file storage available in GitHub Actions, but we'll see a little bit later that we can afford that \ud83d\ude01</p> <p>(in the next part and for the AzDO only, we will skip the in-between template <code>build-deploy-spfx-cli-m365.yml</code>, in order to focus on the CI / CD)</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#authentication-with-azure-ad","title":"Authentication with Azure AD","text":"<p>Whether we choose to use GitHub Actions, AzDO as the CI / CD platform, and PnP PowerShell or CLI for Microsoft 365 as the ALM tool, we'll have to authenticate to SharePolint Online to deploy our solution. As this can't be done with our own account in a DevOps philosophy, it's better to do so with a dedicated authentication, meaning application context, which is provided by Azure AD Applications.</p> <p>So to be sure to authenticate correctly and to give the rights keys (as an Ops remember \ud83d\udc40), the AAD application will have to be configured with the following info:</p> <ul> <li>Certificates &amp; secrets</li> <li>Add a certificate file (.pem, crt or .cer), for which we'll have the thumbprint info and encoded file or .pfx file (depending on the CI / CD platform)</li> <li>API permission</li> <li>Add SharePoint application permission \"Sites.FullControl.All\"</li> </ul>"},{"location":"articles/20220420-apply-devops-spfx-part3/#continuous-integration","title":"Continuous Integration","text":"<p>In this section, we will cover following steps:</p> <ul> <li>Configuring the trigger (what will be done to run the pipeline)</li> <li>Specifying input parameters</li> <li>Determine the host OS</li> <li>Checking out our last repo sources</li> <li>Setting NodeJS version (as a prerequisite to build our SPFx package)</li> <li>Installing required NPM packages (as mentioned in the <code>package.json</code> file)</li> <li>Bundling the solution</li> <li>(optionally) testing the solution</li> <li>Packaging the solution</li> <li>Uploading it as an artefact, to make it available for the CD part</li> </ul>"},{"location":"articles/20220420-apply-devops-spfx-part3/#ci-triggers-inputs","title":"CI Triggers &amp; Inputs","text":"<p>First thing is to specify what will make the pipeline run.</p> AzDOAction <pre><code># No triggers here, which makes the pipeline not callable except from another pipeline\nparameters:\n  - name: include_tests\n    type: boolean\n    default: false\n</code></pre> <pre><code>name: build\n\non:\n  workflow_call: # only callable from another workflow\n    inputs:\n      include_tests:\n        description: 'Indicates whether build job has to run tests or not'\n        default: false\n        required: false\n        type: string\n</code></pre>"},{"location":"articles/20220420-apply-devops-spfx-part3/#ci-jobs","title":"CI Jobs","text":"<p>Then specify the job details, the core of the pipeline which has an ephemeral state. First, the host OS:</p> AzDOAction <pre><code># ...\njobs:\n  - job: build\n    pool:\n      vmImage: 'ubuntu-latest'\n      demands:\n      - npm\n      - node.js\n      variables:\n        npm_config_cache: $(Pipeline.Workspace)/.npm\n</code></pre> <pre><code># ...\njobs:\n  build: # job name here, can be anything else\n    runs-on: ubuntu-latest\n</code></pre>"},{"location":"articles/20220420-apply-devops-spfx-part3/#ci-steps","title":"CI Steps","text":"<p>Now the details steps that will call all the tasks to complete the CI part.</p> <p>Starting with the repo checkout, the node configuration and npm packages installation.</p> AzDOAction <pre><code># ...\njobs:\n  - job: build\n      # ...\n      steps:\n        - checkout: self\n\n        - task: NodeTool@0\n          displayName: 'Use Node 14.x'\n          inputs:\n          versionSpec: 14.x\n          checkLatest: true\n\n        - script: npm ci\n          displayName: 'npm ci'\n</code></pre> <pre><code># ...\njobs:\n  build:\n    # ...\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n\n      - name: Use Node 14.x\n        uses: actions/setup-node@v2\n        with:\n        node-version: '14'\n        cache: 'npm'\n\n      - name: npm ci\n        run: npm ci\n</code></pre> <p>Then bundling the sources and testing it when input <code>include_tests</code> is set to true.</p> AzDOAction <pre><code># ...\njobs:\n  - job: build\n    # ...\n    steps:\n      # ...\n      - task: Gulp@0\n        displayName: 'Bundle project'\n        inputs:\n        targets: bundle\n        arguments: '--ship'\n\n      - ${{ if eq(parameters.include_tests, true) }}:\n        - script: npm test\n          displayName: 'npm test'\n</code></pre> <pre><code># ...\njobs:\n  build:\n    # ...\n    steps:\n      # ...\n      - name: Bundle project\n        run: gulp bundle --ship\n\n      - name: npm test\n        if: ${{ inputs.include_tests == true }}\n        run: npm test\n</code></pre> <p>Last part is to package the solution, then make it available for the CD part.</p> AzDOAction <pre><code># ...\njobs:\n  - job: build\n    # ...\n    steps:\n      # ...\n      - task: Gulp@0\n        displayName: 'Package Solution'\n        inputs:\n          targets: 'package-solution'\n          arguments: '--ship'\n\n      - task: CopyFiles@2\n        displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'\n        inputs:\n          Contents: |\n            sharepoint/**/*.sppkg\n        TargetFolder: '$(Build.ArtifactStagingDirectory)'\n\n      - task: PublishBuildArtifacts@1\n        displayName: 'Publish Artifact: drop'\n</code></pre> <pre><code># ...\njobs:\n  build:\n    # ...\n    steps:\n    # ...\n    - name: Package solution\n      run: gulp package-solution --ship\n\n    - name: Upload artifact for deployment job\n      uses: actions/upload-artifact@v2\n      with:\n        path: sharepoint/solution/*.sppkg\n</code></pre>"},{"location":"articles/20220420-apply-devops-spfx-part3/#continuous-delivery","title":"Continuous Delivery","text":"<p>Now that we've completed ou CI / build pipeline, let's rollout the deployment process!</p> <p>To make things \"readable\" in this post, we'll take the existing testing site scenario as an example.</p> <p>Below the steps of the CD part:</p> <ul> <li>Configuring the trigger (what will be done to run the pipeline)</li> <li>Specifying input parameters</li> <li>Determine the host OS</li> <li>Getting the SPFx package uploaded in the CI pipeline as an artefact</li> <li>Setting NodeJS version (as a prerequisite to build our SPFx package)</li> <li>Installing the CLI for Microsoft 365</li> <li>Authenticating to SharePoint Online using the CLI for Microsoft 365</li> <li>For the UAT environment<ul> <li>Deploying the SPFx solution to the site dedicated to tests</li> </ul> </li> <li>For the PRD environment<ul> <li>Deploying the SPFx solution to the targeted and specified app catalog</li> </ul> </li> </ul> <p>Keep in mind that this pipeline will be used twice: UAT &amp; PRD environments.</p> <p>Warning</p> <p>This use case states that the SPFx app is already installed on both testing and production environments</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#cd-triggers-inputs","title":"CD Triggers &amp; Inputs","text":"<p>First thing is to specify what will make the pipeline run.</p> AzDOAction <pre><code># No triggers here, which makes the pipeline not callable except from another pipeline\nparameters:\n  - name: target_environment\n    type: string\n  - name: variable_group_name\n    type: string\n</code></pre> <pre><code>name: deploy with cli m365\n\non:\nworkflow_call:\n  inputs:\n    environment_name:\n      description: 'Target environment to deploy to'\n      required: true\n      type: string\n    site_url_prd:\n      description: 'SharePoint PRD site URL'\n      required: false\n      type: string\n    site_url_uat:\n      description: 'SharePoint UAT site URL'\n      required: false\n      type: string\n    app_catalog_site_url:\n      description: 'SharePoint app catalog site URL (tenant or site collection)'\n      default: \"\"\n      required: false\n      type: string\n    app_catalog_scope:\n      description: 'Indicates the PRD app catalog scope (tenant or site collection)'\n      default: \"\"\n      required: false\n      type: string\n  secrets:\n    AAD_APP_ID:\n      required: true\n    AAD_APP_PASSWORD:\n      required: true\n    AAD_APP_ENCODED_CERTIFICATE:\n      required: true\n    AAD_APP_THUMBPRINT:\n      required: true\n    AAD_TENANT_ID:\n      required: true\n    # Like this, we are getting environment secrets as inputs\n    # Otherwise we'll get the repository secrets\n</code></pre>"},{"location":"articles/20220420-apply-devops-spfx-part3/#cd-jobs","title":"CD Jobs","text":"<p>Then specify the job details, the core of the pipeline which has an ephemeral state. First, the host OS:</p> AzDOAction <pre><code># ...\njobs:\n  - deployment: deploy\n    displayName: 'Upload &amp; deploy *.sppkg to SharePoint app catalog'\n    pool:\n      vmImage: 'ubuntu-latest'\n    environment: ${{ parameters.target_environment }}\n    variables:\n      - group: ${{ parameters.variable_group_name }}\n      # This is specific to AzDO: it allows to use variables / secrets stored in a \"library\"\n      # It's very useful with multi-stage pipelines\n</code></pre> <pre><code># ...\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    environment: ${{ inputs.environment_name }}\n</code></pre>"},{"location":"articles/20220420-apply-devops-spfx-part3/#cd-steps","title":"CD Steps","text":"<p>Now the details steps that will call all the tasks to complete the CD part.</p> <p>Starting with getting the SPFx package, configuring node and installing the deployment tool (CLI for Microsoft 365 or PnP PowerShell).</p> AzDOAction <pre><code># ...\njobs:\n  deployment:\n    # ...\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            - download: current\n              artifact: drop\n              patterns: '**/*.sppkg'\n            - pwsh: sudo npm install -g @pnp/cli-microsoft365\n              displayName: Install CLI for Microsoft365\n</code></pre> <pre><code># ...\njobs:\n  deploy:\n    # ...\n    steps:\n    - name: Download artifact from build job\n      uses: actions/download-artifact@v2\n\n    - name: Use Node 16.x\n      uses: actions/setup-node@v3\n      with:\n        node-version: '16'\n\n    - name: Install CLI for Microsoft 365\n      run: npm install -g @pnp/cli-microsoft365\n</code></pre> <p>Then authenticating to SharePoint Online, configure error handling and download the built SPFx package</p> AzDOAction <pre><code># ...\njobs:\n  deployment:\n    # ...\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n            # ...\n            - task: DownloadSecureFile@1\n              inputs:\n                secureFile: PnP.SharePoint.AppOnly.pfx\n              displayName: 'Download authentication certificate'\n              name: AppCertificate\n              # Thanks to the AzDO pipeline files management, we can store secure files\n              # Such as a certificate file\n            - pwsh: |\n                m365 login --authType certificate --certificateFile $(AppCertificate.secureFilePath) -p \"$(aad_app_password)\" --appId $(aad_app_id) --tenant $(aad_tenant_id)\n              displayName: Login to Microsoft 365\n            - pwsh: |\n                m365 cli config set --key output --value json\n                m365 cli config set --key errorOutput --value stdout\n              displayName: Configuring CLI for Microsoft 365 output error handling\n            - pwsh: |\n                $package = Get-ChildItem -Path $(Pipeline.Workspace)/drop -Recurse -Filter '*.sppkg' | Select Name | Select-Object -First 1\n                Write-Host \"##vso[task.setvariable variable=SpPkgFileName;isOutput=true]$($package.Name)\"\n              name: GetSharePointPackage\n              displayName: Get generated *.sppkg filename\n</code></pre> <pre><code># ...\njobs:\n  deploy:\n    # ...\n    steps:\n    # ...\n    - name: Login to Microsoft 365\n      shell: pwsh\n      run: |\n        m365 login --authType certificate --certificateBase64Encoded ${{ secrets.AAD_APP_ENCODED_CERTIFICATE }} --thumbprint ${{ secrets.AAD_APP_THUMBPRINT }} -p ${{ secrets.AAD_APP_PASSWORD }} --appId ${{ secrets.AAD_APP_ID }} --tenant ${{ secrets.AAD_TENANT_ID }}\n      # Through GitHub environment secrets, we can store many info\n      # Including a Base64 encoded certificate, useful for authentication  \n\n    - name: Configuring CLI for Microsoft 365 output error handling\n      shell: pwsh\n      run: |\n        m365 cli config set --key output --value json\n        m365 cli config set --key errorOutput --value stdout\n\n    - name: Get generated *.sppkg filename\n      id: package\n      shell: pwsh\n      run: |\n          $package = Get-ChildItem -Path artifact -Recurse -Filter '*.sppkg' | Select Name | Select-Object -First 1\n          echo \"::set-output name=name::$($package.Name)\"\n</code></pre> <p>Next step is to add &amp; deploy the SPFx package to the testing site, then in Production</p> AzDOAction <pre><code># ...\njobs:\n  deployment:\n    # ...\n    strategy:\n      runOnce:\n        deploy:\n          # ...\n          steps:\n            # ...\n            - ${{ if ne(parameters.target_environment, 'PRD') }}:\n              - pwsh: |\n                  $uri = [System.Uri]\"$(site_url_uat)\"\n                  m365 spo set --url $($uri.Scheme + \"://\" + $uri.Authority)\n                displayName: Set site collection context (${{ parameters.target_environment }})\n              - pwsh: |\n                  m365 spo app add --filePath \"$(Pipeline.Workspace)/drop/sharepoint/solution/$(GetSharePointPackage.SpPkgFileName)\" --appCatalogUrl $(site_url_uat) --scope sitecollection --overwrite\n                name: SPOPackage\n                displayName: Upload SharePoint package\n              - pwsh: |\n                  m365 spo app deploy --name $(GetSharePointPackage.SpPkgFileName) --appCatalogUrl $(site_url_uat) --scope sitecollection\n                displayName: Deploy SharePoint package\n\n            - ${{ if eq(parameters.target_environment, 'PRD') }}:\n              - pwsh: |\n                  $uri = [System.Uri]\"$(site_url_prd)\"\n                  m365 spo set --url $($uri.Scheme + \"://\" + $uri.Authority)\n                displayName: Set site collection context (${{ parameters.target_environment }})\n              - pwsh: m365 spo app add --filePath \"$(Pipeline.Workspace)/drop/sharepoint/solution/$(GetSharePointPackage.SpPkgFileName)\" --appCatalogUrl $(app_catalog_site_url) --scope $(app_catalog_scope) --overwrite\n                displayName: Upload SharePoint package to $(app_catalog_scope) App Catalog\n              - pwsh: m365 spo app deploy --name $(GetSharePointPackage.SpPkgFileName) --appCatalogUrl $(app_catalog_site_url) --scope $(app_catalog_scope)\n                displayName: Deploy SharePoint package\n</code></pre> <pre><code># ...\njobs:\n  deploy:\n    # ...\n    steps:\n      # ...\n      - name: Get target site URL (${{ inputs.environment_name }})\n        id: site\n        shell: pwsh\n        run: |\n            $uri = [System.Uri]\"${{ inputs.site_url_uat }}\"\n\n            if ('${{ inputs.environment_name }}' -eq 'PRD') {\n              $uri = [System.Uri]\"${{ inputs.site_url_prd }}\"\n            }\n\n            echo \"::set-output name=url::$uri\"\n\n      - name: Set site collection context (${{ inputs.environment_name }})\n        shell: pwsh\n        run: |\n          $uri = \"${{ steps.site.outputs.url }}\"\n          m365 spo set --url $uri\n\n      - name: Upload SharePoint package to ${{ inputs.app_catalog_scope }} App Catalog (${{ inputs.environment_name }})\n        shell: pwsh\n        run: |\n            $appCatalogScope = \"sitecollection\"\n            $appCatalogUrl = \"${{ inputs.site_url_uat }}\"\n\n            if ('${{ inputs.environment_name }}' -eq 'PRD') {\n              $appCatalogScope = \"${{ inputs.app_catalog_scope }}\"\n              $appCatalogUrl = \"${{ inputs.site_url_prd }}\"\n            }\n\n            m365 spo app add --filePath \"artifact/${{ steps.package.outputs.name }}\" --appCatalogUrl $appCatalogUrl --scope $appCatalogScope --overwrite\n\n      - name: Deploy SharePoint package (${{ inputs.environment_name }})\n        shell: pwsh\n        run: |\n            $appCatalogScope = \"sitecollection\"\n            $appCatalogUrl = \"${{ inputs.site_url_uat }}\"\n\n            if ('${{ inputs.environment_name }}' -eq 'PRD') {\n              $appCatalogScope = \"${{ inputs.app_catalog_scope }}\"\n              $appCatalogUrl = \"${{ inputs.app_catalog_site_url }}\"\n            }\n\n            m365 spo app deploy --name ${{ steps.package.outputs.name }} --appCatalogUrl $appCatalogUrl --scope $appCatalogScope\n</code></pre> <p>Notice that in the <code>PRD</code> environment, we're not targeting the tenant app catalog, as it also can be a site collection app catalog.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#trigger-pipeline","title":"Trigger pipeline","text":"<p>The last \"step\" is to configure the pipeline that will trigger our whole CI / CD process.</p> <p>For Azure DevOps, we have the opportunity to reference a global CI / CD pipeline (<code>build-deploy-spfx-cli-m365.yml</code>), for which we'll provide important steps, such as environment variable groups.</p> AzDO (azure-pipelines.yml)AzDO (build-deploy-spfx-cli-m365.yml)Action (main.yml) <pre><code>name: main\n\ntrigger:\n  branches:\n    include:\n    - main\n\nstages:\n  - template: pipelines/stages/build-deploy-spfx-cli-m365.yml\n    parameters:\n      include_tests: false\n      variable_group_uat: 'contoso-UAT'\n      variable_group_prd: 'contoso-PRD'\n      deploy_uat: true\n      deploy_prd: true\n</code></pre> <pre><code>parameters:\n  - name: include_tests\n    type: boolean\n    default: true\n  - name: variable_group_uat\n    type: string\n  - name: variable_group_prd\n    type: string\n  - name: deploy_uat\n    type: boolean\n    default: true\n  - name: deploy_prd\n    type: boolean\n    default: true\n\nstages:\n  - stage: 'build'\n    jobs:\n      - template: ../jobs/build-spfx.yml\n        parameters:\n          include_tests: false\n  - ${{ if eq(parameters.deploy_uat, true) }}:\n    - stage: 'deploy_uat'\n      displayName: Deploy on UAT\n      dependsOn: [ build ]\n      jobs:\n        - template: ../jobs/deploy-spfx-cli-m365.yml\n          parameters:\n            target_environment: 'UAT'\n            variable_group_name: ${{ parameters.variable_group_uat }}\n  - ${{ if eq(parameters.deploy_prd, true) }}:\n    - stage: 'deploy_prd'\n      displayName: Deploy on PRD\n      dependsOn: [ deploy_uat ]\n      jobs:\n        - template: ../jobs/deploy-spfx-cli-m365.yml\n          parameters:\n            target_environment: 'PRD'\n            variable_group_name: ${{ parameters.variable_group_prd }}\n</code></pre> <pre><code>name: main\n\non:\n  push:\n    branches: \n    - main\n  workflow_dispatch: # Can be triggered manually\n\njobs:\n  build:\n    uses: meganb/contoso/.github/workflows/build-spfx.yml@main\n  deploy_uat:\n    needs: build\n    uses: meganb/contoso/.github/workflows/deploy-spfx-cli-m365.yml@main\n    with:\n      environment_name: UAT\n      site_url_uat: https://contoso.sharepoint.com/sites/hr-uat\n    secrets:\n      AAD_APP_ID: ${{ secrets.AAD_APP_ID }}\n      AAD_APP_PASSWORD: ${{ secrets.AAD_APP_PASSWORD }}\n      AAD_APP_ENCODED_CERTIFICATE: ${{ secrets.AAD_APP_ENCODED_CERTIFICATE }}\n      AAD_APP_THUMBPRINT: ${{ secrets.AAD_APP_THUMBPRINT }}\n      AAD_TENANT_ID: ${{ secrets.AAD_TENANT_ID }}\n  deploy_prd:\n    needs: deploy_uat\n    uses: meganb/contoso/.github/workflows/deploy-spfx-cli-m365.yml@main\n    with:\n      environment_name: PRD\n      site_url_prd: https://contoso.sharepoint.com/sites/hr\n      app_catalog_scope: tenant\n      app_catalog_site_url: https://contoso.sharepoint.com/sites/app\n    secrets:\n      AAD_APP_ID: ${{ secrets.AAD_APP_ID }}\n      AAD_APP_PASSWORD: ${{ secrets.AAD_APP_PASSWORD }}\n      AAD_APP_ENCODED_CERTIFICATE: ${{ secrets.AAD_APP_ENCODED_CERTIFICATE }}\n      AAD_APP_THUMBPRINT: ${{ secrets.AAD_APP_THUMBPRINT }}\n      AAD_TENANT_ID: ${{ secrets.AAD_TENANT_ID }}\n</code></pre>"},{"location":"articles/20220420-apply-devops-spfx-part3/#pipeline-files","title":"Pipeline files","text":"<p>Below you'll find the complete pipeline files with an abstract, which will be enough as a starter kit to setup everything on your side.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#cli-for-microsoft-365","title":"CLI for Microsoft 365","text":"<ul> <li>AzDO</li> <li>Action</li> </ul>"},{"location":"articles/20220420-apply-devops-spfx-part3/#pnp-powershell","title":"PnP PowerShell","text":"<ul> <li>AzDO</li> <li>Action</li> </ul>"},{"location":"articles/20220420-apply-devops-spfx-part3/#solution-configuration","title":"Solution configuration","text":"<p>Below we'll have all the minimum configuration to make our pipeline working on both AzDO and GitHub Actions.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#azdo-configuration","title":"AzDO configuration","text":"<p>In this context, we'll use three important features:</p> <ul> <li>Environments</li> <li>Approvers</li> <li>Variable groups</li> </ul> <p>During the pipeline run, both CI and CD parts are considered as \"Stages\". As the UAT and PRD deployments will have to access to environments, secure files and variable groups, we will have to give permission for those stages once.</p> <p>For each of those, we will have to permit the pipeline to access to them only on the first run. This will be seen on the pipeline run page, as we'll see that the UAT / PR deployments will be pending for approving permissions. More info here.</p> <p>The environments will be necessary for approving a pipeline before being run. We'll have to add two environments:</p> <ul> <li>UAT (testing)</li> <li>PRD (production)</li> </ul> <p>Environments can be configured here: https://dev.azure.com/[ORGANIZATION]/[PROJECT]/_environment.</p> <p>For each environment, we can add an approver by clicking on the three dots located in the upper right of it, then \"Approvals and checks\" and select \"Approvals\".</p> <p>Last part to configure are the variable groups, which will be called by our deployment pipeline. As this one will be called twice (one for testing, the other for production), the variable groups will be associated with the environments created before. Here again, two variable groups will be created:</p> <ul> <li>contoso-UAT (testing)</li> <li>contoso-PRD (production)</li> </ul> <p>Variable groups can be configured here: https://dev.azure.com/[ORGANIZATION]/[PROJECT]/_library?itemType=VariableGroups.</p> <p>Below the variables used in the pipelines, depending on the context:</p> Name UAT PRD Secret value? Definition <code>aad_app_id</code> YES YES NO The Azure AD application ID with which the authentication to SharePoint will be done <code>aad_app_password</code> YES YES YES The certificate password necessary for the authentication <code>aad_tenant_id</code> YES YES NO ID or domain (for example \"contoso.onmicrosoft.com\") of the tenant from which accounts should be able to authenticate <code>app_catalog_scope</code> NO YES NO Production app catalog scope (can be \"tenant\" or \"site collection\") <code>site_url_uat</code> YES NO NO SharePoint UAT site URL where the SPFx package will be deployed <code>app_catalog_site_url</code> NO YES NO Production app catalog site URL (can be a tenant or a site collection one) <code>site_url_prd</code> NO YES NO SharePoint PRD site URL where the SPFx package will be deployed <p>Especially for AzDO, we will use the Secure files feature to store a PFX file in order to login to SharePoint in Application context. In this example, we'll use one PFX file for both testing and production environments: <code>PnP.SharePoint.AppOnly.pfx</code>.</p> <p>Secure files can be configured here: https://dev.azure.com/[ORGANIZATION]/[PROJECT]/_library?itemType=SecureFiles.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#github-actions-configuration","title":"GitHub Actions configuration","text":"<p>The environments will be necessary for approving a pipeline before being run. You'll have to add two environments:</p> <ul> <li>UAT (testing)</li> <li>PRD (production)</li> </ul> <p>Environments can be configured here: https://github.com/[ORGANIZATION]/[PROJECT]/settings/environments.</p> <p>Beware that in order to use multiple environments, your repo has to be public or your subscription has to be a Pro one.</p> <p>For each environment, you can add an approver by enabling the checkbox marked \"Required reviewers\", then adding at least one reviewer account then click on \"Save protection rules\".</p> <p>Environment secrets can be configured here: https://github.com/[ORGANIZATION]/[PROJECT]/settings/environments/[ENVIRONMENT_ID]/edit.</p> <p>Below the secrets used in the workflows:</p> Name Description <code>AAD_APP_ID</code> The Azure AD application ID with which the authentication to SharePoint will be done <code>AAD_APP_PASSWORD</code> The certificate password necessary for the authentication <code>AAD_APP_ENCODED_CERTIFICATE</code> Base64 encoded certificate <code>AAD_APP_THUMBPRINT</code> Certificate thumbprint <code>AAD_TENANT_ID</code> ID or domain (for example \"contoso.onmicrosoft.com\") of the tenant from which accounts should be able to authenticate <p>Below the parameters used in the <code>deploy-spfx-cli-m365.yml</code> workflow, depending on the environment:</p> Name UAT PRD Definition <code>environment_name</code> YES YES The deployment environment (can be 'UAT' or 'PRD') <code>site_url_uat</code> YES NO SharePoint UAT site URL where the SPFx package will be deployed <code>site_url_prd</code> NO YES SharePoint PRD site URL where the SPFx package will be deployed <code>app_catalog_scope</code> NO YES Production app catalog scope (can be \"tenant\" or \"site collection\") <code>app_catalog_site_url</code> NO YES Production app catalog site URL (can be a tenant or a site collection one)"},{"location":"articles/20220420-apply-devops-spfx-part3/#other-source-code","title":"Other source code","text":"<p>Ephemeral testing site (which will run with PnP PowerShell only, as it will use the Provisioning Engine to create a copy of existing production site):</p> <ul> <li>AzDO</li> <li>Action</li> </ul>"},{"location":"articles/20220420-apply-devops-spfx-part3/#conclusion","title":"Conclusion","text":"<p>Doing so, we'll secure the credentials for each environment and give the entire control to the Ops.</p> <p>The last part will point out advantages / drawbacks on the two solutions regarding this implementation.</p>"},{"location":"articles/20220420-apply-devops-spfx-part3/#navigation","title":"Navigation","text":"<p>Apply a DevOps process to your SPFx project (Part 1)</p> <p>Apply a DevOps process to your SPFx project (Part 2)</p> <p>Apply a DevOps process to your SPFx project (Part 3)</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/","title":"Getting started with Teams AI library","text":"<p>With the rise of LLMs such as GPT and Llama, Microsoft not only provides ready-to-use chatbot such as Copilots but also extensibility features.</p> <p></p> <p>Among them, one got my attention from the first announcement as a preview: Teams AI library. First announced during Build 2023 as a public preview, the library got significant changes until its official release (GA) on December 12, 2023 (even if announced first during Ignite 2023 but still in preview though). However, you can start developing with it using Teams Toolkit which has a dedicated template!</p> <p>In this article, I'll explain key features of this library, how to get started with a ready-to-use chatbot sample which will include Azure resources usage.</p> <p>Warning</p> <p>Disclaimer This article will focus on Teams AI library (TypeScript) with a chatbot example, not message extension. It will also leverage Azure OpenAI &amp; Azure AI Content Content Safety. Consequently, it won't use the Azure OpenAI's new assistant features.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#librarys-key-concepts","title":"Library's key concepts","text":"<p>The library is based on Bot Framework SDK which has already event handlers &amp; methods to interact with Teams chat context (app installation, message reactions, adaptive cards...) but has also AI dedicated features which relies on LLM to complete end user's intents. It also contains features related to moderation, prompt functions injection and intents-to-actions mapping.</p> <p>Along with these features, Teams AI library includes Retrieval Augmented Generation (RAG) which facilitates existing custom data sources search when a user requests particular info. For now this is only available when adding data sources such as Vector one.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#prompt-manager","title":"Prompt manager","text":"<p>The prompt manager will gather information related to prompt configuration, prompt itself and optionally, actions that can be called by the prompt when using augmentations. A Teams AI prompt has to be structured like this:</p> <ul> <li>prompts folder</li> <li>prompt name (<code>chat</code> for example)<ul> <li><code>config.json</code>: prompt configuration (input tokens, temperature, penalties,...)</li> <li><code>skprompt.txt</code>: flat file that gives a context to the model and for which you can provide functions and context variables</li> <li><code>actions.json</code> (optional): a list of methods with a description and optionally input parameters that can be requested by the SDK to the user</li> </ul> </li> </ul> <p>Most of the prompt manager features are based on Semantic Kernel ones.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#storage","title":"Storage","text":"<p>Storage feature is for keeping state information (temp values, input / output actions) but also user session / history, which can be useful for complex scenario where you want the model to remember previous messages exchanged with the user. The Storage features comes from Bot Framework SDK.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#planner","title":"Planner","text":"<p>The Planner is the most essential configuration part of the app. This will perform key actions like validation and feedback loop to bring the expected answer to user's request. It contains:</p> <ul> <li>Model instance used (OpenAI or Azure OpenAI key, deployment to use, endpoint, request configuration,...)</li> <li>Prompt manager (history token, input tokens, which prompts to use,...)</li> <li>Tokenizer (if specific, otherwise a default one will be used)</li> <li>Number of repair attempts to perform during intent-to-action validation process</li> </ul> <p>The Planner will orchestrate the LLM's response validation accordingly to the selected augmentation if such.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#augmentations","title":"Augmentations","text":"<p>Augmentations are some kind of enhancements. They leverage the LLM to \"reason\" or plan user's intents, preventing wrong answers by checking if intent will match with a declared action and if necessary, will ask the AI system to adjust its response, before bringing an answer to the user.</p> <p>Whether you choose to use <code>monologue</code> or <code>sequence</code>, both will rely on a plan. We'll see later in this article that the process is interesting and that the choice of the augmentation impacts your bot's behavior.</p> <p>There are two augmentations available, depending on the scenario you imagine for your bot.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#sequence-augmentation","title":"Sequence augmentation","text":"<p>Sequence augmentation works with a DO / SAY system, which will be turned into a plan that can be helpful in a multi-step process like for example, scheduling a meeting which will start by finding a common slot with a coworker from a start date, then initializing a meeting request.</p> <p>When initializing the AI system, Teams AI is completing the initial prompt with the following info (it's trimmed and shrunk in the debug to avoid over-consumption of tokens):</p> <p>[INITIAL PROMPT]</p> <p>Use the actions above to create a plan in the following JSON format:</p> <pre><code>{\n    \"type\": \"plan\",\n    \"commands\":\n        [\n            {\n                \"type\":\"DO\",\n                \"action\":\"&lt;name&gt;\",\n                \"parameters\": {\n                    \"&lt;name&gt;\":&lt;value&gt;\n                }\n            },\n            {\n                \"type\":\"SAY\",\n                \"response\":\"&lt;response&gt;\"\n            }\n        ]\n}\n</code></pre> <p>Like this, it will be able to transform actions into a DO-SAY plan.</p> <p>Below is an example of how Teams AI behaves when a user is requesting to get its info, as stated in the augmentation title, \"sequentially\" by first performing the action, then returning a response to the user:</p> <pre><code>{\n  \"type\": \"plan\",\n  \"commands\": [\n    {\n      \"type\": \"DO\",\n      \"action\": \"getUserInfo\",\n      \"parameters\": {}\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Your user information is as follows: [insert user info here].\"\n    }\n  ]\n}\n</code></pre> <p>The cool thing about this one is that you can provide conversation values that will be available in the prompt, which then will be used by the AI system.</p> <p>Warning</p> <p>When using sequence augmentation, if you want the model to automatically return info, you have to update the prompt with conversation state properties. We'll see about that later on.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#monologue-augmentation","title":"Monologue augmentation","text":"<p>With this augmentation, when interacting with the bot, there's a self-reasoning mechanism that will help the LLM to find out user's intent and try to match it to an action. If required info is missing, it will guess that it has to ask it to the user or rely on the prompt if necessary.</p> <p>Like for the <code>sequence</code> augmentation, Teams AI will complete the initial prompt like this:</p> <pre><code> SAY:\n    description: use to ask the user a question or say something\n    parameters:\n        text:\n            type: string\n            description: text to say or question to ask\n                Return a JSON object with your thoughts and the next action to perform.\n                Only respond with the JSON format below and base your plan on the actions above.\n                If you're not sure what to do, you can always say something by returning a SAY action.\n                If you're told your JSON response has errors, do your best to fix them.\n            Response Format:\n                {\n                    \"thoughts\":\n                        {\n                            \"thought\": \"&lt;your current thought&gt;\",\n                            \"reasoning\": \"&lt;self reflect on why you made this decision&gt;\",\n                            \"plan\": \"- short bulleted\\\\n- list that conveys\\\\n- long-term plan\",\n                        },\n                    \"action\":\n                        {\n                            \"name\": \"&lt;action name&gt;\",\n                            \"parameters\": { \"&lt;name&gt;\": \"&lt;value&gt;\" },\n                        },\n                }\n</code></pre> <p>As you can see, it's kind of different than the previous. You can see that there's a notion of thoughts which lead the AI system to have a self-reasoning process.</p> <p>This is an example of how Teams AI translates user's request.</p> <pre><code>{\n    \"thoughts\": {\n        \"thought\": \"Sure, let me retrieve your user information.\",\n        \"reasoning\": \"The getUserInfo action was requested, which requires retrieving the current user's information.\",\n        \"plan\": \"- Retrieve the current user's information\\n- Provide the information to the user.\"\n    },\n    \"action\": {\n        \"name\": \"getUserInfo\",\n        \"parameters\": {}\n    }\n}\n</code></pre> <p>We'll see in the sample's description that the mechanism is interesting to observe but also more limited than the <code>sequence</code> one according to me.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#use-case","title":"Use case","text":"<p>You want to provide a custom intelligent chatbot to your end users, that both leverage the power of the LLM and respects the company's privacy.</p> <p>But moreover, you want to provide advanced capabilities based on company's ecosystem using Microsoft Graph with current user's context.</p> <p>You want users to get the information they're looking for, with simple requests and if necessary, the chatbot will ask for missing information to complete the initial request.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#architecture","title":"Architecture","text":"<ul> <li>Azure OpenAI service (<code>Microsoft.CognitiveServices/accounts</code>)<ul> <li>LLM Deployment</li> </ul> </li> <li>Azure AI Content Safety (for moderation)</li> <li>Web App (to host the deployed bot)</li> <li>2 Entra ID Apps<ul> <li>1 for the bot</li> <li>1 for managing Graph API permissions through OBO flow</li> </ul> </li> </ul>"},{"location":"articles/20240327-getting-started-with-teams-ai/#solutions-description","title":"Solution's description","text":"<p>If you want to download the sample solution, here it is (read the README first \ud83d\ude09): Teams AI Chat Bot Graph sample</p> <p>Based on a sample project generated by Teams Toolkit, the solution contains everything to run \"locally\" (there're still Entra IDs generated on the fly + a dev tunnel visible from BotFramework site + Azure AI resources).</p> <p>It also provides everything to deploy the bot on Azure. The only resources not provided by default are the Azure OpenAI service and the Azure AI Content Safety, which have to be provided in the env files (both git tracked and untracked / private ones, in the local and dev environments).</p> <p>Even if this article is focused on local env, the featured sample is ready-to-use for dev one if you add and fill .env.dev.user file. More info regarding Teams Toolkit environment configuration can be found here.</p> <p>This sample handles following features:</p> <ul> <li>Silent SSO with Graph API</li> <li>Azure OpenAI connection</li> <li>Azure AI moderation</li> </ul> <p>When pressing F5, the local .env is triggered with the following actions in this order through Team Toolkit:</p> <ol> <li>Running the <code>teamsapp.local.yml</code> file</li> <li>Provisioning<ol> <li><code>teamsApp/create</code>: Creating the Teams App for deployment (see Teams Developer Portal)</li> <li><code>botAadApp/create</code>: Creating the Entra ID app that will handle the bot<ol> <li>Writing the generated info in the .env.local &amp; .env.local.user files</li> </ol> </li> <li><code>botFramework/create</code>: Registering the bot on the Bot Framework developer portal<ol> <li>Including the bot Entra ID, messaging endpoint, Teams channel</li> </ol> </li> <li><code>aadApp/create</code>: Creating the Entra ID app that will handle the OBO flow with Graph API<ol> <li>Writing the generated info in the .env.local &amp; .env.local.user files</li> </ol> </li> <li><code>aadApp/update</code>: Updating the previous created Entra ID app with more info based on a template manifest<ol> <li>Including Graph API permissions, access_as_user API authorization endpoint,...</li> </ol> </li> <li><code>teamsApp/validateManifest</code>: Validating Teams manifest file<ol> <li>Generating a <code>manifest.local.json</code> from <code>manifest.json</code> template file</li> </ol> </li> <li><code>teamsApp/zipAppPackage</code>: Packaging the Teams App with manifest and icons</li> <li><code>teamsApp/validateAppPackage</code>: Validating Teams App package</li> <li><code>teamsApp/update</code>: Adding or updating Teams App on the Teams Developer Portal</li> </ol> </li> <li>Deploying<ol> <li><code>cli/runNpmCommand</code>: Installing dependencies to run the solution locally</li> <li><code>file/createOrUpdateEnvironmentFile</code>: Setting context environment values<ol> <li>These values will be used in the <code>config.ts</code> file during runtime</li> </ol> </li> </ol> </li> </ol>"},{"location":"articles/20240327-getting-started-with-teams-ai/#authentication","title":"Authentication","text":"<p>First, the authentication. By default, there's nothing configured except the default Entra ID app linked to the Azure Bot resource, in order to be available in Teams.</p> <p>But thanks to Teams AI, you can specify dedicated authentication, including API scopes (here Microsoft Graph). See snippet below:</p> appBuilderService.ts <pre><code>// ...\nconstructor(storage: Storage, planner: Planner, moderator: Moderator, adapter: TeamsAdapter, config: any, permissions: string[]) {\nthis._app = new ApplicationBuilder&lt;T&gt;()\n  .withStorage(storage)\n  .withAIOptions({\n    planner,\n    moderator\n  })\n  .withAuthentication(adapter, {\n    settings: {\n      graph: {\n        scopes: permissions,\n        msalConfig: {\n          auth: {\n            clientId: config.appId,\n            clientSecret: config.appPassword,\n            authority: config.authority,\n          }\n        },\n        signInLink: `https://${config.botDomain}/auth-start.html`,\n        endOnInvalidMessage: true\n      }\n    }\n  })\n  .build();\n// ...\n</code></pre> <p>In this case, the solution will use the OBO flow in order to give user permissions to query Graph API on his behalf. The only required thing here is that he will have to approve requested permissions once, through a dedicated page (here <code>auth-start.html</code> which is located in the public folder of the project). It will be displayed like this during first user interaction:</p> <p></p> <p>Info</p> <p>Message is: \"We need to request additional permissions. You should only need to do this once for [Entra ID App name]\". Of course, if this has been already allowed for the whole organization, this message won't be displayed.</p> <p>Then user will be redirected to a dedicated page (the one mentioned above in the <code>SignInLink</code> param). When testing locally, this window will appear:</p> <p></p> <p>Finally, the user will see the common permission approval page:</p> <p></p> <p>If the user clicks on the \"App Info\" link, it will display the Entra ID app name and the redirect URI (here <code>auth-end.html</code> located in the public folder of the project), which is configured in the Entra ID app in the \"Authentication\" part, as a Web platform. This is included in the project sample in the bicep files.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#ai-system-interaction","title":"AI system interaction","text":"<p>Once authenticated, we need to \"init\" the interaction with the AI system through Teams AI and most importantly, setting up the Microsoft Graph context.</p> <p>This can be done in a event handler, after signing in called <code>onSignInSuccess</code>. The problem is, if we use this handler, it will \"bypass\" the LLM init which means that the user will have to send another message after authentication. The solution here is to setup the AI system in the event handler:</p> bot-sequence.ts <pre><code>let graphClient: GraphClientService;\n\napp.authentication.get('graph').onUserSignInSuccess(async (context: TurnContext, state: ApplicationTurnState) =&gt; {    \n  if (!graphClient) {\n    graphClient = new GraphClientService(state.temp.authTokens['graph']!);\n\n    // This will indicate the user that the plan is being processed during init\n    await context.sendActivities([\n      { type: 'typing' },\n      { type: 'delay', value: 2000 }\n    ])\n\n    // Here we'll init the LLM at first user's interaction\n    // Otherwise the user will have to send another message\n    // This is because of the silent SSO event performed here with onUserSignInSuccess\n    await app.ai.doAction(context, state, \"greetings\");\n  }\n  else {\n    // If token has expired, update the Graph client\n    graphClient = new GraphClientService(state.temp.authTokens['graph']!);\n  }\n});\n</code></pre> <p>Once the graph token is obtained and used to instantiate the Graph client, the event handler will init the LLM through the action greetings which will welcome the user for the first time.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#actions","title":"Actions","text":"<p>Like mentioned earlier regarding the prompts folder, Teams AI gives the opportunity to declare functions as actions with a simple description and if necessary, parameters than can be required or not.</p> <p>As discussed earlier, the use case here is to facilitate user interaction with his organization context through Microsoft Graph. Below the content of <code>actions.json</code>:</p> actions.json <pre><code>[\n    {\n        \"name\": \"greetings\",\n        \"description\": \"Welcomes User on the first interaction with the bot\"\n    },\n    {\n        \"name\": \"getUserInfo\",\n        \"description\": \"Get User information\"\n    },\n    {\n        \"name\": \"getUserColleagues\",\n        \"description\": \"Get User's colleagues\"\n    },\n    {\n        \"name\": \"getUserUnreadEmails\",\n        \"description\": \"Get User unread emails\"\n    },\n    {\n        \"name\": \"findMeetingTimes\",\n        \"description\": \"Returns available meeting slots for a given colleague\",\n        \"parameters\": {\n            \"colleague\": {\n                \"type\": \"string\",\n                \"description\": \"The colleague to find meeting times with\"\n            },\n            \"duration\": {\n                \"type\": \"integer\",\n                \"description\": \"The duration of the meeting in minutes\"\n            },\n            \"startTime\": {\n                \"type\": \"string\",\n                \"description\": \"The start time of the meeting in ISO 8601 format\"\n            },\n            \"endTime\": {\n                \"type\": \"string\",\n                \"description\": \"The end time of the meeting in ISO 8601 format\"\n            }\n        },\n        \"required\": [\n            \"colleague\" \n        ]\n    }\n]\n</code></pre> <p>We'll focus on the <code>sequence</code> augmentation first, then on the <code>monologue</code> one.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#sequence","title":"Sequence","text":"<p>We can find the greetings action mentioned before, but also other ones. Now let's go back to the code where the greetings action is declared:</p> bot-sequence.ts <pre><code>app.ai.action(\"greetings\", async (context: TurnContext, state: ApplicationTurnState) =&gt; {\n  const plan = await app.ai.planner.beginTask(context, state, app.ai);\n  // The command [1] matches with the first SAY command in the generated DO / SAY plan\n  // It means that the actions.json must be registered\n  // Otherwise, it will use the auto-generated SAY command ([0])\n  const welcomeCommand: PredictedSayCommand = (plan.commands.length &gt; 1 ? plan.commands[1] : plan.commands[0]) as PredictedSayCommand;\n\n  await context.sendActivity(welcomeCommand.response);\n\n  return AI.StopCommandName;\n});\n</code></pre> <p>When referring to a declared action, the command <code>app.ai.action</code> will be used. That's where the \"magic\" works. The AI system, when initialized, will complete the developer's prompt with a \"plan\", containing the actions declared in the JSON file, that will help it to match user's potential request with commands hard-coded in the app.</p> <p>Of course, we could just post a predefined message, but I found it more interesting to let the AI system generate the response for me (and after all, isn't one of the library's purposes?).</p> <p>For this, we can count on the Planner context, for which we have two methods called <code>beginTask</code> &amp; <code>continueTask</code>. Under the hood they will generate a new plan and will let us access the AI system's response based on both user's current request and the matched action.</p> <p>For the greetings action, as it's the first one triggered manually after the authentication process, we have two possibilities following the <code>beginTask</code> method:</p> <ul> <li>The AI system was able to generate the plan, it will contain all the actions and the first one is the greetings one (because declared as such in the <code>actions.json</code> file)</li> <li>The plan was not able to generate the plan yet, then it will return a basic sentence</li> </ul> <p>Because we can't be sure that the plan will be generated first, the greetings action will handle both scenarios.</p> <p>You would ask: Why don't you handle the response yourself?. Let's see what the AI system responds on the first interaction in the scenario where it was able to generate the plan:</p> <pre><code>{\n  \"type\": \"plan\",\n  \"commands\": [\n    {\n      \"type\": \"DO\",\n      \"action\": \"greetings\",\n      \"parameters\": {}\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Hello! How can I assist you today?\"\n    },\n    {\n      \"type\": \"DO\",\n      \"action\": \"getUserInfo\",\n      \"parameters\": {}\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Your name is [User's name], and your email address is [User's email address].\"\n    },\n    {\n      \"type\": \"DO\",\n      \"action\": \"getUserColleagues\",\n      \"parameters\": {}\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Your colleagues are [list of User's colleagues].\"\n    },\n    {\n      \"type\": \"DO\",\n      \"action\": \"getUserUnreadEmails\",\n      \"parameters\": {}\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"You have [number of unread emails] unread emails.\"\n    },\n    {\n      \"type\": \"DO\",\n      \"action\": \"findMeetingTimes\",\n      \"parameters\": {\n        \"colleague\": \"&lt;colleague name&gt;\",\n        \"duration\": 60,\n        \"startTime\": \"2024-03-15T17:59:28.767Z\",\n        \"endTime\": \"2024-03-16T17:59:28.767Z\"\n      }\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Here are the available meeting slots with [colleague name]: [list of available meeting slots].\"\n    }\n  ]\n}\n</code></pre> <p>As you can see, in the generation, all DO commands have respective SAY ones, which contain predefined answers with a \"slot\" for the expected data.</p> <p>So what if we could go further and let the AI system answering to the user's request if it's \"aware\" of the data?</p> <p>Let's take another registered action, like <code>getUserInfo</code>.</p> <p>Let's say that we want to give additional info about the user when requested and we want the AI system to know this info. Teams AI provides the ability to extend the <code>conversation</code> context object by adding new properties:</p> bot-sequence.ts <pre><code>interface ConversationState extends DefaultConversationState {\n  graphToken: string;\n  UserInfo: {\n    mail: string;\n    name: string;\n  };\n  meetingSuggestions: {\n    start: Date;\n    end: Date;\n  }[];\n  colleagues: string[];\n  nbUnreadEmails: number;\n}\n</code></pre> <p>Here, we're defining the <code>UserInfo</code> property with user's additional info. From my perspective, I see two advantages when using this:</p> <ul> <li>We can store in the app's storage memory that kind of info we can refer to anytime and in our case, when actions are requested, to avoid token consumption</li> <li>The prompt can be updated with those properties so that the AI system can also refer to it when generating answers</li> </ul> <p>Regarding the prompt, below the info regarding user's properties:</p> skprompt.txt <pre><code>[PROMPT_TEXT]\n...\nUser info is the following: {{$conversation.UserInfo}}\n</code></pre> <p>With Teams AI, we can inject additional data to the prompt dynamically!</p> <p>If we focus on the action <code>getUserInfo</code>:</p> bot-sequence.ts <pre><code>app.ai.action(\"getUserInfo\", async (context: TurnContext, state: ApplicationTurnState) =&gt; {\n  if (state.conversation.UserInfo === undefined) {\n    const me = await graphClient.getMe();\n\n    state.conversation.UserInfo = {\n      mail: me.mail,\n      name: me.displayName\n    };\n\n    await sendActivityFromPlanner(context, state);\n\n    return AI.StopCommandName;\n  }\n\n  // If the action is triggered once again\n  // We willingly return nothing from the action\n  // So that the AI system will handle the answer based on the updated prompt\n  return '';\n});\n</code></pre> <p>As we're triggering it the first time, we have to query the Graph API to get expected info. Then we update both the <code>conversation</code> context object and consequently the prompt with obtained info. Finally, we're asking the AI system to start a new plan with updated data through the <code>sendActivityFromPlanner</code>:</p> bot-sequence.ts <pre><code>async function sendActivityFromPlanner(context: TurnContext, state: ApplicationTurnState): Promise&lt;void&gt; {\n  let plan: Plan;\n  let nbRetries = 0;\n  const maxRetries = 3;\n\n  do {\n    // Start a new completion task from the planner\n    // (beginTask method triggers in fact continueTask under the hood)\n    plan = await app.ai.planner.continueTask(context, state, app.ai);\n\n    // if the answer is generated from a DO / SAY plan match, process it\n    if (plan.commands.length &gt; 1 &amp;&amp; plan.commands[1]?.type === \"SAY\") {\n      await context.sendActivity((plan.commands[1] as PredictedSayCommand).response);\n      break;\n    }\n    else {\n      nbRetries++;\n    }\n  }\n  while (nbRetries &lt; maxRetries);\n\n  if (nbRetries === maxRetries) {\n    await context.sendActivity((plan.commands[0] as PredictedSayCommand).response);\n  }\n}\n</code></pre> <p>This method, called by most of the actions in our sample, will let the AI system generate a new plan that will eventually return the expected SAY command with updated data. If not, the method will let the AI system update its plan 2 more times and in the worst case, will return the last generated message even if not the expected one.</p> <p>So when we're querying the bot to get our user info:</p> <p></p> <p>The AI system will behave like this (from the TERMINAL tab in VS Code during local execution):</p> <pre><code>// CHAT PROMPT\n{\n    \"role\": \"user\",\n    \"content\": \"what are my user info?\"\n}\n\n// CHAT RESPONSE (message =&gt; content, first task plan execution in the `sendActivityFromPlanner` method)\n{\n  \"type\": \"plan\",\n  \"commands\": [\n    {\n      \"type\": \"DO\",\n      \"action\": \"getUserInfo\"\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Your user information is: name, email, phone number, job title, department, and manager.\"\n    }\n  ]\n}\n\n// CHAT RESPONSE (message =&gt; content, second task plan execution in the `sendActivityFromPlanner` method)\n{\n  \"type\": \"plan\",\n  \"commands\": [\n    {\n      \"type\": \"DO\",\n      \"action\": \"getUserInfo\"\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Your user information is: name: Michael MAILLOT, email: michael.maillot@contoso.onmicrosoft.com.\"\n    }\n  ]\n}\n</code></pre> <p>This has been done like this because I realized that the AI system was unstable and not always able to return the expected answer.</p> <p>The cool thing is that we can easily detect this through the returned plan. But beware that this approach, even if nice because you don't have to worry about how to generate the answer, it will consume more tokens because of the feedback loop process involved. Of course, responses are limited and if you want to return fancy responses, it's up to you \ud83d\ude09.</p> <p>The SAY command has also limitations when returning complex objects. In our use case, if we want to find common meeting slots with a colleague, we're referring to Graph's <code>findMeetingTimes</code> method, returning following interface:</p> <pre><code>export interface MeetingTimeSuggestion {\n    // An array that shows the availability status of each attendee for this meeting suggestion.\n    attendeeAvailability?: NullableOption&lt;AttendeeAvailability[]&gt;;\n    // A percentage that represents the likelhood of all the attendees attending.\n    confidence?: NullableOption&lt;number&gt;;\n    // An array that specifies the name and geographic location of each meeting location for this meeting suggestion.\n    locations?: NullableOption&lt;Location[]&gt;;\n    // A time period suggested for the meeting.\n    meetingTimeSlot?: NullableOption&lt;TimeSlot&gt;;\n    /**\n     * Order of meeting time suggestions sorted by their computed confidence value from high to low, then by chronology if\n     * there are suggestions with the same confidence.\n     */\n    order?: NullableOption&lt;number&gt;;\n    /**\n     * Availability of the meeting organizer for this meeting suggestion. The possible values are: free, tentative, busy, oof,\n     * workingElsewhere, unknown.\n     */\n    organizerAvailability?: NullableOption&lt;FreeBusyStatus&gt;;\n    // Reason for suggesting the meeting time.\n    suggestionReason?: NullableOption&lt;string&gt;;\n}\n</code></pre> <p>Even if the SAY command generated by the AI system plans to include meeting time slots:</p> <pre><code>{\n  \"type\": \"plan\",\n  \"commands\": [\n    // ...\n    {\n      \"type\": \"DO\",\n      \"action\": \"findMeetingTimes\",\n      \"parameters\": {\n        \"colleague\": \"&lt;colleague name&gt;\",\n        \"duration\": 60,\n        \"startTime\": \"2024-03-15T17:59:28.767Z\",\n        \"endTime\": \"2024-03-16T17:59:28.767Z\"\n      }\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Here are the available meeting slots with [colleague name]: [list of available meeting slots].\"\n    }\n  ]\n}\n</code></pre> <p>And even if the prompt contains the meeting info in its state:</p> skprompt.txt <pre><code>[PROMPT_TEXT]\n...\nAvailable meeting slots: {{$conversation.meetingSuggestions}}\n</code></pre> <p>It won't be able to list the meeting slots with appropriate info based on its scope of understanding. If we have a look at the chat prompt in the terminal during debug, here's the output:</p> <pre><code>  {\n    \"role\": \"user\",\n    \"content\": \"Find meeting slots with Alex W today\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": \"{\"type\":\"plan\",\"commands\":[{\"type\":\"DO\",\"action\":\"findMeetingTimes\",\"parameters\":{\"colleague\":\"Alex W\",\"duration\":60,\"startTime\":\"2024-03-19T08:20:44.024Z\",\"endTime\":\"2024-03-20T08:20:44.024Z\"}},{\"type\":\"SAY\",\"response\":\"Sure, let me check for available meeting slots with Alex W today.\"}]}\"\n  }\n</code></pre> <p>Decoded, here's the JSON inside <code>content</code>:</p> <pre><code>{\n  \"type\": \"plan\",\n  \"commands\": [\n    {\n      \"type\": \"DO\",\n      \"action\": \"findMeetingTimes\",\n      \"parameters\": {\n        \"colleague\": \"Alex W\",\n        \"duration\": 60,\n        \"startTime\": \"2024-03-19T08:20:44.024Z\",\n        \"endTime\": \"2024-03-20T08:20:44.024Z\"\n      }\n    },\n    {\n      \"type\": \"SAY\",\n      \"response\": \"Sure, let me check for available meeting slots with Alex W today.\"\n    }\n  ]\n}\n</code></pre> <p>It looks like it can't use Dates objects to create a response. But maybe I'm missing something?</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#monologue","title":"Monologue","text":"<p>The <code>monologue</code> augmentation is also nice but more limited compared to what we saw with <code>sequence</code> one. Like explained earlier, during user's interaction with the AI system, it will have a chain-to-reason flow where the AI system will try to understand user's intent with self-reasoning.</p> <p>Even if more limited because there's no DO-SAY plan, it's really interesting to see the \"thinking\" process made by the AI system.</p> <p>Below the example when user requests meeting slots with a colleague, which supposes to trigger the <code>findMeetingTimes</code> action that requires at least the <code>colleague</code> parameter.</p> <p>User request:</p> <p>Find meeting slots with a colleague</p> <p>AI system reasoning:</p> <pre><code>{\n  \"thoughts\": {\n    \"thought\": \"The User called the 'findMeetingTimes' action, but did not provide any arguments. I will ask them to provide the necessary information.\",\n    \"reasoning\": \"I cannot find meeting slots without knowing who the User wants to meet with and when they are available. Asking the User to provide the necessary information is the best course of action.\",\n    \"plan\": \"- Ask the User to provide the name of the colleague they want to meet with.\\\\n- If the User provides a duration, ask them to provide it.\\\\n- If the User provides a start time, ask them to provide it.\\\\n- If the User provides an end time, ask them to provide it.\"\n  },\n  \"action\": {\n    \"name\": \"SAY\",\n    \"parameters\": {\n      \"text\": \"Sure, I can help you find meeting slots with a colleague. Can you please tell me the name of the colleague you want to meet with?\"\n    }\n  }\n}\n</code></pre> <p>Once requested colleague provided (here \"Megan B\"), here's the chat response:</p> <pre><code>{\n  \"thoughts\": {\n    \"thought\": \"The User wants to find meeting slots with Megan B. I will check if the User provided any additional information and use default values if necessary.\",\n    \"reasoning\": \"Now that I know who the User wants to meet with, I need to check if they provided any additional information. If they did not, I will use default values for the start and end times and duration.\",\n    \"plan\": \"- Check if the User provided a duration.\\\\n- If not, use the default duration of 60 minutes.\\\\n- Check if the User provided a start time.\\\\n- If not, use the current time as the start time.\\\\n- Calculate the end time by adding the duration to the start time.\\\\n- Use the Microsoft Graph API to find available meeting slots between the start and end times for Megan B.\\\\n- Return the available meeting slots to the User.\"\n  },\n  \"action\": {\n    \"name\": \"findMeetingTimes\",\n    \"parameters\": {\n      \"colleague\": \"Megan B\",\n      \"duration\": 60,\n      \"startTime\": \"2024-03-19T13:52:15.205Z\",\n      \"endTime\": \"2024-03-20T13:52:15.205Z\"\n    }\n  }\n}\n</code></pre> <p>And here's the provided answer generated through code:</p> <p></p> <p>Remember that in the prompt, we provided additional info as default values to help the AI system, such as duration, current &amp; start time,...</p> <p>What I find very nice is how it processes internally to get the appropriate answer from user's request.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#moderation","title":"Moderation","text":"<p>Of course by default, the Azure AI built-in content filtering system included in the Azure OpenAI deployment will work and will trigger the following message:</p> <p>The bot encountered unhandled error: The response was filtered due to the prompt triggering Azure OpenAI's content management policy. Please modify your prompt and retry. To learn more about our content filtering policies please read our documentation: https://go.microsoft.com/fwlink/?linkid=2198766</p> <p>But what we want here is to handle the moderation through the app, in order to trigger specific action or send a custom message to the user.</p> <p>Another cool built-in features in Teams AI is content filtering system. We can reference Azure AI Content Safety resources to better handle both input and output. Detailed documentation about content filtering can be found here.</p> <p>In the app initialization, you can define an <code>AzureContentSafetyModerator</code> object:</p> appContext.ts <pre><code>const moderator = new AzureContentSafetyModerator({\n  apiKey: config.azContentSafetyKey,\n  endpoint: config.azContentSafetyEndpoint,\n  model: \"gpt-3.5-turbo\",\n  moderate: 'both',\n  categories: [\n    {\n      category: 'Hate',\n      severity: ModerationSeverity.High\n    },\n    {\n      category: 'SelfHarm',\n      severity: ModerationSeverity.High\n    },\n    {\n      category: 'Sexual',\n      severity: ModerationSeverity.High\n    },\n    {\n      category: 'Violence',\n      severity: ModerationSeverity.High\n    }\n  ]\n});\n</code></pre> <p>Warning</p> <p>The <code>azContentSafetyKey</code> and <code>azContentSafetyEndpoint</code> config properties are not generated by Teams Toolkit during the compilation process: they have to be filled manually in the user .env.local file (as secrets), through their respectful properties <code>SECRET_AZURE_CONTENT_SAFETY_KEY</code> and <code>SECRET_AZURE_CONTENT_SAFETY_ENDPOINT</code>.</p> <p>There are categories for which we can set a sensitivity level. We can also indicate if we want to filter input, output or both of them.</p> <p>Once declared, the <code>moderator</code> constant can be included in the <code>app</code> declaration (in the <code>bot-sequence.ts</code> or <code>bot-monologue.ts</code> files):</p> <pre><code>// ...\nimport { ApplicationTurnState, moderator, planner, scopes, storage } from \"../appContext\";\n\nexport const run = (context: TurnContext) =&gt; app.run(context);\n\nconst app = new appBuilderService&lt;ApplicationTurnState&gt;(storage,\n    planner,\n    moderator,\n    adapter,\n    config,\n    scopes)\n    .app;\n\nexport default app;\n//...\n</code></pre> <p>Of course, we want to \"catch\" the flagged input or output. For this, we'll use dedicated actions described here:</p> appBuilderService.ts <pre><code>//...\nexport class appBuilderService&lt;T extends TurnState&lt;DefaultConversationState, DefaultUserState, DefaultTempState&gt;&gt; {\n  private _app: Application&lt;T&gt;;\n\n  constructor(storage: Storage, planner: Planner, moderator: Moderator, adapter: TeamsAdapter, config: any, permissions: string[]) {\n    //...\n    this._app.ai.action(AI.FlaggedInputActionName, async (context, _state, data) =&gt; {\n      await context.sendActivity(`I'm sorry your message was flagged: ${JSON.stringify(data)}`);\n      return AI.StopCommandName;\n    });\n\n    this._app.ai.action(AI.FlaggedOutputActionName, async (context, _state, data) =&gt; {\n      await context.sendActivity(`I'm not allowed to talk about such things.`);\n      await context.sendActivity(`I'm sorry the output message was flagged: ${JSON.stringify(data)}`);\n      return AI.StopCommandName;\n    });\n  }\n//...\n</code></pre> <p>Now let's give a try! For the input side, we'll simply enter something a bit aggressive to trigger the moderation:</p> <p></p> <p>The response of the Azure AI Content Safety is the following:</p> <pre><code>{\n  \"flagged\": true,\n  \"categories\": {\n    \"hate\": true,\n    \"hate/threatening\": true,\n    \"self-harm\": false,\n    \"sexual\": false,\n    \"sexual/minors\": false,\n    \"violence\": false,\n    \"violence/graphic\": false\n  },\n  \"category_scores\": {\n    \"hate\": 0.3333333333333333,\n    \"hate/threatening\": 0.3333333333333333,\n    \"self-harm\": 0,\n    \"sexual\": 0,\n    \"sexual/minors\": 0,\n    \"violence\": 0,\n    \"violence/graphic\": 0\n  }\n}\n</code></pre> <p>As we can see, the categories <code>hate</code> and <code>date/threatening</code> were triggered by the message and there's a score (from 0 to 1) that gives a hint how important the flag was detected.</p> <p>But what about output then? As we know, when using Azure OpenAI services, there's the principle of Responsible AI which protects LLMs from being aggressive or harmful towards humans. So for example, if we ask the model to insult us, it won't. So how can we try the output flag moderation?</p> <p>Let's ask it to summarize the content of an online news article:</p> warningoutput flag <p>Warning</p> <p>The output flag tab contains example of harmful content that may be disturbing to some readers.</p> <p></p> <p>The response of the Azure AI Content Safety is the following:</p> <pre><code>{\n  \"flagged\": true,\n  \"categories\": {\n    \"hate\": false,\n    \"hate/threatening\": false,\n    \"self-harm\": false,\n    \"sexual\": false,\n    \"sexual/minors\": false,\n    \"violence\": true,\n    \"violence/graphic\": true\n  },\n  \"category_scores\": {\n    \"hate\": 0,\n    \"hate/threatening\": 0,\n    \"self-harm\": 0,\n    \"sexual\": 0,\n    \"sexual/minors\": 0,\n    \"violence\": 0.3333333333333333,\n    \"violence/graphic\": 0.3333333333333333\n  }\n}\n</code></pre> <p>Now in the output context, it's the categories <code>violence</code> and <code>violence/graphic</code> that were triggered when asked the model to summarize article's content and again, there's a score (from 0 to 1) that gives a hint how important the flag was detected.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#watchout","title":"Watchout","text":"<p>Below a few things to point out as a memo.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#documentation","title":"Documentation","text":"<p>As the documentation provided on Microsoft Learn is lightweight at the time I wrote this article, there are more info directly in the source code, like here or here for example. So feel free to deep dive into the code to learn more.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#await","title":"Await","text":"<p>Always use <code>await</code> when sending activities to the user. Otherwise, you'll face errors like this:</p> <p>TypeError: Cannot perform 'set' on a proxy that has been revoked</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#aistopcommandname","title":"AI.StopCommandName","text":"<p>When performing an action, think twice before using the <code>AI.StopCommandName</code> in the return statement. Use it when you don't want the AI system to handle response for you and if you want to actually stop the current plan initiated.</p> <p>Otherwise, you can let it continue the process, which could be useful if for example you're starting to create a list of things, then adding items in it sequentially. Or if the AI system can handle the response for you because it already knows the answer (see actions in the <code>bot-sequence.ts</code> file for such examples).</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#action-misspelling-and-users-intent-misunderstanding","title":"Action misspelling and user's intent misunderstanding","text":"<p>If you misspelled an action in the code or forget to implement it, nothing will happen on the surface but the Terminal window in VS Code will mention this:</p> <p>An AI action named \"getUserColleagues\" was predicted but no handler was registered.</p> <p>In this use case, I've focused both prompt and functions on the user. I tried to do the same with the colleague but I met some issues from the LLM to understand my queries.</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#azure-openai-api-preview-version","title":"Azure OpenAI API preview version","text":"<p>When using a model deployment, you're referring to a version ('2023-07-01-preview', '2023-12-01-preview', '2024-02-01'...). Each new version contains new parameters, new features.</p> <p>As Microsoft publish new preview versions each month, they also retire \"old\" ones. So be careful if you're using preview versions, you could receive an email from Microsoft, warning you that old ones will be retired:</p> <p></p> <p>More info regarding API version deprecation here</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#personal-feedback","title":"Personal feedback","text":"<p>During my tests, at first I found that the <code>monologue</code> augmentation was the best for my use case. But then I realized that the <code>sequence</code> one could benefit from the completion feature which can provide answers if we give it context variables needed to perform actions. Useful if you require info that doesn't need to be queried.</p> <p>As I'm not a prompt expert neither an LLM or a Teams AI one, I've probably missed some key points on how to leverage the library as its best. But I'm really surprised how far we can go with this library and I'm looking forward to other's feedback!</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#thats-it","title":"That's it","text":"<p>We've seen on the surface that Teams AI is a really powerful library but needs extra documentation beyond available samples. Below some personal expectations regarding new features:</p> <ul> <li>Support of stream mode (even if not part of Teams Client natively): https://github.com/microsoft/teams-ai/issues/185</li> <li>Native support of text-to-image &amp; image-to-text models, such as Dall-E</li> <li>OpenAI spec support as additional augmentation</li> </ul> <p>I hope that you've found in this article some additional info that will help you in your Teams AI journey. Feel free to reach out on Twitter or directly in the sample repo if there's something you'd like to fix / improve / add.</p> <p>Happy coding!</p>"},{"location":"articles/20240327-getting-started-with-teams-ai/#useful-links","title":"Useful Links","text":"<ul> <li>Teams AI library overview</li> <li>Teams AI Getting started</li> <li>Teams Toolkit cloud resources provisioning</li> <li>Teams Toolkit - Update Microsoft Entra manifest</li> <li>Azure OpenAI Service quotas and limits</li> <li>LLM Visualization</li> </ul>"},{"location":"tips/20200213-csom-test-file-folder-existence/","title":"[CSOM] Test in your C# code if a SharePoint File or Folder exists","text":""},{"location":"tips/20200213-csom-test-file-folder-existence/#a-simple-use-case","title":"A Simple Use Case","text":"<p>When you want to know if a file or folder already exists on a SharePoint Site (in a migration use case for example, before perform a copy / move), you can have some bad surprises.</p> <p>Let's try with a simple folder case example.</p> <pre><code>string userName = \"user@tenant.onmicrosoft.com\";\nSecureString securePassword = new SecureString();\nforeach (var cc in \"yourPlainTextPassword\")\n{\n    securePassword.AppendChar(cc);\n}\n\nusing (ClientContext spContext = new ClientContext(\"SharePointSiteUrl\"))\n{\n    spContext.Credentials = new SharePointOnlineCredentials(userName, securePassword);\n    spContext.ExecuteQuery();\n\n    Web currentWeb = spContext.Web;\n    List docLibrary = currentWeb.Lists.GetByTitle(\"Documents\");\n    spContext.Load(docLibrary);\n    spContext.Load(docLibrary.RootFolder);\n    spContext.ExecuteQuery();\n\n    string folderPath = docLibrary.RootFolder.ServerRelativeUrl + \"/MyFolderThatDoesNotExists\";\n\n    Folder folderToGet = currentWeb.GetFolderByServerRelativeUrl(folderPath);\n    spContext.Load(folderToGet, f =&gt; f.Exists);\n\n    try\n    {\n        spContext.ExecuteQuery();\n\n        if (folderToGet.Exists)\n        {\n            // Do something\n        }\n        else\n        {\n            // Do something else\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n}\n</code></pre> <p>The twisted thing here's that the <code>if (folderToGet.Exists)</code> line won't be reached. Because if you use the \"GetFolderByServerRelativeUrl\" and the folder actually doesn't exists (or any parent folder in the hierarchy), it'll throw an exception. But if it exists, then you'll be able to test the value of <code>folderToGet.Exists</code> property (which obviously will return <code>true</code>). Clever.</p> <p>So you want to test if a folder exists but without to constantly catch the error... Good news : the SharePointPnPCoreOnline Package implements this ! Let's try it :</p> <pre><code>// Credentials declaration like above\n...\nusing (ClientContext spContext = new ClientContext(\"SharePointSiteUrl\"))\n{\n    // Connection like above\n    ...\n\n    string folderPath = docLibrary.RootFolder.ServerRelativeUrl + \"/MyFileThatDoesNotExists\";\n\n    bool exists = currentWeb.DoesFolderExists(folderPath);\n\n    if (exists)\n    {\n        // Do something\n    }\n    else\n    {\n        // Do something else\n    }\n}\n</code></pre> <p>And that's it ! The <code>DoesFolderExists</code> Method provides this test. And it also works with folder hierarchy containing special characters \ud83d\ude09.</p> <p>For testing the existance of a file, there's not any equivalent. So if you try to get a file that doesn't exists :</p> <pre><code>// Credentials declaration like above\n...\n\nusing (ClientContext spContext = new ClientContext(\"SharePointSiteUrl\"))\n{\n    // Connection like above\n    ...\n\n    string filePath = docLibrary.RootFolder.ServerRelativeUrl + \"/MyFileThatDoesNotExists\";\n\n    File fileToGet = currentWeb.GetFileByServerRelativeUrl(filePath);\n    spContext.Load(fileToGet, f =&gt; f.Exists);\n\n    try\n    {\n        spContext.ExecuteQuery();\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n}\n</code></pre> <p>It'll also throw an exception.</p> <p>So the thing here is to use the <code>GetFileByServerRelativePath</code> method which returns a File object, whether it exists or not. And there : the \"Exists\" property can be used. The great thing about this method is that it also works if you file (or your folder hierarchy) contains special characters:</p> <pre><code>// Credentials declaration like above\n...\n\nusing (ClientContext spContext = new ClientContext(\"SharePointSiteUrl\"))\n{\n    // Connection like above\n    ...\n\n    string filePath = docLibrary.RootFolder.ServerRelativeUrl + \"/# My Tricky File \u00fch\u00fch\u00fc.docx\";\n\n    File fileToGet = currentWeb.GetFileByServerRelativePath(ResourcePath.FromDecodedUrl(filePath));\n    spContext.Load(fileToGet, f =&gt; f.Exists);\n\n    try\n    {\n        spContext.ExecuteQuery();\n\n        if (fileToGet.Exists)\n        {\n            // Do something\n        }\n        else\n        {\n            // Do something else\n        }\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n}\n</code></pre>"},{"location":"tips/20200213-csom-test-file-folder-existence/#bonus-using-the-windows-credential-manager","title":"Bonus : Using the Windows Credential Manager","text":"<p>For Windows users, if you don't want to always write your credentials and if you already know the Add/Get-PnPStoredCredential cmdlets, you might be interested to use the CredentialManager class provided by the Adys Tech company. You can fin the Nugget package here.</p> <p>Then, when referencing it, you just have to use it like this:</p> <pre><code>var cred = CredentialManager.GetCredentials(\"PnPPS:CredentialsName\");\nstring user = cred.UserName;\nSecureString pwd = cred.SecurePassword;\n</code></pre>"},{"location":"tips/20200213-csom-test-file-folder-existence/#useful-links","title":"Useful Links","text":"<ul> <li>FileFolderExtensions.DoesFolderExists from SharePoint Online PnP Core</li> <li>Supporting % and # in files and folders with the ResourcePath API</li> </ul>"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/","title":"[SPFx] Transform the Fluent UI ProgressIndicator  component into a countdown timer","text":"<p>Info</p> <p>As you know, the well-know Office UI Fabric front-end infrastructure has been renamed as Fluent UI ! (more info here)</p> <p>Recently, I had to develop a certification exam with SPFx. One of the features was to provide a countdown within the questions. As I'm familiar with React and the Fluent UI components, I was wondering if it was possible to reuse the ProgressIndicator component and set it up in reverse mode.</p> <p>So here we go !</p>"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#existing-sample","title":"Existing sample","text":"<p>First, let's have a look at the sample provided here.</p> <pre><code>import * as React from 'react';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\n\nexport interface IProgressIndicatorBasicExampleState {\n  percentComplete: number;\n}\n\nconst INTERVAL_DELAY = 100;\nconst INTERVAL_INCREMENT = 0.01;\nconst RESTART_WAIT_TIME = 2000;\n\nexport class ProgressIndicatorBasicExample extends React.Component&lt;{}, IProgressIndicatorBasicExampleState&gt; {\n  private _interval: number;\n  private _async: Async;\n\n  constructor(props: {}) {\n    super(props);\n\n    this._async = new Async(this);\n\n    this.state = {\n      percentComplete: 0,\n    };\n    this._startProgressDemo = this._startProgressDemo.bind(this);\n  }\n\n  public componentDidMount(): void {\n    this._startProgressDemo();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { percentComplete } = this.state;\n\n    return (\n      &lt;ProgressIndicator\n        label=\"Example title\"\n        description=\"Example description\"\n        percentComplete={percentComplete} /&gt;\n    );\n  }\n\n  private _startProgressDemo(): void {\n    // reset the demo\n    this.setState({\n      percentComplete: 0,\n    });\n\n    // update progress\n    this._interval = this._async.setInterval(() =&gt; {\n      let percentComplete = this.state.percentComplete + INTERVAL_INCREMENT;\n\n      // once complete, set the demo to start again\n      if (percentComplete &gt;= 1.0) {\n        percentComplete = 1.0;\n        this._async.clearInterval(this._interval);\n        this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\n      }\n      this.setState({\n        percentComplete: percentComplete,\n      });\n    }, INTERVAL_DELAY);\n  }\n}\n</code></pre> <p>This code gives this behavior:</p> <p></p>"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#countdown-mode","title":"Countdown mode","text":"<p>Now, let's reverse the process. Let's say that you want your countdown set to 30 seconds. You can replace the const variable <code>INTERVAL_INCREMENT</code> (which won't be used anymore) by <code>COUNTDOWN_DURATION</code>. For this demo, the duration will be in milliseconds.</p> <pre><code>import * as React from 'react';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\n\nexport interface IProgressIndicatorBasicExampleState {\n  percentComplete: number;\n}\n\nconst INTERVAL_DELAY = 100;\nconst COUNTDOWN_DURATION = 30000;\nconst RESTART_WAIT_TIME = 2000;\n//...\n</code></pre> <p>Then, you can set the <code>percentComplete</code> state to 1 in the constructor (remember that this variable is used as a parameter of the component, which goes from 0 to 1). So that the initial state of the Indicator is 1.</p> <pre><code>//...\nexport class ProgressIndicatorBasicExample extends React.Component&lt;{}, IProgressIndicatorBasicExampleState&gt; {\n  private _interval: number;\n  private _async: Async;\n\n  constructor(props: {}) {\n    super(props);\n\n    this._async = new Async(this);\n\n    this.state = {\n      percentComplete: 1, // --&gt; initial state\n    };\n    this._startProgressDemo = this._startProgressDemo.bind(this);\n  }\n  //...\n}\n</code></pre> <p>In the method called when the component is mounted, make the same update.</p> <pre><code>//...\n private _startProgressDemo(): void {\n    // reset the demo\n    this.setState({\n      percentComplete: 1,\n    });\n//...\n }\n</code></pre> <p>Now comes the tricky part. When you want to properly decrease the progress indicator, you have to calculate the value to decrease from 1 (the initial state, remember ?). This depends on the delay of the countdown. You can add this variable as a private member of the component.</p> <pre><code>//...\nexport class ProgressIndicatorBasicExample extends React.Component&lt;{}, IProgressIndicatorBasicExampleState&gt; {\n  private _interval: number;\n  private _async: Async;\n  // value = [initial state of ProgressIndicator] / [countdown duration in milliseconds] / [interval of refresh in milliseconds]\n  private _intervalDecrement: number = 1 / COUNTDOWN_DURATION / INTERVAL_DELAY;\n  //...\n}\n</code></pre> <p>We want now to calculate the remaining time of the countdown, to refresh the progress indicator component.</p> <pre><code>//...\nthis._interval = this._async.setInterval(() =&gt; {\n    let percentComplete = this.state.percentComplete - this._intervalDecrement;\n\n    // once 0 reached, set the demo to start again\n    if (percentComplete &lt;= 0) {\n    this._async.clearInterval(this._interval);\n    this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\n    }\n\n    this.setState({\n    percentComplete: percentComplete,\n    });\n}, INTERVAL_DELAY)\n</code></pre>"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#updated-code","title":"Updated code","text":"<p>So here is the complete updated code.</p> <pre><code>import * as React from 'react';\nimport { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\n\nexport interface IProgressIndicatorBasicExampleState {\n  percentComplete: number;\n}\n\nconst INTERVAL_DELAY = 100;\nconst COUNTDOWN_DURATION = 30000;\nconst RESTART_WAIT_TIME = 2000;\n\nexport class ProgressIndicatorBasicExample extends React.Component&lt;{}, IProgressIndicatorBasicExampleState&gt; {\n  private _interval: number;\n  private _async: Async;\n  // value = [initial state of ProgressIndicator] / ([countdown duration in milliseconds] / [interval of refresh in milliseconds])\n  private _intervalDecrement: number = 1 / (COUNTDOWN_DURATION / INTERVAL_DELAY);\n\n  constructor(props: {}) {\n    super(props);\n\n    this._async = new Async(this);\n\n    this.state = {\n      percentComplete: 1, // --&gt; initial state\n    };\n    this._startProgressDemo = this._startProgressDemo.bind(this);\n  }\n\n  public componentDidMount(): void {\n    this._startProgressDemo();\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n  }\n\n  public render(): JSX.Element {\n    const { percentComplete } = this.state;\n\n    return (\n      &lt;ProgressIndicator\n        label=\"Example title\"\n        description=\"Example description\"\n        percentComplete={percentComplete} /&gt;\n    );\n  }\n\n  private _startProgressDemo(): void {\n    // reset the demo\n    this.setState({\n      percentComplete: 1,\n    });\n\n    this._interval = this._async.setInterval(() =&gt; {\n      let percentComplete = this.state.percentComplete - this._intervalDecrement;\n\n      // once 0 reached, set the demo to start again\n      if (percentComplete &lt;= 0) {\n        this._async.clearInterval(this._interval);\n        this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\n      }\n\n      this.setState({\n        percentComplete: percentComplete,\n      });\n    }, INTERVAL_DELAY)\n  }\n}\n</code></pre> <p>And that's it! You can find the Codepen example here.</p>"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#furthermore","title":"Furthermore","text":"<p>If you want this control to be reset (for example from a question to another in a session exam), you can turn it into a fully uncontrolled component using a <code>key</code>!</p> <p>You can also add some text to display the remaining time like this:</p> <pre><code>//...\nconstructor(props) {\n    super(props);\n\n    this._async = new Async(this);\n\n    this.state = {\n      percentComplete: 1,\n      timeLeft: COUNTDOWN_DURATION, // --&gt; init timeleft to 30 seconds\n    };\n  }\n//...\n</code></pre> <pre><code>public render(): JSX.Element {\n    const { percentComplete } = this.state;\n\n    return (\n        &lt;ProgressIndicator\n            label={`Remaining time : ${this.state.timeLeft &gt; 0 ? Math.floor(this.state.timeLeft / 1000) : 0} seconds`}\n            percentComplete={percentComplete} /&gt;\n    );\n  }\n</code></pre> <pre><code>//...\nprivate _startProgressDemo(): void {\n    // reset the demo\n    this.setState({\n      percentComplete: 1,\n      timeLeft: COUNTDOWN_DURATION,\n    });\n\n    this._interval = this._async.setInterval(() =&gt; {\n      let percentComplete = this.state.percentComplete - this._intervalDecrement;\n      let remainingTime = this.state.timeLeft - INTERVAL_DELAY; // --&gt; update the remaining time\n\n      // once 0 reached, set the demo to start again\n      if (percentComplete &lt;= 0) {\n        this._async.clearInterval(this._interval);\n        this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\n      }\n\n      this.setState({\n        percentComplete: percentComplete,\n        timeLeft: remainingTime,\n      });\n    }, INTERVAL_DELAY)\n}\n</code></pre> <p>Here's the result:</p> <p></p> <p>You could change the color of the progress indicator component regarding the remaining time and so on... Use your imagination \ud83d\ude09</p> <p>Happy coding!</p> <p>(Thanks to Charlie B for its help)</p>"},{"location":"tips/20201204-spfx-breadcrumb-to-step-indicator/","title":"[SPFx] Transform the Fluent UI Breadcrumb component into a step indicator","text":"<p>As I was developing an SPA with a business workflow, I was wondering how to show customers the progression of their requests and how many steps left before the end.</p> <p>So I've been thinking about customizing the Breadcrumb component which is quite flexible to covert my needs.</p>"},{"location":"tips/20201204-spfx-breadcrumb-to-step-indicator/#existing-sample","title":"Existing sample","text":"<p>Below one of the examples provided in the component page:</p> <pre><code>import * as React from 'react';\nimport { Breadcrumb, IBreadcrumbItem, IDividerAsProps } from 'office-ui-fabric-react/lib/Breadcrumb';\nimport { Label, ILabelStyles } from 'office-ui-fabric-react/lib/Label';\nimport { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';\nimport { Icon } from 'office-ui-fabric-react/lib/Icon';\n\nconst labelStyles: Partial&lt;ILabelStyles&gt; = {\n  root: { margin: '10px 0', selectors: { '&amp;:not(:first-child)': { marginTop: 24 } } },\n};\n\nconst itemsWithHeading: IBreadcrumbItem[] = [\n  { text: 'Files', key: 'Files', onClick: _onBreadcrumbItemClicked },\n  { text: 'Folder 1', key: 'd1', onClick: _onBreadcrumbItemClicked },\n  // Generally, only the last item should ever be a heading.\n  // It would typically be h1 or h2, but we're using h4 here to better fit the structure of the page.\n  { text: 'Folder 2', key: 'd2', isCurrentItem: true, as: 'h4' },\n];\n\nexport const BreadcrumbBasicExample: React.FunctionComponent = () =&gt; {\n  return (\n    &lt;div&gt;\n      // Other examples\n\n      &lt;Label styles={labelStyles}&gt;With custom rendered divider and overflow icon&lt;/Label&gt;\n      &lt;Breadcrumb\n        items={itemsWithHeading}\n        maxDisplayedItems={3}\n        ariaLabel=\"With custom rendered divider and overflow icon\"\n        dividerAs={_getCustomDivider}\n        onRenderOverflowIcon={_getCustomOverflowIcon}\n        overflowAriaLabel=\"More links\"\n      /&gt;\n    &lt;/div&gt;\n  );\n};\n\nfunction _onBreadcrumbItemClicked(ev: React.MouseEvent&lt;HTMLElement&gt;, item: IBreadcrumbItem): void {\n  console.log(`Breadcrumb item with key \"${item.key}\" has been clicked.`);\n}\n\nfunction _getCustomDivider(dividerProps: IDividerAsProps): JSX.Element {\n  const tooltipText = dividerProps.item ? dividerProps.item.text : '';\n  return (\n    &lt;TooltipHost content={`Show ${tooltipText} contents`} calloutProps={{ gapSpace: 0 }}&gt;\n      &lt;span aria-hidden=\"true\" style={{ cursor: 'pointer', padding: 5 }}&gt;\n        /\n      &lt;/span&gt;\n    &lt;/TooltipHost&gt;\n  );\n}\n\nfunction _getCustomOverflowIcon(): JSX.Element {\n  return &lt;Icon iconName={'ChevronDown'} /&gt;;\n}\n</code></pre> <p>In this example, we saw that there is a specific separator and a selected item.</p> <p></p> <p>Now, let's see what can we do to improve this display.</p>"},{"location":"tips/20201204-spfx-breadcrumb-to-step-indicator/#step-indicator-mode","title":"Step indicator mode","text":"<p>The first thing here is to setup the component as stateless.</p> <p>No... The first thing is to upgrade your SPFx solution to use Fluent UI library instead of Office UI Fabric.</p> <p>So execute <code>npm i @fluentui/react</code>, then execute <code>npm uninstall office-ui-fabric-react</code>.</p> <p>Now, we can work on our component \ud83d\ude01</p> <p>Just start by adding a folder called \"StepIndicator\", in which you'll register a stateless component and a Sass module, both called \"StepIndicator\".</p> <p>In the tsx file, declare these props :</p> StepIndicator.tsx <pre><code>import * as React from 'react';\nimport styles from './StepIndicator.module.scss';\nimport { IBreadcrumbItem } from '@fluentui/react';\n\nexport interface IStepIndicatorProps {\n  currentStep: number;\n  stepBreadcrumbItems: IBreadcrumbItem[];\n}\n\nexport default class StepIndicator extends React.Component&lt;IStepIndicatorProps&gt; {\n    // ...\n}\n</code></pre> <p>Like this, you can provide all the steps, including the reached one, in you process.</p> <p>Now, we add two render methods that will manage the display of:</p> <ol> <li>Steps (<code>renderBreadcrumbItem</code>)</li> <li>Separators / dividers (<code>renderBreadcrumbDivider</code>)</li> </ol> StepIndicator.tsx <pre><code>import * as React from 'react';\nimport styles from './StepIndicator.module.scss';\nimport {\n  Stack, Breadcrumb, IBreadcrumbItem,\n  Label, IDividerAsProps\n} from '@fluentui/react';\n\nexport interface IStepIndicatorProps {\n  currentStep: number;\n  stepBreadcrumbItems: IBreadcrumbItem[];\n}\n\nexport default class StepIndicator extends React.Component&lt;IStepIndicatorProps&gt; {\n\n  public render(): React.ReactElement&lt;IStepIndicatorProps&gt; {\n    return (\n      &lt;div&gt;\n        {/*\n          TODO : Add Breadcrumb here\n        */}\n      &lt;/div&gt;\n    );\n  }\n\n  private renderBreadcrumbItem = (item: IBreadcrumbItem) =&gt; {\n    let stepClassName = styles.step;\n    let currentItemIndex = this.props.stepBreadcrumbItems.indexOf(item);\n    let isStepItemReached = currentItemIndex == this.props.currentStep;\n\n    // Adapt the display of step whether it was reached or not\n    if (currentItemIndex &lt;= this.props.currentStep) {\n      stepClassName = styles.stepvisited;\n    }\n\n    return (\n    &lt;Stack className={styles.breadcrumbitem}&gt;\n      &lt;Label className={stepClassName}&gt;{this.props.stepBreadcrumbItems.indexOf(item) + 1}&lt;/Label&gt;\n      &lt;Label className={isStepItemReached ? styles.statuscurrent : styles.status}&gt;{item.text}&lt;/Label&gt;\n    &lt;/Stack&gt;);\n  }\n\n  private renderBreadcrumbDivider = (dividerProps: IDividerAsProps) =&gt; {\n    let separatorClassName = styles.separator;\n    let currentItemIndex = this.props.stepBreadcrumbItems.indexOf(dividerProps.item);\n\n    // Change the color of the separator, if current step is reached\n    if (currentItemIndex &lt; this.props.currentStep) {\n      separatorClassName = styles.separatorvisited;\n    }\n\n    return &lt;div className={separatorClassName}&gt;&lt;/div&gt;;\n  }\n}\n</code></pre> <p>Now, we want to setup styles correctly, following the breadcrumb customizations.</p> StepIndicator.module.scss <pre><code>/* /!\\ update the reference to use Fluent UI or you'll get an error */\n@import '~@fluentui/react/dist/sass/References.scss';\n\n$bg-color-unreached: $ms-color-themeLight;\n$bg-color-reached: $ms-color-themePrimary;\n$font-color-reached: #ffffff;\n\n.stepindicator {\n\n  /* Style of a step (number and text) */\n  .breadcrumbitem {\n    width: 150px;\n    padding: 0px 10px;\n\n    /* Style of the text displayed below the step, reached or not */\n    .status {\n      text-align: center;\n      font-size: 0.7rem;\n      white-space: pre-line;\n      min-height: 40px;\n\n      &amp;current {\n        @extend .status;\n        margin-left: -5px;\n        font-weight: bold;\n      }\n    }\n\n    /*\n        Style of the step 'icon' (number)\n        Here, it's displayed as a circle\n    */\n    .step {\n      border-radius: 50%;\n      height: 26px;\n      width: 26px;\n      line-height: 26px;\n      font-size: 1rem;\n      text-align: center;\n      padding: 0px;\n      left: 40%;\n      position: relative;\n      background-color: $bg-color-unreached;\n      z-index: 1;\n\n      &amp;visited {\n        @extend .step;\n        color: $font-color-reached;\n        background-color: $bg-color-reached;\n      }\n    }\n  }\n\n  /* Style of the divider */\n  .separator {\n    display: inline-block;\n    position: absolute;\n    content: '';\n    height: 4px;\n    width: 95%;\n    top: 17%;\n    left: 55%;\n    background-color: $bg-color-unreached;\n\n    &amp;visited {\n      @extend .separator;\n      background-color: $bg-color-reached;\n    }\n  }\n}\n</code></pre> <p>After that, we just have to reference the <code>Breadcrumb</code> component which will use our declared methods and styling</p> StepIndicator.tsx <pre><code>import * as React from 'react';\nimport styles from './StepIndicator.module.scss';\nimport {\n  Stack, Breadcrumb, IBreadcrumbItem, Label,\n  IDividerAsProps, IBreadcrumbData\n} from '@fluentui/react';\n\n// ...\n\nexport default class StepIndicator extends React.Component&lt;IStepIndicatorProps&gt; {\n\n  public render(): React.ReactElement&lt;IStepIndicatorProps&gt; {\n    return (\n      &lt;Stack className={styles.stepindicator} horizontalAlign=\"center\"&gt;\n        &lt;Breadcrumb\n          onReduceData={this._reduceBreadcrumbData}\n          onRenderItem={this._renderBreadcrumbItem}\n          dividerAs={this._renderBreadcrumbDivider}\n          items={this.props.stepBreadcrumbItems} /&gt;\n      &lt;/Stack&gt;\n    );\n  }\n\n  private _reduceBreadcrumbData = (data: IBreadcrumbData) =&gt; {\n    return undefined;\n  }\n\n  // ...\n}\n</code></pre> <p>For this sample, I set the <code>onReduceData</code> to not shrink the component because I want to show every step.</p>"},{"location":"tips/20201204-spfx-breadcrumb-to-step-indicator/#full-sample","title":"Full sample","text":"<p>So here is the complete sample.</p> HelloWorld.tsx <pre><code>import { Dropdown, IDropdownOption, Stack } from '@fluentui/react';\nimport * as React from 'react';\nimport StepIndicator from '../StepIndicator';\nimport styles from './HelloWorld.module.scss';\nimport { IHelloWorldProps } from './IHelloWorldProps';\n\ninterface IHelloWorldState {\n  selectedStatusIndex: number;\n}\n\nexport default class HelloWorld extends React.Component&lt;IHelloWorldProps, IHelloWorldState&gt; {\n  public constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedStatusIndex: 0,\n    };\n  }\n\n  // For this example, I'll use this property for both Breadcrumb items and DropDown options\n  private _steps: any[] = [\n    {\n      key: 'init',\n      text: 'Create purchase order'\n    },\n    {\n      key: 'select',\n      text: 'Analyze &amp; select vendor'\n    },\n    {\n      key: 'negociate',\n      text: 'Negociate contract'\n    },\n    {\n      key: 'pay',\n      text: 'Authorize &amp; pay vendor'\n    },\n    {\n      key: 'end',\n      text: 'Done'\n    }\n  ];\n\n  public render(): React.ReactElement&lt;IHelloWorldProps&gt; {\n    return (\n      &lt;div className={ styles.helloWorld }&gt;\n        &lt;div className={ styles.container }&gt;\n          &lt;div className={ styles.row }&gt;\n            &lt;div className={ styles.column }&gt;\n              &lt;span className={ styles.title }&gt;Welcome to SharePoint!&lt;/span&gt;\n              &lt;p className={ styles.subTitle }&gt;Customize SharePoint experiences using Web Parts.&lt;/p&gt;\n              &lt;p className={ styles.description }&gt;{escape(this.props.description)}&lt;/p&gt;\n              &lt;a href=\"https://aka.ms/spfx\" className={ styles.button }&gt;\n                &lt;span className={ styles.label }&gt;Learn more&lt;/span&gt;\n              &lt;/a&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n          &lt;Stack tokens={{padding: '10px'}}&gt;\n            &lt;StepIndicator currentStep={this.state.selectedStatusIndex} stepBreadcrumbItems={this._steps} /&gt;\n          &lt;/Stack&gt;\n          &lt;Stack tokens={{padding: '10px', maxWidth: '300px'}}&gt;\n            &lt;Dropdown label=\"Select process step\" options={this._steps} defaultSelectedKey='init' onChange={this._dropDownStepOnChange} /&gt;\n          &lt;/Stack&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  private _dropDownStepOnChange = (event: React.FormEvent&lt;HTMLDivElement&gt;, option?: IDropdownOption, index?: number) =&gt; {\n    this.setState({\n      selectedStatusIndex: index,\n    });\n  }\n}\n</code></pre> StepIndicator.tsx <pre><code>import * as React from 'react';\nimport styles from './StepIndicator.module.scss';\nimport {\n  Stack, Breadcrumb, IBreadcrumbItem, Label,\n  IDividerAsProps, IBreadcrumbData\n} from '@fluentui/react';\n\nexport interface IStepIndicatorProps {\n  currentStep: number;\n  stepBreadcrumbItems: IBreadcrumbItem[];\n}\n\nexport default class StepIndicator extends React.Component&lt;IStepIndicatorProps&gt; {\n\n  public render(): React.ReactElement&lt;IStepIndicatorProps&gt; {\n    return (\n      &lt;Stack className={styles.stepindicator} horizontalAlign=\"center\"&gt;\n        &lt;Breadcrumb\n          onReduceData={this._reduceBreadcrumbData}\n          onRenderItem={this._renderBreadcrumbItem}\n          dividerAs={this._renderBreadcrumbDivider}\n          items={this.props.stepBreadcrumbItems} /&gt;\n      &lt;/Stack&gt;\n    );\n  }\n\n  private _reduceBreadcrumbData = (data: IBreadcrumbData) =&gt; {\n    return undefined;\n  }\n\n  private _renderBreadcrumbItem = (item: IBreadcrumbItem) =&gt; {\n    let stepClassName = styles.step;\n    let currentItemIndex = this.props.stepBreadcrumbItems.indexOf(item);\n    let isStepItemReached = currentItemIndex == this.props.currentStep;\n\n    if (currentItemIndex &lt;= this.props.currentStep) {\n      stepClassName = styles.stepvisited;\n    }\n\n    return (\n    &lt;Stack className={styles.breadcrumbitem}&gt;\n      &lt;Label className={stepClassName}&gt;{this.props.stepBreadcrumbItems.indexOf(item) + 1}&lt;/Label&gt;\n      &lt;Label className={isStepItemReached ? styles.statuscurrent : styles.status}&gt;{item.text}&lt;/Label&gt;\n    &lt;/Stack&gt;);\n  }\n\n  private _renderBreadcrumbDivider = (dividerProps: IDividerAsProps) =&gt; {\n    let separatorClassName = styles.separator;\n    let currentItemIndex = this.props.stepBreadcrumbItems.indexOf(dividerProps.item);\n\n    if (currentItemIndex &lt; this.props.currentStep) {\n      separatorClassName = styles.separatorvisited;\n    }\n\n    return &lt;div className={separatorClassName}&gt;&lt;/div&gt;;\n  }\n}\n</code></pre> StepIndicator.module.scss <pre><code>/* /!\\ update the reference to use Fluent UI or you'll get an error */\n@import '~@fluentui/react/dist/sass/References.scss';\n\n$bg-color-unreached: $ms-color-themeLight;\n$bg-color-reached: $ms-color-themePrimary;\n$font-color-reached: #ffffff;\n\n.stepindicator {\n\n  /* Style of a step (number and text) */\n  .breadcrumbitem {\n    width: 150px;\n    padding: 0px 10px;\n\n    /* Style of the text displayed below the step, reached or not */\n    .status {\n      text-align: center;\n      font-size: 0.7rem;\n      white-space: pre-line;\n      min-height: 40px;\n\n      &amp;current {\n        @extend .status;\n        margin-left: -5px;\n        font-weight: bold;\n      }\n    }\n\n    /*\n        Style of the step 'icon' (number)\n        Here, it's displayed as a circle\n    */\n    .step {\n      border-radius: 50%;\n      height: 26px;\n      width: 26px;\n      line-height: 26px;\n      font-size: 1rem;\n      text-align: center;\n      padding: 0px;\n      left: 40%;\n      position: relative;\n      background-color: $bg-color-unreached;\n      z-index: 1;\n\n      &amp;visited {\n        @extend .step;\n        color: $font-color-reached;\n        background-color: $bg-color-reached;\n      }\n    }\n  }\n\n  /* Style of the divider */\n  .separator {\n    display: inline-block;\n    position: absolute;\n    content: '';\n    height: 4px;\n    width: 95%;\n    top: 17%;\n    left: 55%;\n    background-color: $bg-color-unreached;\n\n    &amp;visited {\n      @extend .separator;\n      background-color: $bg-color-reached;\n    }\n  }\n}\n</code></pre> <p>And the result:</p> <p></p> <p>Happy coding !</p>"},{"location":"tips/20210302-spfx-api-permissions/","title":"[SPFx] Init API permissions for your SPFx projects without deploying them","text":"<p>When developing your SPFx components, you usually first run them locally before deploying them (really ?).</p> <p>And then comes the time to work with API such as Microsoft Graph.</p> <p>If you never use those permissions before in your SPFx projects (and the tenant with which you're working), you realize that you have to:</p> <ul> <li>Add required API permissions in your <code>package-solution.json</code> file</li> <li>Bundle / Ship your project</li> <li>Publish it</li> <li>Go to the SharePoint Admin Center Web API Permissions page</li> <li>Approve those permissions</li> </ul> <p>All of this, just to play with the API as you didn't plan to release your package in a production environment.</p> <p>So what if you could bypass all these steps for both Graph and owned API?</p> <p>Important</p> <p>This trick is just for development purposes. In Production environment, you should update your <code>package-solution.json</code> file to add required permissions and allow them (or ask for validation) in the API access page.</p>"},{"location":"tips/20210302-spfx-api-permissions/#prerequisites","title":"Prerequisites","text":"<ol> <li>An Office 365 (Dev) Tenant or a Partner Demo Tenant</li> <li>The following Azure AD role at least<ul> <li>Application Administrator</li> </ul> </li> </ol>"},{"location":"tips/20210302-spfx-api-permissions/#with-graph-api","title":"With Graph API","text":"<p>First, we're going to play with Graph API through the Microsoft Graph Toolkit.</p>"},{"location":"tips/20210302-spfx-api-permissions/#prepare-your-sample","title":"Prepare your sample","text":"<p>Init a SPFx project (WebPart one with React, let's call it HelloApi), then add the Microsoft Graph Toolkit by executing <code>npm i @microsoft/mgt @microsoft/mgt-react</code> from the project's root path.</p> <p>Once done, open your main component file (let's say here HelloApi.tsx) and add the <code>PeoplePicker</code> component like this:</p> HelloApi.tsx <pre><code>import * as React from 'react';\nimport styles from './HelloApi.module.scss';\nimport { IHelloApiProps } from './IHelloApiProps';\nimport { escape } from '@microsoft/sp-lodash-subset';\nimport { PeoplePicker } from '@microsoft/mgt-react';\n\nexport default class HelloApi extends React.Component&lt;IHelloApiProps, {}&gt; {\n  public render(): React.ReactElement&lt;IHelloApiProps&gt; {\n    return (\n      &lt;div className={ styles.HelloApi }&gt;\n        &lt;div className={ styles.container }&gt;\n          &lt;div className={ styles.row }&gt;\n            &lt;div className={ styles.column }&gt;\n              &lt;span className={ styles.title }&gt;Welcome to SharePoint!&lt;/span&gt;\n              &lt;p className={ styles.subTitle }&gt;Customize SharePoint experiences using Web Parts.&lt;/p&gt;\n              &lt;p className={ styles.description }&gt;{escape(this.props.description)}&lt;/p&gt;\n              &lt;a href=\"https://aka.ms/spfx\" className={ styles.button }&gt;\n                &lt;span className={ styles.label }&gt;Learn more&lt;/span&gt;\n              &lt;/a&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;PeoplePicker /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>"},{"location":"tips/20210302-spfx-api-permissions/#run-it-in-remote-workbench","title":"Run it in remote workbench","text":"<p>Now run your sample with <code>gulp serve</code> and display your webpart in your remote workbench (https://contoso.sharepoint.com/_layouts/15/workbench.aspx). Try to use the <code>PeoplePicker</code> component: you'll see that just by clicking on the search box, you'll get We didn't find any matches.</p> <p></p> <p>Display your developer toolbox (F12) and go to the browser console, you should see the following error:</p> <p></p> <p>As you can see, it's a 403 error, which is well-known when using Graph API endpoints that have not been allowed on the first place.</p>"},{"location":"tips/20210302-spfx-api-permissions/#add-graph-api-through-ui","title":"Add Graph API through UI","text":"<p>From the Azure portal, display the Azure Active Directory (AAD), then select the App Registration menu and select All Applications, then click on SharePoint Online Client Extensibility Web Application Principal. It's the AAD Application that holds the connection to the API (Microsoft and others) from SharePoint (SPFx or every other development) using the Implicit Flow.</p> <p>Once here, click on Add a permission, then select Microsoft Graph and add the [People.Read] Graph API delegated permission (you can type the name of the permission in the available search box to get it easily).</p> <p></p> <p>Once added, grant it by clicking on Grant admin consent for contoso.</p> <p>If you go in the API access page (https://contoso-admin.sharepoint.com/_layouts/15/online/AdminHome.aspx#/webApiPermissionManagement), you should see something like this:</p> <p> (other Graph API permissions displayed here won't be necessary for the sample)</p> <p>Warning</p> <p>It can take a couple of minutes before consented permissions is effective, so don't be surprised if it's not working right away after approval.</p>"},{"location":"tips/20210302-spfx-api-permissions/#add-graph-api-through-cli-for-microsoft-365","title":"Add Graph API through CLI for Microsoft 365","text":"<pre><code>m365 login # Don't execute that command if you're already connected\nm365 spo serviceprincipal grant add --resource 'Microsoft Graph' --scope 'People.Read'\n</code></pre> <p>Info</p> <p>Don't be surprised if by that way, the permission appears in the \"Other permissions granted for [your tenant]\": it won't prevent your SPFx solution to work.</p>"},{"location":"tips/20210302-spfx-api-permissions/#try-again","title":"Try again","text":"<p>Now try to use the <code>PeoplePicker</code> component again: you'll see that with the addition of the Graph API permission, you should be able to use that component!</p> <p></p>"},{"location":"tips/20210302-spfx-api-permissions/#with-custom-api","title":"With custom API","text":"<p>When using a custom API, it's a little bit more tricky but easy to handle anyway.</p> <p>You can follow this Microsoft article until the \"Deploy the solution\" part.</p> <p>Instead of bundling and shipping, we'll add the AAD App (called contoso-api-dp20200915 if we follow the mentioned article) created from the Azure Function Authentication part in the SharePoint Service Principal.</p>"},{"location":"tips/20210302-spfx-api-permissions/#add-your-aad-application-to-the-sharepoint-service-principal","title":"Add your AAD Application to the SharePoint Service Principal","text":"<p>Display again the AAD page, then select the App Registration menu, select All Applications and click on SharePoint Online Client Extensibility Web Application Principal. Once here, click on Add a permission, then select the My APIs tab and select the fresh added AAD App created before. Select the user_impersonation permission, then confirm.</p> <p></p> <p>Finally, grant this permission by clicking on Grant admin consent for contoso.</p> <p>If you go again in the API access page, you should see something like this:</p> <p></p>"},{"location":"tips/20210302-spfx-api-permissions/#add-custom-api-through-cli-for-microsoft-365","title":"Add custom API through CLI for Microsoft 365","text":"<pre><code>m365 login # Don't execute that command if you're already connected\nm365 spo serviceprincipal grant add --resource 'contoso-api-dp20200915' --scope 'user_impersonation'\n</code></pre> <p>Info</p> <p>Don't be surprised if by that way, the permission appears in the \"Other permissions granted for [your tenant]\": it won't prevent your SPFx solution to work.</p> <p>Warning</p> <p>If you use an Azure Function as an API and enable Managed Identity for any reason, you better have to rename the linked AAD Application to give it a different name than both your Function and its Managed Identity. Otherwise, the command will try to find a scope on it instead of the AAD App and fail.</p>"},{"location":"tips/20210302-spfx-api-permissions/#updated-sample","title":"Updated sample","text":"<p>To run your custom API from your SPFx component, you can update your sample like below:</p> IHelloApiProps.tsHelloApiWebPart.tsHelloApi.tsx <pre><code>import { AadHttpClientFactory } from '@microsoft/sp-http';\n\nexport interface IHelloApiProps {\n  aadFactory: AadHttpClientFactory;\n  description: string;\n}\n</code></pre> <pre><code>// ...\nexport default class HelloApiWebPart extends BaseClientSideWebPart&lt;IHelloApiWebPartProps&gt; {\n\n    // ...\n\n    public render(): void {\n        const element: React.ReactElement&lt;IHelloApiProps&gt; = React.createElement(\n        HelloGraph,\n        {\n            description: this.properties.description,\n            aadFactory: this.context.aadHttpClientFactory,\n        }\n        );\n\n        ReactDom.render(element, this.domElement);\n    }\n\n  // ...\n}\n</code></pre> <pre><code>import * as React from 'react';\nimport styles from './HelloApi.module.scss';\nimport { IHelloApiProps } from './IHelloApiProps';\nimport { AadHttpClient, HttpClientResponse } from '@microsoft/sp-http';\n\ninterface IHelloApiState {\n  ordersToDisplay: any;\n}\n\nexport default class HelloApi extends React.Component&lt;IHelloApiProps, IHelloApiState&gt; {\n\npublic constructor(props) {\n    super(props);\n\n    this.state = {\n    ordersToDisplay: null\n    };\n}\n\npublic componentDidMount() {\n    this.props.aadFactory\n      .getClient('https://contoso-api-dp20191109.azurewebsites.net')\n      .then((client: AadHttpClient): void =&gt; {\n        client\n          .get('https://contoso-api-dp20191109.azurewebsites.net/api/Orders', AadHttpClient.configurations.v1)\n          .then((response: HttpClientResponse): Promise&lt;any&gt; =&gt; {\n            return response.json();\n          })\n          .then((orders: any): void =&gt; {\n            this.setState({\n              ordersToDisplay: orders\n            })\n          });\n      }).catch((err) =&gt; {\n        console.log(err);\n      });\n  }\n\n  public render(): React.ReactElement&lt;IHelloApiProps&gt; {\n    return (\n      &lt;div className={ styles.HelloApi }&gt;\n        &lt;div className={ styles.container }&gt;\n          &lt;div className={ styles.row }&gt;\n            &lt;div className={ styles.column }&gt;\n              &lt;span className={ styles.title }&gt;Welcome to SharePoint!&lt;/span&gt;\n              &lt;p className={ styles.subTitle }&gt;Customize SharePoint experiences using Web Parts.&lt;/p&gt;\n              &lt;p className={ styles.description }&gt;\n              &lt;ul&gt;\n                    {this.state.ordersToDisplay &amp;&amp;\n                        this.state.ordersToDisplay.map(o =&gt; {\n                            return &lt;li&gt;{o.rep}: {o.total}&lt;/li&gt;\n                        })\n                    }\n                &lt;/ul&gt;\n              &lt;/p&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre> <p>Now you can run your sample locally and try it in your hosted workbench, playing with it and updating your WebPart as you want!</p> <p>... And don't forget to update your <code>package-solution.json</code> file to include the required APIs before shipping! \ud83d\ude43</p> <p>Happy coding!</p>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/","title":"[Azure DevOps] Get default project administrators team members programmatically","text":"<p>When working on Projects organization in Azure DevOps (AzDO), you want to establish governance and maybe get some reporting data.</p> <p>Among all parameters available, you have some default ones such as the Project Administrator team, which is provided when you create a new project.</p> <p>If you didn't have the \"chance\" to work with AzDO API, it's not as fluent as some other Microsoft's API like Graph or Azure ones (and I'm not talking about the .NET Client Libraries for which PRs are still pending to provide updates on methods).</p> <p>And in that case, getting that default team's members requires some \"jumps\" from an API to another to get this info.</p> <p>Let's have a look about this! In this article, I'll show you how to get what you came for, with REST API and .NET Client Libraries.</p> <p>Important</p> <p>In this article, I'll focus on the online version of Azure DevOps (aka Services) not Server or TFS.</p>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#prerequisites","title":"Prerequisites","text":"<ol> <li>An AzDO organization (you can create one with any Microsoft account here), with at least one existing Project</li> <li>The following AzDO permission level at least</li> <li>member of the default project team which is available in the Project's settings, on the \"Teams\" page</li> <li>For querying the AzDO services using .NET Client Libraries, you'll need to create a Personal Access Token (PAT) with at least the following scopes:</li> <li>Graph: Read</li> <li>Identity: Read</li> <li>Member Entitlement Management: Read</li> <li>Project and Team: Read</li> </ol>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#querying-the-azdo-rest-api","title":"Querying the AzDO REST API","text":"<p>The first thing you have to know is that there's not one service / domain URL for the API. Below a short list of some URLs:</p> <ul> <li>https://dev.azure.com, if you want to query most of AzDO endpoints such as /_apis/git or /_apis/projects</li> <li>https://vsaex.dev.azure.com, if you want to query the Member Entitlement Management endpoints such as /_apis/groupentitlements</li> <li>https://vssps.dev.azure.com, if you want to query endpoints related to people / groups, like /_apis/identities or /_apis/graph/groups</li> <li>https://status.dev.azure.com, if you want to query the AzDO /_apis/status endpoint</li> </ul> <p>I couldn't find anything on the web about the meaning / reason why it's cut on pieces like this. My guess is that, depending on what you are querying, the info is on a server or another.</p> <p>So beware when you are jumping from an endpoint to another: you could face a 404 error page when the problem is just that the service / domain URL is not the right one.</p> <p>To get default project team members, we will proceed in the following order:</p> <ol> <li>Getting Project's ID</li> <li>Getting Project's scope descriptor value</li> <li>Getting Project's groups (with the scope descriptor value obtained before)</li> <li>Getting default Project Administrators members</li> </ol> <p>As all the queries will use the GET method, we'll use the browser (be sure to be authenticated in your AzDO Organization before).</p>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#project-id","title":"Project ID","text":"<p>that's the simpliest one (here the <code>{project_name}</code> would be \"My Project\"):</p> https://dev.azure.com/{org}/_apis/projects/{project_name} <pre><code>{\n  \"id\": \"40865cf2-d252-49dc-874f-294aa1d9ad9f\", // &lt;--- Take this id\n  \"name\": \"{project_name}\",\n  \"description\": \"Test project\",\n  \"url\": \"https://dev.azure.com/{org}/_apis/projects/40865cf2-d252-49dc-874f-294aa1d9ad9f\",\n  \"state\": \"wellFormed\",\n  \"revision\": 35,\n  \"_links\": {\n    \"self\": {\n      \"href\": \"https://dev.azure.com/{org}/_apis/projects/40865cf2-d252-49dc-874f-294aa1d9ad9f\"\n    },\n    \"collection\": {\n      \"href\": \"https://dev.azure.com/{org}/_apis/projectCollections/11321932-248d-4b22-a9ee-efddaaf6930e\"\n    },\n    \"web\": {\n      \"href\": \"https://dev.azure.com/{org}/{project_name}\"\n    }\n  },\n  \"visibility\": \"private\",\n  \"defaultTeam\": {\n    \"id\": \"50fb2515-f8e8-4c4f-b786-54bfdd17ebf0\",\n    \"name\": \"Test project Team\",\n    \"url\": \"https://dev.azure.com/{org}/_apis/projects/408*65cf2-d252-49dc-874f-294aa1d9ad9f/teams/50fb2515-f8e8-4c4f-b786-54bfdd17ebf0\"\n  },\n  \"lastUpdateTime\": \"2019-11-05T13:25:37.617Z\"\n}\n</code></pre>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#projects-scope-descriptor-value","title":"Project's scope descriptor value","text":"<p>Let's switch to another service (here the <code>{project_id}</code> would be \"40865cf2-d252-49dc-874f-294aa1d9ad9f\"):</p> https://vssps.dev.azure.com/{org}/_apis/graph/descriptors/{project_id} <pre><code>{\n  \"value\": \"scp.ODRiNmMwNjMtMTRiNS00ZGUyLWE4YjgtNmFmOWZmZDNiNjdm\", // &lt;--- Take this value\n  \"_links\": {\n    \"self\": {\n      \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Descriptors/{project_id}\"\n    },\n    \"storageKey\": {\n      \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/StorageKeys/scp.ODRiNmMwNjMtMTRiNS00ZGUyLWE4YjgtNmFmOWZmZDNiNjdm\"\n    },\n    \"subject\": {\n      \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Scopes/scp.ODRiNmMwNjMtMTRiNS00ZGUyLWE4YjgtNmFmOWZmZDNiNjdm\"\n    }\n  }\n}\n</code></pre>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#projects-groups-with-the-scope-descriptor-value","title":"Project's groups with the scope descriptor value","text":"<p>With the value obtained before (here the <code>{project_scope_descriptor}</code> would be \"scp.ODRiNmMwNjMtMTRiNS00ZGUyLWE4YjgtNmFmOWZmZDNiNjdm\"):</p> https://vssps.dev.azure.com/{org}/_apis/graph/groups?scopeDescriptor={project_scope_descriptor} <pre><code>{\n  \"count\": 9,\n  \"value\": [\n    {\n      \"subjectKind\": \"group\",\n      \"description\": \"Members of this group can perform all operations in the team project.\",\n      \"domain\": \"vstfs:///Classification/TeamProject/{project_id}\",\n      \"principalName\": \"[Test project]\\\\Project Administrators\",\n      \"mailAddress\": null,\n      \"origin\": \"vsts\",\n      \"originId\": \"95cf6f67-22a5-41ca-92a0-435f7a8eb948\", // &lt;--- Take this id\n      \"displayName\": \"Project Administrators\",\n      \"_links\": {\n        \"self\": {\n          \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Groups/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xNjczNTc0MDIwLTMwMzgwNDQ3NDktMjgzMDY1ODI5Ny00MjkyMDY0ODk1LTAtMC0wLTAtMQ\"\n        },\n        \"memberships\": {\n          \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Memberships/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xNjczNTc0MDIwLTMwMzgwNDQ3NDktMjgzMDY1ODI5Ny00MjkyMDY0ODk1LTAtMC0wLTAtMQ\"\n        },\n        \"membershipState\": {\n          \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/MembershipStates/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xNjczNTc0MDIwLTMwMzgwNDQ3NDktMjgzMDY1ODI5Ny00MjkyMDY0ODk1LTAtMC0wLTAtMQ\"\n        },\n        \"storageKey\": {\n          \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/StorageKeys/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xNjczNTc0MDIwLTMwMzgwNDQ3NDktMjgzMDY1ODI5Ny00MjkyMDY0ODk1LTAtMC0wLTAtMQ\"\n        }\n      },\n      \"url\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Groups/vssgp.Uy0xLTktMTU1MTM3NDI0NS0xNjczNTc0MDIwLTMwMzgwNDQ3NDktMjgzMDY1ODI5Ny00MjkyMDY0ODk1LTAtMC0wLTAtMQ\",\n      \"descriptor\": \"vssgp.Uy0xLTktMTU1MTM3NDI0NS0xNjczNTc0MDIwLTMwMzgwNDQ3NDktMjgzMDY1ODI5Ny00MjkyMDY0ODk1LTAtMC0wLTAtMQ\"\n    }\n    // ....\n  ]\n}\n</code></pre> <p>The cool thing about this group is that it's created by AzDO and has only read-only properties, so you can look for the \"Project Administrators\" display name without being worried about title changing.</p>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#getting-default-project-administrators-members","title":"Getting default Project Administrators members","text":"<p>Finally, with the Project Team ID through the <code>originId</code> property, get the members (and switch to another service URL, where the <code>{project_team_id}</code> would be \"95cf6f67-22a5-41ca-92a0-435f7a8eb948\"):</p> https://vsaex.dev.azure.com/{org}/_apis/GroupEntitlements/{project_team_id}/members <pre><code>{\n  \"members\": [\n    {\n      \"id\": \"8b8948a8-a17a-60c5-8fb9-39985bbef603\",\n      \"user\": {\n        \"subjectKind\": \"user\",\n        \"metaType\": \"member\",\n        \"directoryAlias\": \"meganb\",\n        \"domain\": \"1fdd85e0-9a94-4593-8ab0-5ad1b834475f\",\n        \"principalName\": \"meganb@contoso.onmicrosoft.com\",\n        \"mailAddress\": \"meganb@contoso.onmicrosoft.com\",\n        \"origin\": \"aad\",\n        \"originId\": \"1bec3bfc-8fec-41a9-b408-f1b4fcf9aa52\",\n        \"displayName\": \"Megan Bowen\",\n        \"_links\": {\n          \"self\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Users/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"memberships\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Memberships/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"membershipState\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/MembershipStates/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"storageKey\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/StorageKeys/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"avatar\": {\n            \"href\": \"https://dev.azure.com/{org}/_apis/GraphProfile/MemberAvatars/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          }\n        },\n        \"url\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Users/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\",\n        \"descriptor\": \"aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n      },\n      \"accessLevel\": {\n        \"licensingSource\": \"account\",\n        \"accountLicenseType\": \"stakeholder\",\n        \"msdnLicenseType\": \"none\",\n        \"licenseDisplayName\": \"Stakeholder\",\n        \"status\": \"active\",\n        \"statusMessage\": \"\",\n        \"assignmentSource\": \"unknown\"\n      },\n      \"lastAccessedDate\": \"2021-09-08T10:22:13.8704588Z\",\n      \"dateCreated\": \"2019-07-23T13:51:52.953Z\",\n      \"projectEntitlements\": [],\n      \"extensions\": [],\n      \"groupAssignments\": []\n    }\n  ],\n  \"continuationToken\": \"aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\",\n  \"totalCount\": -1,\n  \"items\": [\n    {\n      \"id\": \"8b8948a8-a17a-60c5-8fb9-39985bbef603\",\n      \"user\": {\n        \"subjectKind\": \"user\",\n        \"metaType\": \"member\",\n        \"directoryAlias\": \"meganb\",\n        \"domain\": \"1fdd85e0-9a94-4593-8ab0-5ad1b834475f\",\n        \"principalName\": \"meganb@contoso.onmicrosoft.com\",\n        \"mailAddress\": \"meganb@contoso.onmicrosoft.com\",\n        \"origin\": \"aad\",\n        \"originId\": \"1bec3bfc-8fec-41a9-b408-f1b4fcf9aa52\",\n        \"displayName\": \"Megan Bowen\",\n        \"_links\": {\n          \"self\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Users/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"memberships\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Memberships/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"membershipState\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/MembershipStates/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"storageKey\": {\n            \"href\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/StorageKeys/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          },\n          \"avatar\": {\n            \"href\": \"https://dev.azure.com/{org}/_apis/GraphProfile/MemberAvatars/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n          }\n        },\n        \"url\": \"https://vssps.dev.azure.com/{org}/_apis/Graph/Users/aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\",\n        \"descriptor\": \"aad.OGI4OTQ4YTgtYTE3YS03MGM1LThmYjktMzk5ODViYmVmNjAz\"\n      },\n      \"accessLevel\": {\n        \"licensingSource\": \"account\",\n        \"accountLicenseType\": \"stakeholder\",\n        \"msdnLicenseType\": \"none\",\n        \"licenseDisplayName\": \"Stakeholder\",\n        \"status\": \"active\",\n        \"statusMessage\": \"\",\n        \"assignmentSource\": \"unknown\"\n      },\n      \"lastAccessedDate\": \"2021-09-08T10:22:13.8704588Z\",\n      \"dateCreated\": \"2019-07-23T13:51:52.953Z\",\n      \"projectEntitlements\": [],\n      \"extensions\": [],\n      \"groupAssignments\": []\n    }\n  ]\n}\n</code></pre>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#why-not-using-the-_apiteams-endpoint","title":"Why not using the /_api/teams endpoint","text":"<p>I realized that when your Organization has many Projects, you can waste some time to find the specific Project Administrators Team, as this endpoint doesn't provide query filters and works with paging. With this approach, you're sure to get to your Project's specific team.</p>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#using-the-net-client-libraries","title":"Using the .NET Client Libraries","text":"<p>You'll need to install the following Nuget packages:</p> <ul> <li>Microsoft.TeamFoundationServer.Client</li> <li>Microsoft.VisualStudio.Services.Client</li> <li>Microsoft.VisualStudio.Services.MemberEntitlementManagement.WebApi</li> </ul> <p>Below the complete console app code snippet (including authentication with a Personal Access Token / PAT).</p> ConsoleAppAzDO.cs <pre><code>using Microsoft.TeamFoundation.Core.WebApi;\nusing Microsoft.VisualStudio.Services.Common;\nusing Microsoft.VisualStudio.Services.Graph.Client;\nusing Microsoft.VisualStudio.Services.MemberEntitlementManagement.WebApi;\nusing Microsoft.VisualStudio.Services.WebApi;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace ConsoleAppAzDO\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            string orgnizationUrl = \"contoso\";\n            string personalAccessToken = \"[YOUR_PAT]\";\n            string projectName = \"My Project\";\n\n            // Authenticate to AzDO with a Personal Access Token\n            Uri url = new Uri(\"https://dev.azure.com/\" + orgnizationUrl);\n            VssCredentials credentials = new VssBasicCredential(\"pat\", personalAccessToken);\n            VssConnection connection = new VssConnection(url, credentials);\n\n            // Get client contexts (in order to run queries)\n            ProjectHttpClient projectCtx = connection.GetClient&lt;ProjectHttpClient&gt;();\n            GraphHttpClient graphCtx = connection.GetClient&lt;GraphHttpClient&gt;();\n            MemberEntitlementManagementHttpClient memberCtx = connection.GetClient&lt;MemberEntitlementManagementHttpClient&gt;();\n\n            // Get project info\n            TeamProject myProject = projectCtx.GetProject(projectName).Result;\n\n            // Get project descriptor\n            GraphDescriptorResult myProjectDescriptor = graphCtx.GetDescriptorAsync(myProject.Id).Result;\n\n            // Get all project's groups\n            PagedGraphGroups myProjectGroups = graphCtx.ListGroupsAsync(myProjectDescriptor.Value.ToString()).Result;\n\n            // Get default project administrators group\n            GraphGroup myProjectAdmins = myProjectGroups.GraphGroups.Where(gp =&gt; gp.PrincipalName.Contains(\"Project Administrators\") &amp;&amp; gp.DisplayName == \"Project Administrators\").FirstOrDefault();\n\n            // Get group members\n            List&lt;GraphUser&gt; myProjectAdminUsers = memberCtx.GetGroupMembersAsync(new Guid(myProjectAdmins.OriginId)).Result.Members.Select(mem =&gt; mem.User).ToList();\n\n            // Display admin members\n            myProjectAdminUsers.ForEach(user =&gt; Console.WriteLine(user.DisplayName));\n        }\n    }\n}\n</code></pre> <p>Of course, you can go further into handling AzDO data. But you'll have to be patient and curious to get what you want, and eventually you'll have to query directly the REST API, because the .NET Client library won't provide what you expect \ud83d\udc40</p> <p>Happy coding!</p>"},{"location":"tips/20210914-azdo-project-admin-members-programmatically/#useful-links","title":"Useful Links","text":"<ul> <li>Azure DevOps REST API</li> <li>.NET Client Libraries</li> <li>.NET Client Libraries samples</li> </ul>"},{"location":"tips/20221223-spfx-form-boilerplate/","title":"[SPFx] Form Customizer Boilerplate","text":"<p>Since the v1.15 of SharePoint Framework, we can (finally) customize list forms! Until now, the only customizable options were through PowerApps or limited to switch fields or display / hide them.</p> <p>But actually, the customization leads to a gap with the native display, as clicking on \"New\" / \"Edit\" / \"Display\" redirects you to a dedicated SPFx hosting page. Even if there're plans to make custom forms available through the well-known side panel, I though it could be interesting to give a starting point solution, that would less impact users experience \ud83d\ude42</p> <p>It's also interesting to remind the existance of the ETag, which prevents concurrency updates on existing list items.</p>"},{"location":"tips/20221223-spfx-form-boilerplate/#prerequisites","title":"Prerequisites","text":"<ol> <li>An Office 365 (Dev) Tenant or a Partner Demo Tenant</li> <li>SPFx 1.15 package (at least) installed on the local machine</li> </ol> <p>The whole project snippet is available here.</p> <p>For this example, we also use the following libraries:</p> <ul> <li>spfx-fast-serve</li> <li>PnPJs</li> <li>PnP SPFx Controls</li> </ul> <p>For the package deployment &amp; Content Type component association, we use the PnP PowerShell module.</p>"},{"location":"tips/20221223-spfx-form-boilerplate/#deep-dive-in-code","title":"Deep dive in code","text":""},{"location":"tips/20221223-spfx-form-boilerplate/#form-customizer-declaration","title":"Form customizer declaration","text":"<p>First, let's have a look at the init method:</p> FormBoilerplateFormCustomizer.tspnpConfig.tsISPEmployeeItem.ts <pre><code>// ... (imports)\n\nexport default class FormBoilerplateFormCustomizer extends BaseFormCustomizer&lt;IFormBoilerplateFormCustomizerProperties&gt; {\n  public async onInit(): Promise&lt;void&gt; {\n  // ...\n    // Init SPFx context for using PnPJs\n    this._sp = getSP(this.context); // &lt;== Declared in pnpConfig.ts\n    this._pnpListItem = this._sp.web.lists.getById(this.context.list.guid.toString()).items;\n\n    if (this.displayMode !== FormDisplayMode.New) {\n      this._listItem = await this._loadItem();\n    }\n    else {\n      this._listItem = {} as ISPEmployeeItem;\n    }\n  }\n  // ...\n}\n</code></pre> <pre><code>import {\n  FormCustomizerContext\n  } from '@microsoft/sp-listview-extensibility';\n\nimport { spfi, SPFI, SPFx } from \"@pnp/sp\";\nimport { LogLevel, PnPLogging } from \"@pnp/logging\";\nimport \"@pnp/sp/webs\";\nimport \"@pnp/sp/lists\";\nimport \"@pnp/sp/items\";\n\nlet _sp: SPFI = null;\n\nexport const getSP = (context?: FormCustomizerContext): SPFI =&gt; {\n  if (_sp === null &amp;&amp; context !== null) {\n      _sp = spfi().using(SPFx(context)).using(PnPLogging(LogLevel.Warning));\n  }\n\n  return _sp;\n};\n</code></pre> <pre><code>export interface ISPEmployeeItem {\n  Title: string;\n  Description: string;\n  Complete: boolean;\n  Completeby: string;\n  Completedon: Date;\n  Mentor: { Id: string, EMail: string };\n  Relevantlink: { Url: string, Description: string };\n}\n</code></pre> <p><code>this.context</code>, as we know it, contains know properties (because it's inheriting from <code>BaseComponentContext</code>) such as <code>instanceId</code>, <code>pageContext</code>,... But here as a <code>FormCustomizerContext</code>, we can get info related to the list context:</p> <ul> <li><code>list</code></li> <li><code>contentType</code></li> <li><code>folderInfo</code></li> <li><code>itemId</code></li> <li><code>item</code> (new to SPFx 1.16)</li> <li><code>domElement</code></li> </ul> <p>We also have list form context info, such as <code>displayMode</code> that let us know if we're in New, Display or Edit state (but this info is also in the URL as query parameter \ud83d\ude2c).</p> <p>So here, we are loading the list item if we're displaying an existing one, through the <code>_loadItem</code> method:</p> FormBoilerplateFormCustomizer.ts <pre><code>export default class FormBoilerplateFormCustomizer extends BaseFormCustomizer&lt;IFormBoilerplateFormCustomizerProperties&gt; {\n  // ...\n  private _loadItem = async (): Promise&lt;ISPEmployeeItem&gt; =&gt; {\n    const item = await this._pnpListItem\n      .getById(this.context.itemId)\n      .select(\"Title, Description, Complete, Completeby, Completedon, Relevantlink, Mentor/Id, Mentor/EMail\")\n      .expand(\"Mentor\")();\n\n    // Saving ETag for the update\n    this._eTag = item[\"odata.etag\"];\n\n    // Removing unecessary data before passing list item to the component\n    delete item[\"odata.type\"];\n    delete item[\"odata.etag\"];\n    delete item[\"odata.editLink\"];\n    delete item[\"odata.metadata\"];\n    delete item[\"odata.id\"];\n    delete item[\"Mentor@odata.navigationLinkUrl\"];\n\n    return item as ISPEmployeeItem;\n  }\n  // ...\n}\n</code></pre> <p>Once our data loaded, we just have to push it to our Form customizer component!</p> FormBoilerplateFormCustomizer.ts <pre><code>export default class FormBoilerplateFormCustomizer extends BaseFormCustomizer&lt;IFormBoilerplateFormCustomizerProperties&gt; {\n  // ...\n  public render(): void {\n    // Use this method to perform your custom rendering.\n\n    const formBoilerplate: React.ReactElement&lt;{}&gt; =\n      React.createElement(FormBoilerplate, {\n        context: this.context,\n        displayMode: this.displayMode,\n        theme: getDefaultTheme(),\n        item: this._listItem,\n        onSave: this._onSave,\n        onClose: this._onClose\n      } as IFormBoilerplateProps);\n\n    ReactDOM.render(formBoilerplate, this.domElement);\n  }\n  // ...\n}\n</code></pre>"},{"location":"tips/20221223-spfx-form-boilerplate/#component","title":"Component","text":"<p>Now let's have a look at the component!</p> FormBoilerplate.tsx <pre><code>// Imports...\n\ninterface IFormBoilerplateState {\n  formListItem: ISPEmployeeItem;\n  error: string;\n}\n\nconst LOG_SOURCE: string = 'FormBoilerplate';\n\nexport default class FormBoilerplate extends React.Component&lt;IFormBoilerplateProps, IFormBoilerplateState&gt; {\n  // ...\n  constructor(props: IFormBoilerplateProps) {\n    super(props);\n\n    // Here, we receive list item data (if existing)\n    this.state = {\n      formListItem: this.props.item,\n      error: \"\",\n    };\n  }\n\n  // ...\n  public render(): React.ReactElement&lt;{}&gt; {\n    // ... (component content details declared here)\n    return (\n      &lt;form onSubmit={this._onSubmitSaveItem} className={styles.formBoilerplate}&gt;\n        &lt;CommandBar items={this._getCommandBarItems()} /&gt;\n        &lt;Separator className={styles.commandBarSeparators} /&gt;\n        {this.state.error &amp;&amp;\n          &lt;MessageBar messageBarType={MessageBarType.error} onDismiss={() =&gt; {this.setState({error: \"\"})}}&gt;{this.state.error}&lt;/MessageBar&gt;\n        }\n        &lt;Breadcrumb\n          items={breadcrumb}\n          className={styles.breadcrumbItem}\n        /&gt;\n        {formContent}\n      &lt;/form&gt;\n    );\n  }\n}\n</code></pre> <p>In the <code>return</code> statement of the <code>render</code> method we got interesting stuff:</p> <ul> <li>the <code>form</code> tag is used to control the required fields with native HTML5 behavior</li> <li>the <code>CommandBar</code>, the <code>Separator</code> and the <code>Breadcrumb</code> controls placed here are for keeping consistency to the UX, as we're moving to the <code>SPListForm.aspx</code> SPFx hosting page</li> </ul> <p>Let's keep scrolling down!</p> FormBoilerplate.tsx <pre><code>// Imports...\n\nexport interface IFormBoilerplateProps {\n  context: FormCustomizerContext;\n  displayMode: FormDisplayMode;\n  theme: ITheme;\n  item: ISPEmployeeItem;\n  onSave: (updatedItem: ISPEmployeeItem) =&gt; void;\n  onClose: () =&gt; void;\n}\n\ninterface IFormBoilerplateState {\n  formListItem: ISPEmployeeItem;\n  error: string;\n}\n\nconst LOG_SOURCE: string = 'FormBoilerplate';\n\nexport default class FormBoilerplate extends React.Component&lt;IFormBoilerplateProps, IFormBoilerplateState&gt; {\n  // ...\n  constructor(props: IFormBoilerplateProps) {\n    // ...\n  }\n\n  // ...\n  public render(): React.ReactElement&lt;{}&gt; {\n    // ...\n  }\n\n  // ...\n\n  private _editItem(): boolean | void {\n    const searchParams = new URLSearchParams(window.location.search);\n    if (searchParams.has(\"PageType\")) {\n      searchParams.set(\"PageType\", FormDisplayMode.Edit.toString());\n      window.location.href = location.protocol + \"//\" + location.host + location.pathname + \"?\" + searchParams;\n    }\n  }\n\n  // ...\n\n  private _renderSaveButton = (item: ICommandBarItemProps): React.ReactNode =&gt; {\n    return (\n      &lt;PrimaryButton\n        type=\"submit\"\n        className={styles.commandBarItems}\n        styles={item.buttonStyles}\n        text={item.text}\n        iconProps={item.iconProps} /&gt;);\n  }\n\n  private _saveItem = async (event: React.FormEvent&lt;HTMLFormElement&gt;): Promise&lt;void&gt; =&gt; {\n    event.preventDefault();\n\n    this.setState({\n      error: \"\",\n    });\n\n    try {\n      await this.props.onSave({\n        ...this.state.formListItem\n      });\n    } catch (err) {\n      let updateError: string;\n\n      if (err?.isHttpRequestError) {\n        const httpErr: HttpRequestError = err as HttpRequestError;\n\n        // Handling the concurrency issue as working with ETag\n        if (httpErr.status === 412) {\n          updateError = strings.ErrorEtagMessage;\n        }\n        else {\n          updateError = (await httpErr.response.json())[\"odata.error\"].message.value;\n        }\n      }\n      else {\n        updateError = err.message || err;\n      }\n\n      Logger.error(err);\n      console.log(updateError);\n\n      this.setState({\n        error: updateError\n      });\n    }\n  }\n}\n</code></pre> <p>A few other things to point out:</p> <ul> <li>As the <code>SPListForm.aspx</code> hosting page needs context parameters (such as the PageType or the ID) to know what to display, the <code>_onClickEditItem</code> event redirects from the Display mode to the Edit mode</li> <li>the <code>_renderSaveButton</code> method renders a <code>PrimaryButton</code> with the <code>type</code> attribute submit, which is crucial when working in a <code>form</code> context (and not declared as such by default in the Fluent UI component)</li> <li>the <code>_onSubmitSaveItem</code> event triggered by the submit button mentioned before contains the <code>event.preventDefault()</code> statement, in order to not redirect the user (because it has to be handled by an inherited event declared in the <code>FormBoilerplateFormCustomizer</code>, we'll see about that later)</li> <li>this method sends the updated form data to the host, which will perform the update operation and redirect the user to the list view or catching the error to display to him</li> </ul> <p>Below the form customizer \"as is\" when initiated by Yeoman:</p> <p></p> <p>As we can see, the default display is really...empty! You can also see that the SharePoint App Bar isn't displayed here.</p> <p>So the idea was to keep the same UI as the one we have in the list form:</p> <p></p> <p>Based on this, here's my proposal of Form customizer header:</p> <p></p> <p>Now, back to the <code>FormBoilerplateFormCustomizer</code> host:</p> FormBoilerplateFormCustomizer.ts <pre><code>export default class FormBoilerplateFormCustomizer extends BaseFormCustomizer&lt;IFormBoilerplateFormCustomizerProperties&gt; {\n  private _sp: SPFI;\n  private _pnpListItem: IItems;\n  private _eTag?: string = \"*\";\n\n  public async onInit(): Promise&lt;void&gt; {\n    this._sp = getSP(this.context);\n    this._pnpListItem = this._sp.web.lists.getById(this.context.list.guid.toString()).items;\n\n    // ...\n\n    return Promise.resolve();\n  }\n  // ...\n\n  private _onSave = async (updatedItem: ISPEmployeeItem): Promise&lt;void&gt; =&gt; {\n    let res: IItemAddResult | IItemUpdateResult;\n\n    const item = {\n      \"MentorId\": updatedItem.Mentor?.Id || null,\n      ...updatedItem\n    };\n\n    // Remove the Mentor Field as loaded to avoid an \"EntitySet error\"\n    delete item.Mentor;\n\n    if (this.context.itemId &gt; 0) {\n      res = await this._pnpListItem.getById(this.context.itemId).update(item, this._eTag);\n    }\n    else {\n      res = await this._pnpListItem.add(item);\n    }\n\n    if (!DEBUG) {\n      this._onSaveNative();\n    }\n    else {\n      // Save new ETag perform multiple savings in debug mode\n      this._eTag = res.data.etag;\n    }\n  }\n\n  private _onSaveNative = (): void =&gt; {\n    // You MUST call this.formSaved() after you save the form.\n    this.formSaved();\n  }\n}\n</code></pre> <p>Here, we got the following:</p> <ul> <li>Cleaning the Person field info as SharePoint REST API expects a specific format when adding / updating it</li> <li>Depending if it's a new or existing item, we add the known ETag to the request</li> <li>When working locally on the component, using the <code>DEBUG</code> property is usefull, because when triggering the <code>this.formSaved()</code>, the <code>SPListForm.aspx</code> hosting page redirects to the site home page instead of the target list, which could be frustrating</li> </ul>"},{"location":"tips/20221223-spfx-form-boilerplate/#a-react-control-to-rule-them-all","title":"A React control to rule them all","text":"<p>Since PnP SPFx Controls version 3.10, there's a new control called DynamicForm, which could perfectly fit to SPFx latest feature. Let's give a try!</p> FormBoilerplateFormCustomizer.tsDynamicFormBoilerplate.tsx <pre><code>export default class FormBoilerplateFormCustomizer extends BaseFormCustomizer&lt;IFormBoilerplateFormCustomizerProperties&gt; {\n  // ...\n  public render(): void {\n    // Use this method to perform your custom rendering.\n\n    const formBoilerplate: React.ReactElement&lt;{}&gt; =\n      React.createElement(DynamicFormBoilerplate, {\n        context: this.context,\n        displayMode: this.displayMode,\n        theme: getDefaultTheme(),\n        item: this._listItem,\n        onSave: this._onSave,\n        onClose: this._onClose\n      } as IFormBoilerplateProps);\n\n    ReactDOM.render(formBoilerplate, this.domElement);\n  }\n  // ...\n}\n</code></pre> <pre><code>// ... (imports)\ninterface IDynamicFormBoilerplateState {\n  error: string;\n}\n\nexport default class DynamicFormBoilerplate extends React.Component&lt;IFormBoilerplateProps, IDynamicFormBoilerplateState&gt; {\n\n  constructor(props: IFormBoilerplateProps) {\n    super(props);\n\n    this.state = {\n      error: \"\",\n    };\n  }\n\n  public render(): React.ReactElement&lt;IFormBoilerplateProps&gt; {\n    return (\n      &lt;div&gt;\n        {this.state.error &amp;&amp;\n          &lt;MessageBar messageBarType={MessageBarType.error} onDismiss={() =&gt; { this.setState({ error: \"\" }) }}&gt;{this.state.error}&lt;/MessageBar&gt;\n        }\n        &lt;DynamicForm\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          context={this.props.context as any}\n          listId={this.props.context.list.guid.toString()}\n          listItemId={this.props.context.itemId}\n          onSubmitted={this.props.onSave}\n          onCancelled={this.props.onClose}\n          onSubmitError={this._handleSPError}\n          disabled={this.props.displayMode === FormDisplayMode.Display} /&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _handleSPError = async (listItemData: any, error: any): Promise&lt;void&gt; =&gt; {\n    let updateError: string;\n\n    if (error?.isHttpRequestError) {\n      const httpErr: HttpRequestError = error as HttpRequestError;\n\n      updateError = (await httpErr.response.json())[\"odata.error\"].message.value;\n    }\n    else {\n      updateError = error.message || error;\n    }\n\n    Logger.error(error);\n    console.log(updateError);\n\n    this.setState({\n      error: updateError\n    });\n  }\n}\n</code></pre> <p>As we can see, it's shorter than the first approach! With a \"few\" lines we have a ready-to-use Form customizer!</p> <p>But we notice that:</p> <ul> <li>there's neither <code>CommandBar</code>, <code>Separator</code> or <code>Breadcrumb</code> components, since the Save and Cancel buttons are part of the <code>DynamicForm</code> component, we can't hide them or overriding them</li> <li>we can't handle the ETag here, as the component doesn't have a prop which allows us to specify it</li> <li>the saving and cancelling events are handled by the component (through the <code>onSubmitted</code> and the <code>onCancelled</code> event props)</li> </ul> <p>Th advantage of this component is that it handles the list context, so that the fields are displayed accordingly to its host (with associated configuration for each of them). But we're limited into the UI (even if there's a render overriding method called <code>fieldOverrides</code>), especially if we want to keep existing parts like the <code>CommandBar</code>.</p>"},{"location":"tips/20221223-spfx-form-boilerplate/#deployment","title":"Deployment","text":"<p>In order to deploy our Form customizer properly, below the script used to deploy the solution to the tenant app catalog and associate the component to the list content Type.</p> <p>Info</p> <p>The list used here is the Employee onboarding template provided by Microsoft when creating a list: </p> LinkFormCustomizerToContentType.ps1 <pre><code>  # Connecting to Tenant App Catalog (but could be also a Site Collection App Catalog)\n  Connect-PnPOnline -Url https://contoso.sharepoint.com/sites/appcatalog -Interactive\n\n  # Deploy the SPFx package to the Tenant App Catalog\n  Add-PnPApp -Path \"[PATH_TO_YOUR_SPFX_PACKAGE]\" -Scope Tenant -Publish -Overwrite\n\n  Disconnect-PnPOnline\n\n  # Connecting to the target site where the component will be added\n  Connect-PnPOnline -Url https://contoso.sharepoint.com/sites/hr -Interactive\n\n  # Adding the solution to the site\n  Get-PnPApp -Identity 0f850be3-9749-4726-9a75-06a89e6f231d | Install-PnPApp\n\n  # Form customizer component id\n  $customFormComponentId = \"8b38fd0b-2722-4001-acc0-5fddb5bc4c50\"\n\n  # Getting the list default Content Type (but could also be a Hub or a Document Set one)\n  $listCT = Get-PnPContentType -Identity \"Item\" -List \"/lists/EmployeeOnboarding\"\n\n  # Linking the component to the different form contexts\n  $listCT.EditFormClientSideComponentId = $customFormComponentId\n  $listCT.NewFormClientSideComponentId = $customFormComponentId\n  $listCT.DisplayFormClientSideComponentId = $customFormComponentId\n  $listCT.Update(0)\n\n  Invoke-PnPQuery\n</code></pre> <p>And that's it! From this boilerplate, you should be able to start playing with the Form Customizer!</p> <p>Happy coding! \ud83d\ude04</p>"},{"location":"tips/20230411-pnppowershell-spcontext-onprem/","title":"[PnP PowerShell] Set a PnPContext to SharePoint On-Premises","text":"<p>PnP Powershell is really useful for scripting stuff, we know that. It simplifies SharePoint objects manipulations, whether it's about <code>Web</code>, <code>List</code>, <code>User</code>,... In a way that we prefer using commands that those objects.</p> <p>But what about working with On-Premises environment? I don't know for you, but I got some trouble when I wanted to authenticate to a 2013 environment as I was site collection administrator. Probably because I was facing some proxy / federated authentication in my context.</p> <p>Below some errors met:</p> <p> \"Object reference not set to an instance of an object\"</p> <p> \"An error occurred while sending the request\"</p> <p>Then I remembered that it was possible to authenticate explicitly to On-Premises environment with the <code>-TransformationOnPrem</code> and <code>-CurrentCredential</code> arguments available in the <code>Connect-PnPOnline</code> command. As stated, the first argument is dedicated to \"modernize\" pages, webparts,... Nothing more (we get a 403 Not Allowed error when trying to get current site info for example). But even if I'm not allowed to query anything else, I still have a <code>ClientContext</code> initiated, so I should be able to overwrite it!</p> <p>As I'm working on a migration from On-Premises to Online, I had a couple of scripts to test / run on both environments, which explains why I got this \"idea\".</p> <p>As I didn't want to write down all the CSOM with PowerShell (you know, \"assigning an object\", \"loading the object\", \"running the query\",...), I found out that it was possible to replace the initiated context by another one that could be created with CSOM!</p> <p>Warning</p> <p>This trick was tested with version 1.12 of PnP PowerShell and SharePoint 2013. Of course, because of the scope of the module, some commands might not work as expected. In my case, I've tested some basic ones related to lists or site context.</p> <p>Here's an example:</p> PnP PowerShell <pre><code>$siteUrl = \"https://portal.contoso.com\"\n\n# Start by authenticate to your On-Premises site collection\n# The command will import the SharePoint CSOM objects\n# Like this, you'll be able to consume those without explicitly importing DLLs \ud83d\ude09\nConnect-PnPOnline -Url $siteUrl -TransformationOnPrem -CurrentCredential\n\n# Now let's assume that your Windows credentials are stored in the Credentials Manager\n# In that case, the username will be stored like this: \"domain\\user\"\n$credentials = Get-PnPStoredCredential -Name WindowsCredentials\n\n# We're setting a new ClientContext object through CSOM\n# and use NetWorkCredential instead of SharePointOnlineCredentials\n$ctx = New-Object Microsoft.SharePoint.Client.ClientContext($siteUrl)\n$ctx.Credentials = New-Object System.Net.NetworkCredential($credentials.UserName, $credentials.Password)\n\n# Link the previously obtained context to PnP PowerShell\nSet-PnPContext -Context $ctx\n\n# Try some command\nGet-PnPWeb\n\n# Hurray!\n</code></pre> <p>Like this, you can take advantage of the most common PnP PowerShell commands on On-Premises environment and avoid to write everything like if you were on a C# console app.</p> <p>Happy coding!</p>"}]}