{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Articles 2020-11-19 : Connect to SharePoint in an AAD Application permission context with a certificate stored in Azure KeyVault 2020-02-11 : How to quickly and properly delete a Team (without waiting) Tips & Tricks 2020-05-05 : [SPFx] Transform the Fluent UI ProgressIndicator component into a countdown timer 2020-02-13 : [CSOM] Test in your C# code if a SharePoint File or Folder exists","title":"Home"},{"location":"#articles","text":"2020-11-19 : Connect to SharePoint in an AAD Application permission context with a certificate stored in Azure KeyVault 2020-02-11 : How to quickly and properly delete a Team (without waiting)","title":"Articles"},{"location":"#tips-tricks","text":"2020-05-05 : [SPFx] Transform the Fluent UI ProgressIndicator component into a countdown timer 2020-02-13 : [CSOM] Test in your C# code if a SharePoint File or Folder exists","title":"Tips &amp; Tricks"},{"location":"about/","text":"About this blog Who Am I Hi ! I'm Micha\u00ebl, Software Engineer for onepoint based in Nantes, France. I'm +10yr experienced in SharePoint solutions (started from the 2007 version) and since 2017, I'm focused on developing SPFx solutions, working with Office 365 Managed Services and Azure Services, exploring Microsoft Graph and Identity. I also (try to) contribute to the PnP Initiative with amazing people ! In this blog, I'll talk about things I learned day by day since I started to work with SharePoint Products (articles, memos,...). Why Now It's hard to convince yourself \"Ok, let's open to the world\". I think I was waiting for the right time. When I see how the Microsoft Community has grown up, especially in the Office 365 bubble, I think that it could be helpful to anyone who, like me, wants to find some answers to technical issues met (missing puzzle piece \ud83d\ude09). Why In English Because it's easier to reach out a maximum of people \ud83e\udd17 Hope you'll find what you're looking for, see you online or IRL !","title":"About"},{"location":"about/#about-this-blog","text":"","title":"About this blog"},{"location":"about/#who-am-i","text":"Hi ! I'm Micha\u00ebl, Software Engineer for onepoint based in Nantes, France. I'm +10yr experienced in SharePoint solutions (started from the 2007 version) and since 2017, I'm focused on developing SPFx solutions, working with Office 365 Managed Services and Azure Services, exploring Microsoft Graph and Identity. I also (try to) contribute to the PnP Initiative with amazing people ! In this blog, I'll talk about things I learned day by day since I started to work with SharePoint Products (articles, memos,...).","title":"Who Am I"},{"location":"about/#why-now","text":"It's hard to convince yourself \"Ok, let's open to the world\". I think I was waiting for the right time. When I see how the Microsoft Community has grown up, especially in the Office 365 bubble, I think that it could be helpful to anyone who, like me, wants to find some answers to technical issues met (missing puzzle piece \ud83d\ude09).","title":"Why Now"},{"location":"about/#why-in-english","text":"Because it's easier to reach out a maximum of people \ud83e\udd17 Hope you'll find what you're looking for, see you online or IRL !","title":"Why In English"},{"location":"articles/20200211-properly-remove-team/","text":"How to quickly and properly delete a Team (without waiting) Article update 2020-11-29 : I've updated the article following the the update of the CLI for Microsoft 365, adding a new command for permanently delete a site collection. Use Case You work for a company that wants to automatically create a Team with Tabs, Channels and other stuff that will make a new project team ready to rock the stage. You are preparing the process and for mastering it, you have create / test / destroy / retry. But when you want to clean up your mess, you have to know that, during 30 days: Your Team still exists as a Group (you can find it in the \"Deleted Groups\" menu on AAD), same for the associated e-mail address The Team Site also still exists So let's says that you made a mistake during the creation of a Team and want to \"start over\" (with same name of course), if you don't want to wait for the Office 365 Job to update your environment and re-create the Team with same name: The SharePoint Site URL takes a number at the end of its address (of course, because the older one's still here) You can't permanently delete the Teams Site, as the SharePoint Admin Center detects that the related Group still exists Here's a step by step process to delete quickly a Team ! I recommand to follow them in this order to make everything's work. Prerequisites An Office 365 (Dev) Tenant or a Partner Demo Tenant An Account with the following Office 365 roles SharePoint Admin Teams Admin An Account with the following Azure AD role Groups administrator Command Interface (one of these) PowerShell (with AzureAD PowerShell , PnP PowerShell and Microsoft Teams PowerShell ) CLI for Microsoft 365 Delete Group Delete Group with Interface Throught the UI, you have to delete the Group then permanently delete it Delete Group with code Azure AD PowerShell 1 2 3 Connect-AzureAD -TenantId \"TenantId\" Remove-AzureADGroup -ObjectId \"GroupId\" Remove-AzureADMSDeletedDirectoryObject -Id \"GroupId\" CLI for Microsoft 365 1 2 3 # (As there's no CLI command to permanently delete a Group, # you'll have to do it through the UI) aad o365group remove --id \"GroupId\" --confirm Delete Team (if necessary) Sometimes, once a Group is permanently deleted, the Team still exists. If it's the case and once again, you don't want for the Job to delete it, you can do it yourself. But don't be surprise if the following commands throw an error : maybe the Job has already worked. Delete Team with Interface Throught the UI (if you have an owner account) or Admin Interface, you can delete the Team OR Delete Team with code Microsoft Teams PowerShell 1 2 Connect-MicrosoftTeams -TenantId \"TenantId\" Remove-Team -GroupId \"GroupId\" Delete Site Collection As I told you before (even if you did the previous steps), if you try to delete the Teams Site from the SharePoint Admin Center, you won't be able to remove it from the Site Collection Recycle Bin (because of the O365 Job Tenant update process). Delete site with code PnP PowerShell 1 2 3 4 5 6 7 8 9 # If you are familiar with the Get-PnPStoredCredential cmdlet, # you can use it here with the \"-Credential\" Argument Connect-PnPOnline -TenantId \"TenantId\" # Remove the site Remove-PnPTenantSite -Url \"TeamsSiteUrl\" -Force -SkipRecycleBin # Remove the site from the Site Collection Recycle Bin Clear-PnPTenantRecycleBinItem -Url \"TeamsSiteUrl\" -Force -Wait CLI for Microsoft 365 1 2 3 4 5 # Remove the site spo site classic remove -u \"TeamsSiteUrl\" --skipRecycleBin --confirm --wait # Remove the site from the Site Collection Recycle Bin spo tenant recyclebinitem remove -u \"TeamsSiteUrl\" --confirm --wait That's it Et voil\u00e0 ! You can start over your process until it's ready to use. Of course, you could also make those tasks with the SharePoint Online Management Shell or with the Graph API, but here I've covered the most common ways of working with Teams / Group / SharePoint administration. Useful Links Microsoft Teams Architecture Microsoft Teams Architecture Posters","title":"How to quickly and properly delete a Team (without waiting)"},{"location":"articles/20200211-properly-remove-team/#how-to-quickly-and-properly-delete-a-team-without-waiting","text":"Article update 2020-11-29 : I've updated the article following the the update of the CLI for Microsoft 365, adding a new command for permanently delete a site collection.","title":"How to quickly and properly delete a Team (without waiting)"},{"location":"articles/20200211-properly-remove-team/#use-case","text":"You work for a company that wants to automatically create a Team with Tabs, Channels and other stuff that will make a new project team ready to rock the stage. You are preparing the process and for mastering it, you have create / test / destroy / retry. But when you want to clean up your mess, you have to know that, during 30 days: Your Team still exists as a Group (you can find it in the \"Deleted Groups\" menu on AAD), same for the associated e-mail address The Team Site also still exists So let's says that you made a mistake during the creation of a Team and want to \"start over\" (with same name of course), if you don't want to wait for the Office 365 Job to update your environment and re-create the Team with same name: The SharePoint Site URL takes a number at the end of its address (of course, because the older one's still here) You can't permanently delete the Teams Site, as the SharePoint Admin Center detects that the related Group still exists Here's a step by step process to delete quickly a Team ! I recommand to follow them in this order to make everything's work.","title":"Use Case"},{"location":"articles/20200211-properly-remove-team/#prerequisites","text":"An Office 365 (Dev) Tenant or a Partner Demo Tenant An Account with the following Office 365 roles SharePoint Admin Teams Admin An Account with the following Azure AD role Groups administrator Command Interface (one of these) PowerShell (with AzureAD PowerShell , PnP PowerShell and Microsoft Teams PowerShell ) CLI for Microsoft 365","title":"Prerequisites"},{"location":"articles/20200211-properly-remove-team/#delete-group","text":"","title":"Delete Group"},{"location":"articles/20200211-properly-remove-team/#delete-group-with-interface","text":"Throught the UI, you have to delete the Group then permanently delete it","title":"Delete Group with Interface"},{"location":"articles/20200211-properly-remove-team/#delete-group-with-code","text":"Azure AD PowerShell 1 2 3 Connect-AzureAD -TenantId \"TenantId\" Remove-AzureADGroup -ObjectId \"GroupId\" Remove-AzureADMSDeletedDirectoryObject -Id \"GroupId\" CLI for Microsoft 365 1 2 3 # (As there's no CLI command to permanently delete a Group, # you'll have to do it through the UI) aad o365group remove --id \"GroupId\" --confirm","title":"Delete Group with code"},{"location":"articles/20200211-properly-remove-team/#delete-team-if-necessary","text":"Sometimes, once a Group is permanently deleted, the Team still exists. If it's the case and once again, you don't want for the Job to delete it, you can do it yourself. But don't be surprise if the following commands throw an error : maybe the Job has already worked.","title":"Delete Team (if necessary)"},{"location":"articles/20200211-properly-remove-team/#delete-team-with-interface","text":"Throught the UI (if you have an owner account) or Admin Interface, you can delete the Team OR","title":"Delete Team with Interface"},{"location":"articles/20200211-properly-remove-team/#delete-team-with-code","text":"Microsoft Teams PowerShell 1 2 Connect-MicrosoftTeams -TenantId \"TenantId\" Remove-Team -GroupId \"GroupId\"","title":"Delete Team with code"},{"location":"articles/20200211-properly-remove-team/#delete-site-collection","text":"As I told you before (even if you did the previous steps), if you try to delete the Teams Site from the SharePoint Admin Center, you won't be able to remove it from the Site Collection Recycle Bin (because of the O365 Job Tenant update process).","title":"Delete Site Collection"},{"location":"articles/20200211-properly-remove-team/#delete-site-with-code","text":"PnP PowerShell 1 2 3 4 5 6 7 8 9 # If you are familiar with the Get-PnPStoredCredential cmdlet, # you can use it here with the \"-Credential\" Argument Connect-PnPOnline -TenantId \"TenantId\" # Remove the site Remove-PnPTenantSite -Url \"TeamsSiteUrl\" -Force -SkipRecycleBin # Remove the site from the Site Collection Recycle Bin Clear-PnPTenantRecycleBinItem -Url \"TeamsSiteUrl\" -Force -Wait CLI for Microsoft 365 1 2 3 4 5 # Remove the site spo site classic remove -u \"TeamsSiteUrl\" --skipRecycleBin --confirm --wait # Remove the site from the Site Collection Recycle Bin spo tenant recyclebinitem remove -u \"TeamsSiteUrl\" --confirm --wait","title":"Delete site with code"},{"location":"articles/20200211-properly-remove-team/#thats-it","text":"Et voil\u00e0 ! You can start over your process until it's ready to use. Of course, you could also make those tasks with the SharePoint Online Management Shell or with the Graph API, but here I've covered the most common ways of working with Teams / Group / SharePoint administration.","title":"That's it"},{"location":"articles/20200211-properly-remove-team/#useful-links","text":"Microsoft Teams Architecture Microsoft Teams Architecture Posters","title":"Useful Links"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/","text":"Connect to SharePoint in an AAD Application permission context with a certificate stored in Azure KeyVault Use Case You work on a Web Application (or API) which is connected to a SharePoint Tenant. You want to setup things correctly and want to execute SharePoint actions in Azure Active Directory (AAD) Application permission context. Goal of this article This article will show how to work with a SharePoint site through an API or a Web Application, only with AAD Application permissions. It will demonstrate how to setup everything and how to connect with a certificate stored in a Key Vault, step by step, in UI, PowerShell and Azure CLI. Let's see the final result below The Web Application (or API)... Requests access to the Key Vault, in order to get the stored certificate Gets the Key Vault certificate Authenticates to Office 365 using the SharePoint AAD Application with the certificate Gets a ClientContext with the requested API permissions Uses the ClientContext object to query the SharePoint site Gets Web info (I've shrinked the 3. because there are somes requests are made to https://login.microsofonline.com , more info here ) Prerequisites An Office 365 (Dev) Tenant or a Partner Demo Tenant An Azure subscription and the following Azure AD role at least Application Administrator Command Interface (one of these) PowerShell (with Az PowerShell and AzureAD PowerShell ) Azure CLI ( on your machine or through Azure Cloud Shell ) Visual Studio (2017 or later) Why authenticating by certificate and not by Client ID / Secret In AAD Application permission context, for unknown reason, you can't work with SharePoint REST API using Client ID / Secret connection. It only works with a connection using Client ID / Certificate. I've posted a solution as an answer on Stack Overflow a couple months ago. But in some cases, you have no choice but to work with a Client ID / Secret (like for example writing in the User Profile Service). In that case, use the legacy App-Only principal context Why using two Azure PowerShell Modules Even if Microsoft provides a module that covers most Azure resources and the most popular is Az PowerShell , this one does not cover all features regarding AAD. For instance, let's compare one command and the options provided. New-AzADApplication New-AzureADApplication -DisplayName -DisplayName -IdentifierUris [-IdentifierUris] [-HomePage] [-Homepage] [-ReplyUrls] [-ReplyUrls] [-AvailableToOtherTenants] [-AvailableToOtherTenants] [-KeyCredentials] [-KeyCredentials] [-PasswordCredentials] [-PasswordCredentials] [-StartDate] / [-EndDate] / [-CertValue] / [-Password] / / [-AppRoles] / [-Oauth2Permissions] / [-AddIns] / [-AllowGuestsSignIn] / [-AllowPassthroughUsers] / [-AppLogoUrl] / [-ErrorUrl] / [-GroupMembershipClaims] / [-InformationalUrls] / [-IsDeviceOnlyAuthSupported] / [-IsDisabled] / [-KnownClientApplications] / [-LogoutUrl] / [-Oauth2AllowImplicitFlow] / [-Oauth2AllowUrlPathMatching] / [-Oauth2RequirePostResponse] / [-OrgRestrictions] / [-OptionalClaims] / [-ParentalControlSettings] / [-PreAuthorizedApplications] / [-PublicClient] / [-PublisherDomain] / [-RecordConsentConditions] / [-RequiredResourceAccess] / [-SamlMetadataUrl] / [-SignInAudience] / [-WwwHomepage] As you can see, the AzureAD Module provides more options just in this example. And as stated here , the AzureAD module is the one to use when working with AAD. Connect to Azure Az PowerShell 1 2 3 4 5 Connect-AzAccount # -Subscription \"SUBSCRIPTION_ID\" -TenantId \"TENANT_ID\" (if you have multiples tenants) # Wait for prompt to get credentials Get-AzContext | select Account , Tenant # Check if the context is correct Azure AD PowerShell 1 2 3 4 5 Connect-AzureAD # -TenantId \"TENANT_ID\" (if you have multiples tenants) # Wait for prompt to get credentials Get-AzureADCurrentSessionInfo | select Account , Tenant # Check if the context is correct Azure CLI 1 2 3 4 5 az login # --tenant \"TENANT_ID\" (if you have multiples tenants) # Authorize with Device Code az account show --query '[user.name,tenantId]' # Check if the context is correct Create Key Vault (and the Ressource Group) The first step is to create the Key Vault that will store the certificate. Create Key Vault through interface Create Key Vault with code Az PowerShell 1 2 3 4 5 # Create Resource Group New-AzResourceGroup -Name \"rg-common\" -Location \"westeurope\" # -Tag @{Environment=\"Production\"; Department=\"HR\"} (if tags are required by your organization) # Create KeyVault New-AzKeyVault -VaultName \"kvwecommon\" -ResourceGroupName \"rg-common\" -Location \"westeurope\" Azure CLI 1 2 3 4 5 # Create Resource Group az group create -l westeurope -n \"rg-common\" # --tags Environment=\"Production\" Department=\"HR\" (if tags are required by your organization) # Create KeyVault az keyvault create --resource-group \"rg-common\" --name \"kvwecommon\" Add certificate to Key Vault Once the Key Vault is created, we'll use its certificate creation feature to init one. Add certificate through interface Add certificate with code Az PowerShell 1 2 3 4 5 6 # Add yourself the permissions to get secret (for testing locally the solution later) and to write in the certificates store Set-AzKeyVaultAccessPolicy -VaultName \"kvwecommon\" -EmailAddress \"YOUR_EMAIL_ADDRESS\" -PermissionsToSecret get -PermissionsToCertificates import , create , get , list -PassThru # If you want to set an expiration delay beyond 12 months, specify a value with the -ValidityInMonths parameter $policy = New-AzKeyVaultCertificatePolicy -IssuerName 'Self' -KeyType RSA -RenewAtPercentageLifetime 80 -SecretContentType application / x-pkcs12 -SubjectName 'CN=MyCert' -ValidityInMonths 12 Add-AzKeyVaultCertificate -VaultName \"kvwecommon\" -Name \"MyCert\" -CertificatePolicy $policy Azure CLI 1 2 3 4 5 6 # Add yourself the permissions to get secret (for testing locally the solution later) # You can get your info with \"az ad signed-in-user show --query objectId\" az keyvault set-policy --name \"kvwecommon\" --object-id \"YOUR_OBJECT_ID\" --secret-permissions get # If you want to set an expiration delay beyond 12 months, specify a value with the --validity parameter az keyvault certificate create --vault-name \"kvwecommon\" -n \"MyCert\" -p \" $( az keyvault certificate get-default-policy ) \" Register AAD Application (and apply admin consent) Like said before, to connect to SharePoint as an application, you have two options: using the AAD Application context (accepts Client ID / Secret and certificate) using the SharePoint App-Only principal context (accepts Client ID / Secret) As we'll authenticate with a certificate, the only way is to use the AAD Application context. Register AAD App through interface Register AAD App with code To register Application permissions, you have to indicate which API you want to use and check the permissions required for you needs. If it's transparent for you when you register through the Azure Portal, let me explain how does it work under the hood. Whether you want to work with SharePoint, Microsoft Graph, Dynamics or else, each service is registered as a service principal (Enterprise Application in AAD). And each of these contains AppRoles (for Application permissions) and Oauth2Permissions (Delegated permissions). You'll notice later in the article that, for those service principals, we can refer to them as AppId and ObjectId . Depending on the command executed, the ObjectId will be required because it's unique, instead of the AppId which is the same whatever the organization is. For instance, the AppId for SharePoint is 00000003-0000-0ff1-ce00-000000000000 and for Microsoft Graph 00000003-0000-0000-c000-000000000000 . From the moment where you want to add permissions, you must register your application as a service principal too, in order to enable those permissions for your organization. Instead of the AAD Application registration user interface, you have to declare both AAD Application and its service principal (the Enterprise Application) Now that you know this, we'll see how to register the appropriate permissions and especially when admin consent is required. Register AAD App with PowerShell Azure AD PowerShell 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Here, we'll use the AzureAD Module # Get the service principal for \"Office 365 SharePoint Online\" $adspSPO = Get-AzureADServicePrincipal -Filter \"AppId eq '00000003-0000-0ff1-ce00-000000000000'\" # If you want to get all the available Application permissions $adspSPO . AppRoles # If you want to get all the available Delegated permissions $adspSPO . Oauth2Permissions # First, declare SharePoint permissions you want to provide to your AAD Application $reqSPO = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.RequiredResourceAccess\" $reqSPO . ResourceAppId = \"00000003-0000-0ff1-ce00-000000000000\" # Here, we add Application permissions that will require admin consent $roleId = \"678536fe-1083-478a-9c59-b99265e6b0d3\" $reqSPO . ResourceAccess = New-Object System . Collections . Generic . List [Microsoft.Open.AzureAD.Model.ResourceAccess] $reqSPO . ResourceAccess . Add ( [Microsoft.Open.AzureAD.Model.ResourceAccess] :: new ( $roleId , \"Role\" )) # Sites.FullControl.All # But if you want to add Delegated permissions that will require admin consent $reqSPO . ResourceAccess . Add ( [Microsoft.Open.AzureAD.Model.ResourceAccess] :: new ( \"a468ea40-458c-4cc2-80c4-51781af71e41\" , \"Scope\" )) # TermStore.Read.All $reqSPO . ResourceAccess . Add ( [Microsoft.Open.AzureAD.Model.ResourceAccess] :: new ( \"0cea5a30-f6f8-42b5-87a0-84cc26822e02\" , \"Scope\" )) # User.Read.All # Register the AAD Application $aadApp = New-AzureADApplication -DisplayName \"MySharePointApp\" -AvailableToOtherTenants : $false -RequiredResourceAccess $reqSPO # Then, add you as an owner of the AAD Application # Get your ObjectId $yourself = Get-AzureADUser | ?{ $_ . UserPrincipalName -like \"*PART OF YOUR MAIL ADDRESS*\" } | select ObjectId # Add yourself as an owner Add-AzureADApplicationOwner -ObjectId $aadApp . ObjectId -RefObjectId $yourself . ObjectId # Register the AAD Application as a service principal $aadspapp = New-AzureADServicePrincipal -AppId $aadApp . AppId # Add the App Role Assignment mentioned before # This will grant admin consent # Execute this cmdlet as much as you have Application permission roles that requires admin consent New-AzureADServiceAppRoleAssignment -ObjectId $aadspapp . ObjectId -Id $roleId -PrincipalId $aadspapp . ObjectId -ResourceId $adspSPO . ObjectId Register AAD App with Azure CLI Azure CLI 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # If you want to get all the available Application permissions for \"Office 365 SharePoint Online\" az ad sp list --filter \"appId eq '00000003-0000-0ff1-ce00-000000000000'\" --query '[].appRoles[].{Value:value, Id:id, DisplayName:displayName}' -o table # If you want to get all the available Delegated permissions for \"Office 365 SharePoint Online\" az ad sp list --filter \"appId eq '00000003-0000-0ff1-ce00-000000000000'\" --query '[].oauth2Permissions[].{Value:value, Id:id, UserConsentDisplayName:userConsentDisplayName}' -o table # Declare SharePoint Application permissions # Sites.FullControl.All permissions = '[{\"resourceAppId\":\"00000003-0000-0ff1-ce00-000000000000\",\"resourceAccess\":[{\"id\":\"678536fe-1083-478a-9c59-b99265e6b0d3\",\"type\":\"Role\"}]}]' # Or declare SharePoint Delegated permissions (here permissions requested are TermStore.Read.All, User.Read.All) # permissions='[{\"resourceAppId\":\"00000003-0000-0ff1-ce00-000000000000\",\"resourceAccess\":[{\"id\":\"a468ea40-458c-4cc2-80c4-51781af71e41\",\"type\":\"Scope\"},{\"id\":\"0cea5a30-f6f8-42b5-87a0-84cc26822e02\",\"type\":\"Scope\"}]}]' # Register the SharePoint AAD Application with the required permissions az ad app create --display-name \"MySharePointApp\" --required-resource-accesses $permissions # Add yourself as an owner of the SharePoint AAD Application # You can get your info with \"az ad signed-in-user show --query objectId\" az ad app owner add --id \"AAD_APP_OBJECT_ID\" --owner-object-id \"YOUR_OBJECT_ID\" # Register the AAD Application as a service principal az ad sp create --id \"AAD_APP_OBJECT_ID\" # Grant admin consent # Execute this command if you have Application permission roles that requires admin consent # /!\\ You can face a 400 error when executing this command from Cloud Shell. # If so, run \"az login\" first. Known issue : https://github.com/Azure/azure-cli/issues/11749 az ad app permission admin-consent --id \"AAD_APP_OBJECT_ID\" (optional) Grant Admin Consent on Delegated permissions with PowerShell For now, if you want to work with delegated permissions on PowerShell, there's no cmdlet to grant admin consent (instead of Azure CLI, as you've see before). The only approach is to use Microsoft Graph, which provides methods to add / consent Delegated permissions. Full example here . Az PowerShell 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Back in Az PowerShell # Assume that the Delegated permissions have been added before, through the New-AzureADApplication cmdlet # First, init Graph session token $context = Get-AzContext $ResourceGraphURI = \"https://graph.microsoft.com/\" $graphToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession] :: Instance . AuthenticationFactory . Authenticate ( $context . Account , $context . Environment , $context . Tenant . Id . ToString (), $null , [Microsoft.Azure.Commands.Common.Authentication.ShowDialog] :: Never , $null , $ResourceGraphURI ). AccessToken # Declare the scopes you want to grant access (enter the same) $body = @{ clientId = $aadspapp . ObjectId consentType = \"AllPrincipals\" principalId = $null resourceId = $adspSPO . ObjectId scope = \"AllSites.FullControl\" } $apiUrl = \"https://graph.microsoft.com/v1.0/oauth2PermissionGrants\" Invoke-RestMethod -Uri $apiUrl -Headers @{ Authorization = \"Bearer $( $graphToken ) \" } -Method POST -Body $( $body | ConvertTo-Json ) -ContentType \"application/json\" Register Web Application / API Application Now, we're going to create the resource that will query the SharePoint site. It can be a Web Application or an API. In this example, it will be a Web Application (but in the end, the code used for connecting to SharePoint will be the same). Once the Web Application created, you will have to enable Managed Identity, in order to allow the resource to access the Key Vault. This will lead in the creation of a service principal you'll be able to find in the AAD Enterprise Applications page. Register the resource through interface Enable Managed Identity through interface Register the resource with code (and enable Managed Identity) Az PowerShell 1 2 3 4 5 6 7 8 9 10 # Create App Service Plan based on Windows $appSerPlan = New-AzAppServicePlan -ResourceGroupName \"rg-common\" -Name \"asp-we-rgcommon\" -Location \"westeurope\" -Tier \"Free\" # Create Web Application # /!\\ Actually, there's no possibility to specify the Stack / Runtime with this command # /!\\ But by default, it will create an ASP.NET 4.8 one (as the App Service Plan is hosted on Windows) New-AzWebApp -ResourceGroupName \"rg-common\" -Name \"MyWebApplicationForSharePoint\" -Location \"westeurope\" -AppServicePlan $appSerPlan . Id # Enable Managed Identity (= creating a service principal) Set-AzWebApp -ResourceGroupName \"rg-common\" -Name \"MyWebApplicationForSharePoint\" -AssignIdentity $true Azure CLI 1 2 3 4 5 # Create App Service Plan (if does not exists) az appservice plan create --resource-group \"rg-common\" --name \"asp-we-rgcommon\" --location \"westeurope\" --sku F1 # Create Web Application (and its service principal) az webapp create --resource-group \"rg-common\" --name \"MyWebApplicationForSharePoint\" --plan \"asp-we-rgcommon\" --runtime \"aspnet|V4.8\" --assign-identity Upload Key Vault Certificate into AAD Application By importing the certificate (created with the Key Vault) in the AAD Application, you allow an authentication to SharePoint when requesting access to the Tenant, with a Client ID / Certificate. Upload through interface Upload with code Az PowerShell 1 2 3 4 5 6 # Get previsouly created certificate $myCert = ( Get-AzKeyVaultCertificate -VaultName \"kvwecommon\" -Name \"MyCert\" ). Certificate $certString = [Convert] :: ToBase64String ( $myCert . GetRawCertData ()) # Upload the certificate to the SharePoint AAD Application New-AzADAppCredential -ObjectId $aadApp . ObjectId -CertValue $certString -StartDate $myCert . NotBefore -EndDate $myCert . NotAfter Azure CLI 1 2 3 4 5 # Get previsouly created certificate az keyvault certificate download --vault-name \"kvwecommon\" --name \"MyCert\" -f MyCert.pem # Upload the certificate to the SharePoint AAD Application az ad sp credential reset --name \"AAD_APP_OBJECT_ID\" --cert \"@~/MyCert.pem\" Grant Web Application to get Key Vault Secret When using Microsoft.Azure.KeyVault library, we used to grant certificate (GET) access policy to certificate. But as this library is replaced by the Azure.Security .NET Libraries, we have to use the Keyvault.Secrets service because until now, there's no method provided to get a Key Vault Certificate with the certificate (GET) access policy. Furthermore, the Certificate in Key Vault is more a concept than just a type of Secret. That's why we're going to setup a secret (GET) access policy. Grant access through interface Grant access with code Az PowerShell 1 2 3 4 5 # Retrieve Web Application service principal $webappsp = Get-AzADServicePrincipal -DisplayName \"MyWebApplicationForSharePoint\" # Assign the permission Set-AzKeyVaultAccessPolicy -VaultName \"kvwecommon\" -ObjectId $webappsp . Id -PermissionsToSecrets get -PassThru Azure CLI 1 2 3 4 5 # Retrieve Web Application service principal objectId az ad sp list --display-name \"MyWebApplicationForSharePoint\" --query [] .objectId # Assign the permission az keyvault set-policy --name \"kvwecommon\" --object-id \"WEB_APPLICATION_SERVICE_PRINCIPAL_OBJECT_ID\" --secret-permissions get Init ASP.NET Web Application Project To init your project (.NET Framework 4.8 C#), you can follow this quickstart (and if you want to try with an API deployed in an Azure API, just select \"Web API\" instead of \"MVC\"). Get Nuget Packages (Azure, SharePoint) Below the Nuget packages required to test the architecture: Azure.Identy (for the authentication to the KeyVault) Azure.Security.KeyVault.Secrets (to get the certificate) Microsoft.SharePointOnline.CSOM (to work with SharePoint Site) SharePointPnPCoreOnline (to easily authenticate to SharePoint site) Setup connection to Azure To setup a connection to Azure through the Identity SDK, you can use the DefaultAzureCredential() class which will follow a specific mechanism based on the execution environment, which make this part easy to manage. To sum up, you'll be able to authenticate both in Visual Studio (as a user) and in Azure (as a managed identity / service principal) with the same method. More info here (this article also explains how to configure connection to Azure from Visual Studio). Below the snippet you can use to connect to the Key Vault, in order to get the certificate. 1 2 3 4 5 6 7 8 9 10 11 private X509Certificate2 GetCertificate () { string secretName = \"MyCert\" ; // Name of the certificate created before string keyVaultName = \"kvwecommon\" ; Uri keyVaultUri = new Uri ( $ \"https://{keyVaultName}.vault.azure.net/\" ); var client = new SecretClient ( keyVaultUri , new DefaultAzureCredential ()); KeyVaultSecret secret = client . GetSecret ( secretName ); return new X509Certificate2 ( Convert . FromBase64String ( secret . Value ), string . Empty , X509KeyStorageFlags . MachineKeySet ); } Setup connection to SharePoint Once you got the certificate, you can authenticate to SharePoint site with it, in order to get a ClientContext object. 1 2 3 4 5 6 7 8 9 10 11 12 private ClientContext GetAADAppOnlyClientContext ( X509Certificate2 certificate ) { string aadApplicationId = \"SHAREPOINT_AAD_APPLICATION_APP_ID\" ; string tenantName = \"contoso\" ; string sharePointUrl = $ \"https://{tenantName}.sharepoint.com/\" ; // If you want to query the User Profile, add \"-admin\" to the tenantName in the URL // string sharePointUrl = $\"https://{tenantName}-admin.sharepoint.com/\"; string tenant = $ \"{tenantName}.onmicrosoft.com\" ; // This can also be the Tenant ID (GUID) instead of the Tenant Name (contoso.onmicrosoft.com) return new OfficeDevPnP . Core . AuthenticationManager (). GetAzureADAppOnlyAuthenticatedContext ( sharePointUrl , aadApplicationId , tenant , certificate ); } Get Web Info With the ClientContext object instantiated before, you can get for example info about your site. HomeController.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // ... // Example in the \"HomeController\" class, adding a property to the ViewBag public ActionResult Index () { X509Certificate2 certificate = GetCertificate (); ClientContext ctx = GetAADAppOnlyClientContext ( certificate ); Web currentWeb = ctx . Web ; ctx . Load ( currentWeb ); ctx . ExecuteQuery (); ViewBag . WebTitle = currentWeb . Title ; return View (); } // ... Index.cshtml 1 2 3 4 5 6 7 8 9 @{ ViewBag.Title = \"Home Page\"; } < div > Title of the SP Web : @ViewBag.WebTitle </ div > <!--...--> Deploy the solution Once you got everything, you can test your Web Application locally then by publishing it (right-click on the project and select Publish ). Then select Azure as target, Azure App Service (Windows) and select the correct Azure account, the subscription used until now, the resource group and the Web Application we created together (here rg-common and MyWebApplicationForSharePoint ). That's it You should see something like this : If you have any question or if you encounter any problem during the execution of the commands, feel free to send a Tweet or a DM \ud83d\ude09 Useful Links Create Azure AD App Registration with PowerShell-Part 1 Create Azure AD App Registration with PowerShell-Part 2 Demystifying Azure AD Service Principals Relationship between application objects and service principals","title":"Connect to SharePoint in an AAD Application permission context with a certificate stored in Azure KeyVault"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#connect-to-sharepoint-in-an-aad-application-permission-context-with-a-certificate-stored-in-azure-keyvault","text":"","title":"Connect to SharePoint in an AAD Application permission context with a certificate stored in Azure KeyVault"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#use-case","text":"You work on a Web Application (or API) which is connected to a SharePoint Tenant. You want to setup things correctly and want to execute SharePoint actions in Azure Active Directory (AAD) Application permission context.","title":"Use Case"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#goal-of-this-article","text":"This article will show how to work with a SharePoint site through an API or a Web Application, only with AAD Application permissions. It will demonstrate how to setup everything and how to connect with a certificate stored in a Key Vault, step by step, in UI, PowerShell and Azure CLI. Let's see the final result below The Web Application (or API)... Requests access to the Key Vault, in order to get the stored certificate Gets the Key Vault certificate Authenticates to Office 365 using the SharePoint AAD Application with the certificate Gets a ClientContext with the requested API permissions Uses the ClientContext object to query the SharePoint site Gets Web info (I've shrinked the 3. because there are somes requests are made to https://login.microsofonline.com , more info here )","title":"Goal of this article"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#prerequisites","text":"An Office 365 (Dev) Tenant or a Partner Demo Tenant An Azure subscription and the following Azure AD role at least Application Administrator Command Interface (one of these) PowerShell (with Az PowerShell and AzureAD PowerShell ) Azure CLI ( on your machine or through Azure Cloud Shell ) Visual Studio (2017 or later)","title":"Prerequisites"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#why-authenticating-by-certificate-and-not-by-client-id-secret","text":"In AAD Application permission context, for unknown reason, you can't work with SharePoint REST API using Client ID / Secret connection. It only works with a connection using Client ID / Certificate. I've posted a solution as an answer on Stack Overflow a couple months ago. But in some cases, you have no choice but to work with a Client ID / Secret (like for example writing in the User Profile Service). In that case, use the legacy App-Only principal context","title":"Why authenticating by certificate and not by Client ID / Secret"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#why-using-two-azure-powershell-modules","text":"Even if Microsoft provides a module that covers most Azure resources and the most popular is Az PowerShell , this one does not cover all features regarding AAD. For instance, let's compare one command and the options provided. New-AzADApplication New-AzureADApplication -DisplayName -DisplayName -IdentifierUris [-IdentifierUris] [-HomePage] [-Homepage] [-ReplyUrls] [-ReplyUrls] [-AvailableToOtherTenants] [-AvailableToOtherTenants] [-KeyCredentials] [-KeyCredentials] [-PasswordCredentials] [-PasswordCredentials] [-StartDate] / [-EndDate] / [-CertValue] / [-Password] / / [-AppRoles] / [-Oauth2Permissions] / [-AddIns] / [-AllowGuestsSignIn] / [-AllowPassthroughUsers] / [-AppLogoUrl] / [-ErrorUrl] / [-GroupMembershipClaims] / [-InformationalUrls] / [-IsDeviceOnlyAuthSupported] / [-IsDisabled] / [-KnownClientApplications] / [-LogoutUrl] / [-Oauth2AllowImplicitFlow] / [-Oauth2AllowUrlPathMatching] / [-Oauth2RequirePostResponse] / [-OrgRestrictions] / [-OptionalClaims] / [-ParentalControlSettings] / [-PreAuthorizedApplications] / [-PublicClient] / [-PublisherDomain] / [-RecordConsentConditions] / [-RequiredResourceAccess] / [-SamlMetadataUrl] / [-SignInAudience] / [-WwwHomepage] As you can see, the AzureAD Module provides more options just in this example. And as stated here , the AzureAD module is the one to use when working with AAD.","title":"Why using two Azure PowerShell Modules"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#connect-to-azure","text":"Az PowerShell 1 2 3 4 5 Connect-AzAccount # -Subscription \"SUBSCRIPTION_ID\" -TenantId \"TENANT_ID\" (if you have multiples tenants) # Wait for prompt to get credentials Get-AzContext | select Account , Tenant # Check if the context is correct Azure AD PowerShell 1 2 3 4 5 Connect-AzureAD # -TenantId \"TENANT_ID\" (if you have multiples tenants) # Wait for prompt to get credentials Get-AzureADCurrentSessionInfo | select Account , Tenant # Check if the context is correct Azure CLI 1 2 3 4 5 az login # --tenant \"TENANT_ID\" (if you have multiples tenants) # Authorize with Device Code az account show --query '[user.name,tenantId]' # Check if the context is correct","title":"Connect to Azure"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#create-key-vault-and-the-ressource-group","text":"The first step is to create the Key Vault that will store the certificate.","title":"Create Key Vault (and the Ressource Group)"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#create-key-vault-through-interface","text":"","title":"Create Key Vault through interface"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#create-key-vault-with-code","text":"Az PowerShell 1 2 3 4 5 # Create Resource Group New-AzResourceGroup -Name \"rg-common\" -Location \"westeurope\" # -Tag @{Environment=\"Production\"; Department=\"HR\"} (if tags are required by your organization) # Create KeyVault New-AzKeyVault -VaultName \"kvwecommon\" -ResourceGroupName \"rg-common\" -Location \"westeurope\" Azure CLI 1 2 3 4 5 # Create Resource Group az group create -l westeurope -n \"rg-common\" # --tags Environment=\"Production\" Department=\"HR\" (if tags are required by your organization) # Create KeyVault az keyvault create --resource-group \"rg-common\" --name \"kvwecommon\"","title":"Create Key Vault with code"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#add-certificate-to-key-vault","text":"Once the Key Vault is created, we'll use its certificate creation feature to init one.","title":"Add certificate to Key Vault"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#add-certificate-through-interface","text":"","title":"Add certificate through interface"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#add-certificate-with-code","text":"Az PowerShell 1 2 3 4 5 6 # Add yourself the permissions to get secret (for testing locally the solution later) and to write in the certificates store Set-AzKeyVaultAccessPolicy -VaultName \"kvwecommon\" -EmailAddress \"YOUR_EMAIL_ADDRESS\" -PermissionsToSecret get -PermissionsToCertificates import , create , get , list -PassThru # If you want to set an expiration delay beyond 12 months, specify a value with the -ValidityInMonths parameter $policy = New-AzKeyVaultCertificatePolicy -IssuerName 'Self' -KeyType RSA -RenewAtPercentageLifetime 80 -SecretContentType application / x-pkcs12 -SubjectName 'CN=MyCert' -ValidityInMonths 12 Add-AzKeyVaultCertificate -VaultName \"kvwecommon\" -Name \"MyCert\" -CertificatePolicy $policy Azure CLI 1 2 3 4 5 6 # Add yourself the permissions to get secret (for testing locally the solution later) # You can get your info with \"az ad signed-in-user show --query objectId\" az keyvault set-policy --name \"kvwecommon\" --object-id \"YOUR_OBJECT_ID\" --secret-permissions get # If you want to set an expiration delay beyond 12 months, specify a value with the --validity parameter az keyvault certificate create --vault-name \"kvwecommon\" -n \"MyCert\" -p \" $( az keyvault certificate get-default-policy ) \"","title":"Add certificate with code"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-application-and-apply-admin-consent","text":"Like said before, to connect to SharePoint as an application, you have two options: using the AAD Application context (accepts Client ID / Secret and certificate) using the SharePoint App-Only principal context (accepts Client ID / Secret) As we'll authenticate with a certificate, the only way is to use the AAD Application context.","title":"Register AAD Application (and apply admin consent)"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-through-interface","text":"","title":"Register AAD App through interface"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-with-code","text":"To register Application permissions, you have to indicate which API you want to use and check the permissions required for you needs. If it's transparent for you when you register through the Azure Portal, let me explain how does it work under the hood. Whether you want to work with SharePoint, Microsoft Graph, Dynamics or else, each service is registered as a service principal (Enterprise Application in AAD). And each of these contains AppRoles (for Application permissions) and Oauth2Permissions (Delegated permissions). You'll notice later in the article that, for those service principals, we can refer to them as AppId and ObjectId . Depending on the command executed, the ObjectId will be required because it's unique, instead of the AppId which is the same whatever the organization is. For instance, the AppId for SharePoint is 00000003-0000-0ff1-ce00-000000000000 and for Microsoft Graph 00000003-0000-0000-c000-000000000000 . From the moment where you want to add permissions, you must register your application as a service principal too, in order to enable those permissions for your organization. Instead of the AAD Application registration user interface, you have to declare both AAD Application and its service principal (the Enterprise Application) Now that you know this, we'll see how to register the appropriate permissions and especially when admin consent is required.","title":"Register AAD App with code"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-with-powershell","text":"Azure AD PowerShell 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 # Here, we'll use the AzureAD Module # Get the service principal for \"Office 365 SharePoint Online\" $adspSPO = Get-AzureADServicePrincipal -Filter \"AppId eq '00000003-0000-0ff1-ce00-000000000000'\" # If you want to get all the available Application permissions $adspSPO . AppRoles # If you want to get all the available Delegated permissions $adspSPO . Oauth2Permissions # First, declare SharePoint permissions you want to provide to your AAD Application $reqSPO = New-Object -TypeName \"Microsoft.Open.AzureAD.Model.RequiredResourceAccess\" $reqSPO . ResourceAppId = \"00000003-0000-0ff1-ce00-000000000000\" # Here, we add Application permissions that will require admin consent $roleId = \"678536fe-1083-478a-9c59-b99265e6b0d3\" $reqSPO . ResourceAccess = New-Object System . Collections . Generic . List [Microsoft.Open.AzureAD.Model.ResourceAccess] $reqSPO . ResourceAccess . Add ( [Microsoft.Open.AzureAD.Model.ResourceAccess] :: new ( $roleId , \"Role\" )) # Sites.FullControl.All # But if you want to add Delegated permissions that will require admin consent $reqSPO . ResourceAccess . Add ( [Microsoft.Open.AzureAD.Model.ResourceAccess] :: new ( \"a468ea40-458c-4cc2-80c4-51781af71e41\" , \"Scope\" )) # TermStore.Read.All $reqSPO . ResourceAccess . Add ( [Microsoft.Open.AzureAD.Model.ResourceAccess] :: new ( \"0cea5a30-f6f8-42b5-87a0-84cc26822e02\" , \"Scope\" )) # User.Read.All # Register the AAD Application $aadApp = New-AzureADApplication -DisplayName \"MySharePointApp\" -AvailableToOtherTenants : $false -RequiredResourceAccess $reqSPO # Then, add you as an owner of the AAD Application # Get your ObjectId $yourself = Get-AzureADUser | ?{ $_ . UserPrincipalName -like \"*PART OF YOUR MAIL ADDRESS*\" } | select ObjectId # Add yourself as an owner Add-AzureADApplicationOwner -ObjectId $aadApp . ObjectId -RefObjectId $yourself . ObjectId # Register the AAD Application as a service principal $aadspapp = New-AzureADServicePrincipal -AppId $aadApp . AppId # Add the App Role Assignment mentioned before # This will grant admin consent # Execute this cmdlet as much as you have Application permission roles that requires admin consent New-AzureADServiceAppRoleAssignment -ObjectId $aadspapp . ObjectId -Id $roleId -PrincipalId $aadspapp . ObjectId -ResourceId $adspSPO . ObjectId","title":"Register AAD App with PowerShell"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-aad-app-with-azure-cli","text":"Azure CLI 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # If you want to get all the available Application permissions for \"Office 365 SharePoint Online\" az ad sp list --filter \"appId eq '00000003-0000-0ff1-ce00-000000000000'\" --query '[].appRoles[].{Value:value, Id:id, DisplayName:displayName}' -o table # If you want to get all the available Delegated permissions for \"Office 365 SharePoint Online\" az ad sp list --filter \"appId eq '00000003-0000-0ff1-ce00-000000000000'\" --query '[].oauth2Permissions[].{Value:value, Id:id, UserConsentDisplayName:userConsentDisplayName}' -o table # Declare SharePoint Application permissions # Sites.FullControl.All permissions = '[{\"resourceAppId\":\"00000003-0000-0ff1-ce00-000000000000\",\"resourceAccess\":[{\"id\":\"678536fe-1083-478a-9c59-b99265e6b0d3\",\"type\":\"Role\"}]}]' # Or declare SharePoint Delegated permissions (here permissions requested are TermStore.Read.All, User.Read.All) # permissions='[{\"resourceAppId\":\"00000003-0000-0ff1-ce00-000000000000\",\"resourceAccess\":[{\"id\":\"a468ea40-458c-4cc2-80c4-51781af71e41\",\"type\":\"Scope\"},{\"id\":\"0cea5a30-f6f8-42b5-87a0-84cc26822e02\",\"type\":\"Scope\"}]}]' # Register the SharePoint AAD Application with the required permissions az ad app create --display-name \"MySharePointApp\" --required-resource-accesses $permissions # Add yourself as an owner of the SharePoint AAD Application # You can get your info with \"az ad signed-in-user show --query objectId\" az ad app owner add --id \"AAD_APP_OBJECT_ID\" --owner-object-id \"YOUR_OBJECT_ID\" # Register the AAD Application as a service principal az ad sp create --id \"AAD_APP_OBJECT_ID\" # Grant admin consent # Execute this command if you have Application permission roles that requires admin consent # /!\\ You can face a 400 error when executing this command from Cloud Shell. # If so, run \"az login\" first. Known issue : https://github.com/Azure/azure-cli/issues/11749 az ad app permission admin-consent --id \"AAD_APP_OBJECT_ID\"","title":"Register AAD App with Azure CLI"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#optional-grant-admin-consent-on-delegated-permissions-with-powershell","text":"For now, if you want to work with delegated permissions on PowerShell, there's no cmdlet to grant admin consent (instead of Azure CLI, as you've see before). The only approach is to use Microsoft Graph, which provides methods to add / consent Delegated permissions. Full example here . Az PowerShell 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Back in Az PowerShell # Assume that the Delegated permissions have been added before, through the New-AzureADApplication cmdlet # First, init Graph session token $context = Get-AzContext $ResourceGraphURI = \"https://graph.microsoft.com/\" $graphToken = [Microsoft.Azure.Commands.Common.Authentication.AzureSession] :: Instance . AuthenticationFactory . Authenticate ( $context . Account , $context . Environment , $context . Tenant . Id . ToString (), $null , [Microsoft.Azure.Commands.Common.Authentication.ShowDialog] :: Never , $null , $ResourceGraphURI ). AccessToken # Declare the scopes you want to grant access (enter the same) $body = @{ clientId = $aadspapp . ObjectId consentType = \"AllPrincipals\" principalId = $null resourceId = $adspSPO . ObjectId scope = \"AllSites.FullControl\" } $apiUrl = \"https://graph.microsoft.com/v1.0/oauth2PermissionGrants\" Invoke-RestMethod -Uri $apiUrl -Headers @{ Authorization = \"Bearer $( $graphToken ) \" } -Method POST -Body $( $body | ConvertTo-Json ) -ContentType \"application/json\"","title":"(optional) Grant Admin Consent on Delegated permissions with PowerShell"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-web-application-api-application","text":"Now, we're going to create the resource that will query the SharePoint site. It can be a Web Application or an API. In this example, it will be a Web Application (but in the end, the code used for connecting to SharePoint will be the same). Once the Web Application created, you will have to enable Managed Identity, in order to allow the resource to access the Key Vault. This will lead in the creation of a service principal you'll be able to find in the AAD Enterprise Applications page.","title":"Register Web Application / API Application"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-the-resource-through-interface","text":"","title":"Register the resource through interface"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#enable-managed-identity-through-interface","text":"","title":"Enable Managed Identity through interface"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#register-the-resource-with-code-and-enable-managed-identity","text":"Az PowerShell 1 2 3 4 5 6 7 8 9 10 # Create App Service Plan based on Windows $appSerPlan = New-AzAppServicePlan -ResourceGroupName \"rg-common\" -Name \"asp-we-rgcommon\" -Location \"westeurope\" -Tier \"Free\" # Create Web Application # /!\\ Actually, there's no possibility to specify the Stack / Runtime with this command # /!\\ But by default, it will create an ASP.NET 4.8 one (as the App Service Plan is hosted on Windows) New-AzWebApp -ResourceGroupName \"rg-common\" -Name \"MyWebApplicationForSharePoint\" -Location \"westeurope\" -AppServicePlan $appSerPlan . Id # Enable Managed Identity (= creating a service principal) Set-AzWebApp -ResourceGroupName \"rg-common\" -Name \"MyWebApplicationForSharePoint\" -AssignIdentity $true Azure CLI 1 2 3 4 5 # Create App Service Plan (if does not exists) az appservice plan create --resource-group \"rg-common\" --name \"asp-we-rgcommon\" --location \"westeurope\" --sku F1 # Create Web Application (and its service principal) az webapp create --resource-group \"rg-common\" --name \"MyWebApplicationForSharePoint\" --plan \"asp-we-rgcommon\" --runtime \"aspnet|V4.8\" --assign-identity","title":"Register the resource with code (and enable Managed Identity)"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#upload-key-vault-certificate-into-aad-application","text":"By importing the certificate (created with the Key Vault) in the AAD Application, you allow an authentication to SharePoint when requesting access to the Tenant, with a Client ID / Certificate.","title":"Upload Key Vault Certificate into AAD Application"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#upload-through-interface","text":"","title":"Upload through interface"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#upload-with-code","text":"Az PowerShell 1 2 3 4 5 6 # Get previsouly created certificate $myCert = ( Get-AzKeyVaultCertificate -VaultName \"kvwecommon\" -Name \"MyCert\" ). Certificate $certString = [Convert] :: ToBase64String ( $myCert . GetRawCertData ()) # Upload the certificate to the SharePoint AAD Application New-AzADAppCredential -ObjectId $aadApp . ObjectId -CertValue $certString -StartDate $myCert . NotBefore -EndDate $myCert . NotAfter Azure CLI 1 2 3 4 5 # Get previsouly created certificate az keyvault certificate download --vault-name \"kvwecommon\" --name \"MyCert\" -f MyCert.pem # Upload the certificate to the SharePoint AAD Application az ad sp credential reset --name \"AAD_APP_OBJECT_ID\" --cert \"@~/MyCert.pem\"","title":"Upload with code"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#grant-web-application-to-get-key-vault-secret","text":"When using Microsoft.Azure.KeyVault library, we used to grant certificate (GET) access policy to certificate. But as this library is replaced by the Azure.Security .NET Libraries, we have to use the Keyvault.Secrets service because until now, there's no method provided to get a Key Vault Certificate with the certificate (GET) access policy. Furthermore, the Certificate in Key Vault is more a concept than just a type of Secret. That's why we're going to setup a secret (GET) access policy.","title":"Grant Web Application to get Key Vault Secret"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#grant-access-through-interface","text":"","title":"Grant access through interface"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#grant-access-with-code","text":"Az PowerShell 1 2 3 4 5 # Retrieve Web Application service principal $webappsp = Get-AzADServicePrincipal -DisplayName \"MyWebApplicationForSharePoint\" # Assign the permission Set-AzKeyVaultAccessPolicy -VaultName \"kvwecommon\" -ObjectId $webappsp . Id -PermissionsToSecrets get -PassThru Azure CLI 1 2 3 4 5 # Retrieve Web Application service principal objectId az ad sp list --display-name \"MyWebApplicationForSharePoint\" --query [] .objectId # Assign the permission az keyvault set-policy --name \"kvwecommon\" --object-id \"WEB_APPLICATION_SERVICE_PRINCIPAL_OBJECT_ID\" --secret-permissions get","title":"Grant access with code"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#init-aspnet-web-application-project","text":"To init your project (.NET Framework 4.8 C#), you can follow this quickstart (and if you want to try with an API deployed in an Azure API, just select \"Web API\" instead of \"MVC\").","title":"Init ASP.NET Web Application Project"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#get-nuget-packages-azure-sharepoint","text":"Below the Nuget packages required to test the architecture: Azure.Identy (for the authentication to the KeyVault) Azure.Security.KeyVault.Secrets (to get the certificate) Microsoft.SharePointOnline.CSOM (to work with SharePoint Site) SharePointPnPCoreOnline (to easily authenticate to SharePoint site)","title":"Get Nuget Packages (Azure, SharePoint)"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#setup-connection-to-azure","text":"To setup a connection to Azure through the Identity SDK, you can use the DefaultAzureCredential() class which will follow a specific mechanism based on the execution environment, which make this part easy to manage. To sum up, you'll be able to authenticate both in Visual Studio (as a user) and in Azure (as a managed identity / service principal) with the same method. More info here (this article also explains how to configure connection to Azure from Visual Studio). Below the snippet you can use to connect to the Key Vault, in order to get the certificate. 1 2 3 4 5 6 7 8 9 10 11 private X509Certificate2 GetCertificate () { string secretName = \"MyCert\" ; // Name of the certificate created before string keyVaultName = \"kvwecommon\" ; Uri keyVaultUri = new Uri ( $ \"https://{keyVaultName}.vault.azure.net/\" ); var client = new SecretClient ( keyVaultUri , new DefaultAzureCredential ()); KeyVaultSecret secret = client . GetSecret ( secretName ); return new X509Certificate2 ( Convert . FromBase64String ( secret . Value ), string . Empty , X509KeyStorageFlags . MachineKeySet ); }","title":"Setup connection to Azure"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#setup-connection-to-sharepoint","text":"Once you got the certificate, you can authenticate to SharePoint site with it, in order to get a ClientContext object. 1 2 3 4 5 6 7 8 9 10 11 12 private ClientContext GetAADAppOnlyClientContext ( X509Certificate2 certificate ) { string aadApplicationId = \"SHAREPOINT_AAD_APPLICATION_APP_ID\" ; string tenantName = \"contoso\" ; string sharePointUrl = $ \"https://{tenantName}.sharepoint.com/\" ; // If you want to query the User Profile, add \"-admin\" to the tenantName in the URL // string sharePointUrl = $\"https://{tenantName}-admin.sharepoint.com/\"; string tenant = $ \"{tenantName}.onmicrosoft.com\" ; // This can also be the Tenant ID (GUID) instead of the Tenant Name (contoso.onmicrosoft.com) return new OfficeDevPnP . Core . AuthenticationManager (). GetAzureADAppOnlyAuthenticatedContext ( sharePointUrl , aadApplicationId , tenant , certificate ); }","title":"Setup connection to SharePoint"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#get-web-info","text":"With the ClientContext object instantiated before, you can get for example info about your site. HomeController.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // ... // Example in the \"HomeController\" class, adding a property to the ViewBag public ActionResult Index () { X509Certificate2 certificate = GetCertificate (); ClientContext ctx = GetAADAppOnlyClientContext ( certificate ); Web currentWeb = ctx . Web ; ctx . Load ( currentWeb ); ctx . ExecuteQuery (); ViewBag . WebTitle = currentWeb . Title ; return View (); } // ... Index.cshtml 1 2 3 4 5 6 7 8 9 @{ ViewBag.Title = \"Home Page\"; } < div > Title of the SP Web : @ViewBag.WebTitle </ div > <!--...-->","title":"Get Web Info"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#deploy-the-solution","text":"Once you got everything, you can test your Web Application locally then by publishing it (right-click on the project and select Publish ). Then select Azure as target, Azure App Service (Windows) and select the correct Azure account, the subscription used until now, the resource group and the Web Application we created together (here rg-common and MyWebApplicationForSharePoint ).","title":"Deploy the solution"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#thats-it","text":"You should see something like this : If you have any question or if you encounter any problem during the execution of the commands, feel free to send a Tweet or a DM \ud83d\ude09","title":"That's it"},{"location":"articles/20201119-connect-to-sharepoint-apppermission-certificate-keyvault/#useful-links","text":"Create Azure AD App Registration with PowerShell-Part 1 Create Azure AD App Registration with PowerShell-Part 2 Demystifying Azure AD Service Principals Relationship between application objects and service principals","title":"Useful Links"},{"location":"tips/20200213-csom-test-file-folder-existence/","text":"[CSOM] Test in your C# code if a SharePoint File or Folder exists A Simple Use Case When you want to know if a file or folder already exists on a SharePoint Site (in a migration use case for example, before perform a copy / move), you can have some bad surprises. Let's try with a simple folder case example. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 string userName = \"user@tenant.onmicrosoft.com\" ; SecureString securePassword = new SecureString (); foreach ( var cc in \"yourPlainTextPassword\" ) { securePassword . AppendChar ( cc ); } using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { spContext . Credentials = new SharePointOnlineCredentials ( userName , securePassword ); spContext . ExecuteQuery (); Web currentWeb = spContext . Web ; List docLibrary = currentWeb . Lists . GetByTitle ( \"Documents\" ); spContext . Load ( docLibrary ); spContext . Load ( docLibrary . RootFolder ); spContext . ExecuteQuery (); string folderPath = docLibrary . RootFolder . ServerRelativeUrl + \"/MyFolderThatDoesNotExists\" ; Folder folderToGet = currentWeb . GetFolderByServerRelativeUrl ( folderPath ); spContext . Load ( folderToGet , f => f . Exists ); try { spContext . ExecuteQuery (); if ( folderToGet . Exists ) { // Do something } else { // Do something else } } catch ( Exception ex ) { Console . WriteLine ( ex . Message ); } } The twisted thing here's that the if (folderToGet.Exists) line won't be reached. Because if you use the \"GetFolderByServerRelativeUrl\" and the folder actually doesn't exists (or any parent folder in the hierarchy), it'll throw an exception. But if it exists, then you'll be able to test the value of folderToGet.Exists property (which obviously will return true ). Clever. So you want to test if a folder exists but without to constantly catch the error... Good news : the SharePointPnPCoreOnline Package implements this ! Let's try it : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Credentials declaration like above ... using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { // Connection like above ... string folderPath = docLibrary . RootFolder . ServerRelativeUrl + \"/MyFileThatDoesNotExists\" ; bool exists = currentWeb . DoesFolderExists ( folderPath ); if ( exists ) { // Do something } else { // Do something else } } And that's it ! The DoesFolderExists Method provides this test. And it also works with folder hierarchy containing special characters \ud83d\ude09. For testing the existance of a file, there's not any equivalent. So if you try to get a file that doesn't exists : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Credentials declaration like above ... using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { // Connection like above ... string filePath = docLibrary . RootFolder . ServerRelativeUrl + \"/MyFileThatDoesNotExists\" ; File fileToGet = currentWeb . GetFileByServerRelativeUrl ( filePath ); spContext . Load ( fileToGet , f => f . Exists ); try { spContext . ExecuteQuery (); } catch ( Exception ex ) { Console . WriteLine ( ex . Message ); } } It'll also throw an exception. So the thing here is to use the GetFileByServerRelativePath method which returns a File object, whether it exists or not. And there : the \"Exists\" property can be used. The great thing about this method is that it also works if you file (or your folder hierarchy) contains special characters: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Credentials declaration like above ... using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { // Connection like above ... string filePath = docLibrary . RootFolder . ServerRelativeUrl + \"/# My Tricky File \u00fch\u00fch\u00fc.docx\" ; File fileToGet = currentWeb . GetFileByServerRelativePath ( ResourcePath . FromDecodedUrl ( filePath )); spContext . Load ( fileToGet , f => f . Exists ); try { spContext . ExecuteQuery (); if ( fileToGet . Exists ) { // Do something } else { // Do something else } } catch ( Exception ex ) { Console . WriteLine ( ex . Message ); } } Bonus : Using the Windows Credential Manager For Windows users, if you don't want to always write your credentials and if you already know the Add / Get -PnPStoredCredential cmdlets, you might be interested to use the CredentialManager class provided by the Adys Tech company. You can fin the Nugget package here . Then, when referencing it, you just have to use it like this: 1 2 3 var cred = CredentialManager . GetCredentials ( \"PnPPS:CredentialsName\" ); string user = cred . UserName ; SecureString pwd = cred . SecurePassword ; Useful Links FileFolderExtensions.DoesFolderExists from SharePoint Online PnP Core Supporting % and # in files and folders with the ResourcePath API","title":"[CSOM] Test in your C# code if a SharePoint File or Folder exists"},{"location":"tips/20200213-csom-test-file-folder-existence/#csom-test-in-your-c-code-if-a-sharepoint-file-or-folder-exists","text":"","title":"[CSOM] Test in your C# code if a SharePoint File or Folder exists"},{"location":"tips/20200213-csom-test-file-folder-existence/#a-simple-use-case","text":"When you want to know if a file or folder already exists on a SharePoint Site (in a migration use case for example, before perform a copy / move), you can have some bad surprises. Let's try with a simple folder case example. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 string userName = \"user@tenant.onmicrosoft.com\" ; SecureString securePassword = new SecureString (); foreach ( var cc in \"yourPlainTextPassword\" ) { securePassword . AppendChar ( cc ); } using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { spContext . Credentials = new SharePointOnlineCredentials ( userName , securePassword ); spContext . ExecuteQuery (); Web currentWeb = spContext . Web ; List docLibrary = currentWeb . Lists . GetByTitle ( \"Documents\" ); spContext . Load ( docLibrary ); spContext . Load ( docLibrary . RootFolder ); spContext . ExecuteQuery (); string folderPath = docLibrary . RootFolder . ServerRelativeUrl + \"/MyFolderThatDoesNotExists\" ; Folder folderToGet = currentWeb . GetFolderByServerRelativeUrl ( folderPath ); spContext . Load ( folderToGet , f => f . Exists ); try { spContext . ExecuteQuery (); if ( folderToGet . Exists ) { // Do something } else { // Do something else } } catch ( Exception ex ) { Console . WriteLine ( ex . Message ); } } The twisted thing here's that the if (folderToGet.Exists) line won't be reached. Because if you use the \"GetFolderByServerRelativeUrl\" and the folder actually doesn't exists (or any parent folder in the hierarchy), it'll throw an exception. But if it exists, then you'll be able to test the value of folderToGet.Exists property (which obviously will return true ). Clever. So you want to test if a folder exists but without to constantly catch the error... Good news : the SharePointPnPCoreOnline Package implements this ! Let's try it : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // Credentials declaration like above ... using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { // Connection like above ... string folderPath = docLibrary . RootFolder . ServerRelativeUrl + \"/MyFileThatDoesNotExists\" ; bool exists = currentWeb . DoesFolderExists ( folderPath ); if ( exists ) { // Do something } else { // Do something else } } And that's it ! The DoesFolderExists Method provides this test. And it also works with folder hierarchy containing special characters \ud83d\ude09. For testing the existance of a file, there's not any equivalent. So if you try to get a file that doesn't exists : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // Credentials declaration like above ... using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { // Connection like above ... string filePath = docLibrary . RootFolder . ServerRelativeUrl + \"/MyFileThatDoesNotExists\" ; File fileToGet = currentWeb . GetFileByServerRelativeUrl ( filePath ); spContext . Load ( fileToGet , f => f . Exists ); try { spContext . ExecuteQuery (); } catch ( Exception ex ) { Console . WriteLine ( ex . Message ); } } It'll also throw an exception. So the thing here is to use the GetFileByServerRelativePath method which returns a File object, whether it exists or not. And there : the \"Exists\" property can be used. The great thing about this method is that it also works if you file (or your folder hierarchy) contains special characters: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // Credentials declaration like above ... using ( ClientContext spContext = new ClientContext ( \"SharePointSiteUrl\" )) { // Connection like above ... string filePath = docLibrary . RootFolder . ServerRelativeUrl + \"/# My Tricky File \u00fch\u00fch\u00fc.docx\" ; File fileToGet = currentWeb . GetFileByServerRelativePath ( ResourcePath . FromDecodedUrl ( filePath )); spContext . Load ( fileToGet , f => f . Exists ); try { spContext . ExecuteQuery (); if ( fileToGet . Exists ) { // Do something } else { // Do something else } } catch ( Exception ex ) { Console . WriteLine ( ex . Message ); } }","title":"A Simple Use Case"},{"location":"tips/20200213-csom-test-file-folder-existence/#bonus-using-the-windows-credential-manager","text":"For Windows users, if you don't want to always write your credentials and if you already know the Add / Get -PnPStoredCredential cmdlets, you might be interested to use the CredentialManager class provided by the Adys Tech company. You can fin the Nugget package here . Then, when referencing it, you just have to use it like this: 1 2 3 var cred = CredentialManager . GetCredentials ( \"PnPPS:CredentialsName\" ); string user = cred . UserName ; SecureString pwd = cred . SecurePassword ;","title":"Bonus : Using the Windows Credential Manager"},{"location":"tips/20200213-csom-test-file-folder-existence/#useful-links","text":"FileFolderExtensions.DoesFolderExists from SharePoint Online PnP Core Supporting % and # in files and folders with the ResourcePath API","title":"Useful Links"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/","text":"[SPFx] Transform the Fluent UI ProgressIndicator component into a countdown timer Info As you know, the well-know Office UI Fabric front-end infrastructure has been renamed as Fluent UI ! (more info here ) Recently, I had to develop a certification exam with SPFx. One of the features was to provide a countdown within the questions. As I'm familiar with React and the Fluent UI components, I was wondering if it was possible to reuse the ProgressIndicator component and set it up in reverse mode. So here we go ! Existing sample First, let's have a look at the sample provided here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 import * as React from 'react' ; import { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator' ; import { Async } from 'office-ui-fabric-react/lib/Utilities' ; export interface IProgressIndicatorBasicExampleState { percentComplete : number ; } const INTERVAL_DELAY = 100 ; const INTERVAL_INCREMENT = 0.01 ; const RESTART_WAIT_TIME = 2000 ; export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; constructor ( props : {}) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 0 , }; this . _startProgressDemo = this . _startProgressDemo . bind ( this ); } public componentDidMount () : void { this . _startProgressDemo (); } public componentWillUnmount () : void { this . _async . dispose (); } public render () : JSX . Element { const { percentComplete } = this . state ; return ( < ProgressIndicator label = \"Example title\" description = \"Example description\" percentComplete = { percentComplete } /> ); } private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 0 , }); // update progress this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete + INTERVAL_INCREMENT ; // once complete, set the demo to start again if ( percentComplete >= 1.0 ) { percentComplete = 1.0 ; this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , }); }, INTERVAL_DELAY ); } } This code gives this behavior: Countdown mode Now, let's reverse the process. Let's say that you want your countdown set to 30 seconds. You can replace the const variable INTERVAL_INCREMENT (which won't be used anymore) by COUNTDOWN_DURATION . For this demo, the duration will be in milliseconds. 1 2 3 4 5 6 7 8 9 10 11 12 import * as React from 'react' ; import { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator' ; import { Async } from 'office-ui-fabric-react/lib/Utilities' ; export interface IProgressIndicatorBasicExampleState { percentComplete : number ; } const INTERVAL_DELAY = 100 ; const COUNTDOWN_DURATION = 30000 ; const RESTART_WAIT_TIME = 2000 ; //... Then, you can set the percentComplete state to 1 in the constructor (remember that this variable is used as a parameter of the component, which goes from 0 to 1). So that the initial state of the Indicator is 1. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //... export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; constructor ( props : {}) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 1 , // --> initial state }; this . _startProgressDemo = this . _startProgressDemo . bind ( this ); } //... } In the method called when the component is mounted, make the same update. 1 2 3 4 5 6 7 8 //... private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 1 , }); //... } Now comes the tricky part. When you want to properly decrease the progress indicator, you have to calculate the value to decrease from 1 (the initial state, remember ?). This depends on the delay of the countdown. You can add this variable as a private member of the component. 1 2 3 4 5 6 7 8 //... export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; // value = [initial state of ProgressIndicator] / [countdown duration in milliseconds] / [interval of refresh in milliseconds] private _intervalDecrement : number = 1 / COUNTDOWN_DURATION / INTERVAL_DELAY ; //... } We want now to calculate the remaining time of the countdown, to refresh the progress indicator component. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //... this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete - this . _intervalDecrement ; // once 0 reached, set the demo to start again if ( percentComplete <= 0 ) { this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , }); }, INTERVAL_DELAY ) Updated code So here is the complete updated code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 import * as React from 'react' ; import { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator' ; import { Async } from 'office-ui-fabric-react/lib/Utilities' ; export interface IProgressIndicatorBasicExampleState { percentComplete : number ; } const INTERVAL_DELAY = 100 ; const COUNTDOWN_DURATION = 30000 ; const RESTART_WAIT_TIME = 2000 ; export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; // value = [initial state of ProgressIndicator] / ([countdown duration in milliseconds] / [interval of refresh in milliseconds]) private _intervalDecrement : number = 1 / ( COUNTDOWN_DURATION / INTERVAL_DELAY ); constructor ( props : {}) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 1 , // --> initial state }; this . _startProgressDemo = this . _startProgressDemo . bind ( this ); } public componentDidMount () : void { this . _startProgressDemo (); } public componentWillUnmount () : void { this . _async . dispose (); } public render () : JSX . Element { const { percentComplete } = this . state ; return ( < ProgressIndicator label = \"Example title\" description = \"Example description\" percentComplete = { percentComplete } /> ); } private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 1 , }); this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete - this . _intervalDecrement ; // once 0 reached, set the demo to start again if ( percentComplete <= 0 ) { this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , }); }, INTERVAL_DELAY ) } } And that's it! You can find the Codepen example here . Furthermore If you want this control to be reset (for example from a question to another in a session exam), you can turn it into a fully uncontrolled component using a key ! You can also add some text to display the remaining time like this: 1 2 3 4 5 6 7 8 9 10 11 12 //... constructor ( props ) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 1 , timeLeft : COUNTDOWN_DURATION , // --> init timeleft to 30 seconds }; } //... 1 2 3 4 5 6 7 8 9 public render () : JSX . Element { const { percentComplete } = this . state ; return ( < ProgressIndicator label = { `Remaining time : ${ this . state . timeLeft > 0 ? Math . floor ( this . state . timeLeft / 1000 ) : 0 } seconds` } percentComplete = { percentComplete } /> ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //... private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 1 , timeLeft : COUNTDOWN_DURATION , }); this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete - this . _intervalDecrement ; let remainingTime = this . state . timeLeft - INTERVAL_DELAY ; // --> update the remaining time // once 0 reached, set the demo to start again if ( percentComplete <= 0 ) { this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , timeLeft : remainingTime , }); }, INTERVAL_DELAY ) } Here's the result: You could change the color of the progress indicator component regarding the remaining time and so on... Use your imagination \ud83d\ude09 Happy coding! (Thanks to Charlie B for its help)","title":"[SPFx] Transform the Fluent UI ProgressIndicator  component into a countdown timer"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#spfx-transform-the-fluent-ui-progressindicator-component-into-a-countdown-timer","text":"Info As you know, the well-know Office UI Fabric front-end infrastructure has been renamed as Fluent UI ! (more info here ) Recently, I had to develop a certification exam with SPFx. One of the features was to provide a countdown within the questions. As I'm familiar with React and the Fluent UI components, I was wondering if it was possible to reuse the ProgressIndicator component and set it up in reverse mode. So here we go !","title":"[SPFx] Transform the Fluent UI ProgressIndicator  component into a countdown timer"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#existing-sample","text":"First, let's have a look at the sample provided here . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 import * as React from 'react' ; import { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator' ; import { Async } from 'office-ui-fabric-react/lib/Utilities' ; export interface IProgressIndicatorBasicExampleState { percentComplete : number ; } const INTERVAL_DELAY = 100 ; const INTERVAL_INCREMENT = 0.01 ; const RESTART_WAIT_TIME = 2000 ; export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; constructor ( props : {}) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 0 , }; this . _startProgressDemo = this . _startProgressDemo . bind ( this ); } public componentDidMount () : void { this . _startProgressDemo (); } public componentWillUnmount () : void { this . _async . dispose (); } public render () : JSX . Element { const { percentComplete } = this . state ; return ( < ProgressIndicator label = \"Example title\" description = \"Example description\" percentComplete = { percentComplete } /> ); } private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 0 , }); // update progress this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete + INTERVAL_INCREMENT ; // once complete, set the demo to start again if ( percentComplete >= 1.0 ) { percentComplete = 1.0 ; this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , }); }, INTERVAL_DELAY ); } } This code gives this behavior:","title":"Existing sample"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#countdown-mode","text":"Now, let's reverse the process. Let's say that you want your countdown set to 30 seconds. You can replace the const variable INTERVAL_INCREMENT (which won't be used anymore) by COUNTDOWN_DURATION . For this demo, the duration will be in milliseconds. 1 2 3 4 5 6 7 8 9 10 11 12 import * as React from 'react' ; import { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator' ; import { Async } from 'office-ui-fabric-react/lib/Utilities' ; export interface IProgressIndicatorBasicExampleState { percentComplete : number ; } const INTERVAL_DELAY = 100 ; const COUNTDOWN_DURATION = 30000 ; const RESTART_WAIT_TIME = 2000 ; //... Then, you can set the percentComplete state to 1 in the constructor (remember that this variable is used as a parameter of the component, which goes from 0 to 1). So that the initial state of the Indicator is 1. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 //... export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; constructor ( props : {}) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 1 , // --> initial state }; this . _startProgressDemo = this . _startProgressDemo . bind ( this ); } //... } In the method called when the component is mounted, make the same update. 1 2 3 4 5 6 7 8 //... private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 1 , }); //... } Now comes the tricky part. When you want to properly decrease the progress indicator, you have to calculate the value to decrease from 1 (the initial state, remember ?). This depends on the delay of the countdown. You can add this variable as a private member of the component. 1 2 3 4 5 6 7 8 //... export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; // value = [initial state of ProgressIndicator] / [countdown duration in milliseconds] / [interval of refresh in milliseconds] private _intervalDecrement : number = 1 / COUNTDOWN_DURATION / INTERVAL_DELAY ; //... } We want now to calculate the remaining time of the countdown, to refresh the progress indicator component. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 //... this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete - this . _intervalDecrement ; // once 0 reached, set the demo to start again if ( percentComplete <= 0 ) { this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , }); }, INTERVAL_DELAY )","title":"Countdown mode"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#updated-code","text":"So here is the complete updated code. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 import * as React from 'react' ; import { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator' ; import { Async } from 'office-ui-fabric-react/lib/Utilities' ; export interface IProgressIndicatorBasicExampleState { percentComplete : number ; } const INTERVAL_DELAY = 100 ; const COUNTDOWN_DURATION = 30000 ; const RESTART_WAIT_TIME = 2000 ; export class ProgressIndicatorBasicExample extends React . Component < {}, IProgressIndicatorBasicExampleState > { private _interval : number ; private _async : Async ; // value = [initial state of ProgressIndicator] / ([countdown duration in milliseconds] / [interval of refresh in milliseconds]) private _intervalDecrement : number = 1 / ( COUNTDOWN_DURATION / INTERVAL_DELAY ); constructor ( props : {}) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 1 , // --> initial state }; this . _startProgressDemo = this . _startProgressDemo . bind ( this ); } public componentDidMount () : void { this . _startProgressDemo (); } public componentWillUnmount () : void { this . _async . dispose (); } public render () : JSX . Element { const { percentComplete } = this . state ; return ( < ProgressIndicator label = \"Example title\" description = \"Example description\" percentComplete = { percentComplete } /> ); } private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 1 , }); this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete - this . _intervalDecrement ; // once 0 reached, set the demo to start again if ( percentComplete <= 0 ) { this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , }); }, INTERVAL_DELAY ) } } And that's it! You can find the Codepen example here .","title":"Updated code"},{"location":"tips/20200505-spfx-progressindicator-to-countdown-timer/#furthermore","text":"If you want this control to be reset (for example from a question to another in a session exam), you can turn it into a fully uncontrolled component using a key ! You can also add some text to display the remaining time like this: 1 2 3 4 5 6 7 8 9 10 11 12 //... constructor ( props ) { super ( props ); this . _async = new Async ( this ); this . state = { percentComplete : 1 , timeLeft : COUNTDOWN_DURATION , // --> init timeleft to 30 seconds }; } //... 1 2 3 4 5 6 7 8 9 public render () : JSX . Element { const { percentComplete } = this . state ; return ( < ProgressIndicator label = { `Remaining time : ${ this . state . timeLeft > 0 ? Math . floor ( this . state . timeLeft / 1000 ) : 0 } seconds` } percentComplete = { percentComplete } /> ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 //... private _startProgressDemo () : void { // reset the demo this . setState ({ percentComplete : 1 , timeLeft : COUNTDOWN_DURATION , }); this . _interval = this . _async . setInterval (() => { let percentComplete = this . state . percentComplete - this . _intervalDecrement ; let remainingTime = this . state . timeLeft - INTERVAL_DELAY ; // --> update the remaining time // once 0 reached, set the demo to start again if ( percentComplete <= 0 ) { this . _async . clearInterval ( this . _interval ); this . _async . setTimeout ( this . _startProgressDemo , RESTART_WAIT_TIME ); } this . setState ({ percentComplete : percentComplete , timeLeft : remainingTime , }); }, INTERVAL_DELAY ) } Here's the result: You could change the color of the progress indicator component regarding the remaining time and so on... Use your imagination \ud83d\ude09 Happy coding! (Thanks to Charlie B for its help)","title":"Furthermore"}]}